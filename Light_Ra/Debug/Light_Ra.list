
Light_Ra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b24  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df0  08009d10  08009d10  00019d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab00  0800ab00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab00  0800ab00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab00  0800ab00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab00  0800ab00  0001ab00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab04  0800ab04  0001ab04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ab08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  0800ab78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  0800ab78  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b41c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d3  00000000  00000000  0002b4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c6c8  00000000  00000000  0002ed78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cfb  00000000  00000000  0004b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e33  00000000  00000000  0005d13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3f6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b50  00000000  00000000  000f3fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08009cf4 	.word	0x08009cf4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08009cf4 	.word	0x08009cf4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <Make_Spectral_Standard>:
    /* W_k U_k V_k */
    {0, 0, 0},
};

void Make_Spectral_Standard(light_attrib_t *attrib)
{
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b084      	sub	sp, #16
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	/* channel1 390nm ~ 440nm. center wavelenth:415nm */
	/* divide to 11 parts */
	for(uint8_t i = 0; i < 11; i++)//channel1 start from 390nm
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e034      	b.n	8001202 <Make_Spectral_Standard+0x7a>
	{
		attrib->spectral_sta[i+2] += divide_2_11[i] * attrib->spectral[0];
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	3302      	adds	r3, #2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	330a      	adds	r3, #10
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9a2 	bl	80004f0 <__aeabi_f2d>
 80011ac:	4680      	mov	r8, r0
 80011ae:	4689      	mov	r9, r1
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	4aac      	ldr	r2, [pc, #688]	; (8001464 <Make_Spectral_Standard+0x2dc>)
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4413      	add	r3, r2
 80011b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f995 	bl	80004f0 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f9e7 	bl	80005a0 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7ff f82b 	bl	8000234 <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	1c9c      	adds	r4, r3, #2
 80011ea:	f7ff fc89 	bl	8000b00 <__aeabi_d2f>
 80011ee:	4601      	mov	r1, r0
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	f104 030a 	add.w	r3, r4, #10
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	6059      	str	r1, [r3, #4]
	for(uint8_t i = 0; i < 11; i++)//channel1 start from 390nm
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	3301      	adds	r3, #1
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b0a      	cmp	r3, #10
 8001206:	d9c7      	bls.n	8001198 <Make_Spectral_Standard+0x10>
	}

	/* channel2 415nm ~ 475nm. center wavelenth:445nm */
	/* divide to 13 parts */
	for(uint8_t i = 0; i < 13; i++)
 8001208:	2300      	movs	r3, #0
 800120a:	73bb      	strb	r3, [r7, #14]
 800120c:	e034      	b.n	8001278 <Make_Spectral_Standard+0xf0>
	{
		attrib->spectral_sta[i+7] += divide_2_13[i] * attrib->spectral[1];
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	3307      	adds	r3, #7
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	330a      	adds	r3, #10
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f967 	bl	80004f0 <__aeabi_f2d>
 8001222:	4680      	mov	r8, r0
 8001224:	4689      	mov	r9, r1
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	4a8f      	ldr	r2, [pc, #572]	; (8001468 <Make_Spectral_Standard+0x2e0>)
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f95a 	bl	80004f0 <__aeabi_f2d>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f9ac 	bl	80005a0 <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4640      	mov	r0, r8
 800124e:	4649      	mov	r1, r9
 8001250:	f7fe fff0 	bl	8000234 <__adddf3>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	1ddc      	adds	r4, r3, #7
 8001260:	f7ff fc4e 	bl	8000b00 <__aeabi_d2f>
 8001264:	4601      	mov	r1, r0
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	f104 030a 	add.w	r3, r4, #10
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	6059      	str	r1, [r3, #4]
	for(uint8_t i = 0; i < 13; i++)
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	3301      	adds	r3, #1
 8001276:	73bb      	strb	r3, [r7, #14]
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	2b0c      	cmp	r3, #12
 800127c:	d9c7      	bls.n	800120e <Make_Spectral_Standard+0x86>
	}

	/* channel3 445nm ~ 515nm. center wavelenth:480nm */
	/* divide to 15 parts */
	for(uint8_t i = 0; i < 15; i++)
 800127e:	2300      	movs	r3, #0
 8001280:	737b      	strb	r3, [r7, #13]
 8001282:	e035      	b.n	80012f0 <Make_Spectral_Standard+0x168>
	{
		attrib->spectral_sta[i+13] += divide_2_15[i] * attrib->spectral[2];
 8001284:	7b7b      	ldrb	r3, [r7, #13]
 8001286:	330d      	adds	r3, #13
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	330a      	adds	r3, #10
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f92c 	bl	80004f0 <__aeabi_f2d>
 8001298:	4680      	mov	r8, r0
 800129a:	4689      	mov	r9, r1
 800129c:	7b7b      	ldrb	r3, [r7, #13]
 800129e:	4a73      	ldr	r2, [pc, #460]	; (800146c <Make_Spectral_Standard+0x2e4>)
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	4413      	add	r3, r2
 80012a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f91f 	bl	80004f0 <__aeabi_f2d>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4620      	mov	r0, r4
 80012b8:	4629      	mov	r1, r5
 80012ba:	f7ff f971 	bl	80005a0 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4640      	mov	r0, r8
 80012c4:	4649      	mov	r1, r9
 80012c6:	f7fe ffb5 	bl	8000234 <__adddf3>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	7b7b      	ldrb	r3, [r7, #13]
 80012d4:	f103 040d 	add.w	r4, r3, #13
 80012d8:	f7ff fc12 	bl	8000b00 <__aeabi_d2f>
 80012dc:	4601      	mov	r1, r0
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	f104 030a 	add.w	r3, r4, #10
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	6059      	str	r1, [r3, #4]
	for(uint8_t i = 0; i < 15; i++)
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	3301      	adds	r3, #1
 80012ee:	737b      	strb	r3, [r7, #13]
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
 80012f2:	2b0e      	cmp	r3, #14
 80012f4:	d9c6      	bls.n	8001284 <Make_Spectral_Standard+0xfc>
	}

	/* channel4 475nm ~ 555nm. center wavelenth:520nm */
	/* divide to 17 parts */
	for(uint8_t i = 0; i < 17; i++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	733b      	strb	r3, [r7, #12]
 80012fa:	e035      	b.n	8001368 <Make_Spectral_Standard+0x1e0>
	{
		attrib->spectral_sta[i+19] += divide_2_17[i] * attrib->spectral[3];
 80012fc:	7b3b      	ldrb	r3, [r7, #12]
 80012fe:	3313      	adds	r3, #19
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	330a      	adds	r3, #10
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f8f0 	bl	80004f0 <__aeabi_f2d>
 8001310:	4680      	mov	r8, r0
 8001312:	4689      	mov	r9, r1
 8001314:	7b3b      	ldrb	r3, [r7, #12]
 8001316:	4a56      	ldr	r2, [pc, #344]	; (8001470 <Make_Spectral_Standard+0x2e8>)
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4413      	add	r3, r2
 800131c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8e3 	bl	80004f0 <__aeabi_f2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff f935 	bl	80005a0 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4640      	mov	r0, r8
 800133c:	4649      	mov	r1, r9
 800133e:	f7fe ff79 	bl	8000234 <__adddf3>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	7b3b      	ldrb	r3, [r7, #12]
 800134c:	f103 0413 	add.w	r4, r3, #19
 8001350:	f7ff fbd6 	bl	8000b00 <__aeabi_d2f>
 8001354:	4601      	mov	r1, r0
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	f104 030a 	add.w	r3, r4, #10
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	6059      	str	r1, [r3, #4]
	for(uint8_t i = 0; i < 17; i++)
 8001362:	7b3b      	ldrb	r3, [r7, #12]
 8001364:	3301      	adds	r3, #1
 8001366:	733b      	strb	r3, [r7, #12]
 8001368:	7b3b      	ldrb	r3, [r7, #12]
 800136a:	2b10      	cmp	r3, #16
 800136c:	d9c6      	bls.n	80012fc <Make_Spectral_Standard+0x174>
	}

	/* channel5 515nm ~ 595nm. center wavelenth:555nm */
	/* divide to 17 parts */
	for(uint8_t i = 0; i < 17; i++)
 800136e:	2300      	movs	r3, #0
 8001370:	72fb      	strb	r3, [r7, #11]
 8001372:	e035      	b.n	80013e0 <Make_Spectral_Standard+0x258>
	{
		attrib->spectral_sta[i+27] += divide_2_17[i] * attrib->spectral[4];
 8001374:	7afb      	ldrb	r3, [r7, #11]
 8001376:	331b      	adds	r3, #27
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	330a      	adds	r3, #10
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8b4 	bl	80004f0 <__aeabi_f2d>
 8001388:	4680      	mov	r8, r0
 800138a:	4689      	mov	r9, r1
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	4a38      	ldr	r2, [pc, #224]	; (8001470 <Make_Spectral_Standard+0x2e8>)
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4413      	add	r3, r2
 8001394:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8a7 	bl	80004f0 <__aeabi_f2d>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4620      	mov	r0, r4
 80013a8:	4629      	mov	r1, r5
 80013aa:	f7ff f8f9 	bl	80005a0 <__aeabi_dmul>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4640      	mov	r0, r8
 80013b4:	4649      	mov	r1, r9
 80013b6:	f7fe ff3d 	bl	8000234 <__adddf3>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4610      	mov	r0, r2
 80013c0:	4619      	mov	r1, r3
 80013c2:	7afb      	ldrb	r3, [r7, #11]
 80013c4:	f103 041b 	add.w	r4, r3, #27
 80013c8:	f7ff fb9a 	bl	8000b00 <__aeabi_d2f>
 80013cc:	4601      	mov	r1, r0
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f104 030a 	add.w	r3, r4, #10
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	6059      	str	r1, [r3, #4]
	for(uint8_t i = 0; i < 17; i++)
 80013da:	7afb      	ldrb	r3, [r7, #11]
 80013dc:	3301      	adds	r3, #1
 80013de:	72fb      	strb	r3, [r7, #11]
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d9c6      	bls.n	8001374 <Make_Spectral_Standard+0x1ec>
	}


	/* channel6 550nm ~ 630nm. center wavelenth:590nm */
	/* divide to 17 parts */
	for(uint8_t i = 0; i < 17; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	72bb      	strb	r3, [r7, #10]
 80013ea:	e035      	b.n	8001458 <Make_Spectral_Standard+0x2d0>
	{
		attrib->spectral_sta[i+34] += divide_2_17[i] * attrib->spectral[5];
 80013ec:	7abb      	ldrb	r3, [r7, #10]
 80013ee:	3322      	adds	r3, #34	; 0x22
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	330a      	adds	r3, #10
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f878 	bl	80004f0 <__aeabi_f2d>
 8001400:	4680      	mov	r8, r0
 8001402:	4689      	mov	r9, r1
 8001404:	7abb      	ldrb	r3, [r7, #10]
 8001406:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <Make_Spectral_Standard+0x2e8>)
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f86b 	bl	80004f0 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4620      	mov	r0, r4
 8001420:	4629      	mov	r1, r5
 8001422:	f7ff f8bd 	bl	80005a0 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4640      	mov	r0, r8
 800142c:	4649      	mov	r1, r9
 800142e:	f7fe ff01 	bl	8000234 <__adddf3>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	7abb      	ldrb	r3, [r7, #10]
 800143c:	f103 0422 	add.w	r4, r3, #34	; 0x22
 8001440:	f7ff fb5e 	bl	8000b00 <__aeabi_d2f>
 8001444:	4601      	mov	r1, r0
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	f104 030a 	add.w	r3, r4, #10
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	6059      	str	r1, [r3, #4]
	for(uint8_t i = 0; i < 17; i++)
 8001452:	7abb      	ldrb	r3, [r7, #10]
 8001454:	3301      	adds	r3, #1
 8001456:	72bb      	strb	r3, [r7, #10]
 8001458:	7abb      	ldrb	r3, [r7, #10]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d9c6      	bls.n	80013ec <Make_Spectral_Standard+0x264>
	}


	/* channel7 580nm ~ 680nm. center wavelenth:630nm */
	/* divide to 21 parts */
	for(uint8_t i = 0; i < 21; i++)
 800145e:	2300      	movs	r3, #0
 8001460:	727b      	strb	r3, [r7, #9]
 8001462:	e03d      	b.n	80014e0 <Make_Spectral_Standard+0x358>
 8001464:	08009e80 	.word	0x08009e80
 8001468:	08009ed8 	.word	0x08009ed8
 800146c:	08009f40 	.word	0x08009f40
 8001470:	08009fb8 	.word	0x08009fb8
	{
		attrib->spectral_sta[i+40] += divide_2_21[i] * attrib->spectral[6];
 8001474:	7a7b      	ldrb	r3, [r7, #9]
 8001476:	3328      	adds	r3, #40	; 0x28
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	330a      	adds	r3, #10
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f834 	bl	80004f0 <__aeabi_f2d>
 8001488:	4680      	mov	r8, r0
 800148a:	4689      	mov	r9, r1
 800148c:	7a7b      	ldrb	r3, [r7, #9]
 800148e:	4a37      	ldr	r2, [pc, #220]	; (800156c <Make_Spectral_Standard+0x3e4>)
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4413      	add	r3, r2
 8001494:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f827 	bl	80004f0 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7ff f879 	bl	80005a0 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4640      	mov	r0, r8
 80014b4:	4649      	mov	r1, r9
 80014b6:	f7fe febd 	bl	8000234 <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	7a7b      	ldrb	r3, [r7, #9]
 80014c4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80014c8:	f7ff fb1a 	bl	8000b00 <__aeabi_d2f>
 80014cc:	4601      	mov	r1, r0
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	f104 030a 	add.w	r3, r4, #10
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	6059      	str	r1, [r3, #4]
	for(uint8_t i = 0; i < 21; i++)
 80014da:	7a7b      	ldrb	r3, [r7, #9]
 80014dc:	3301      	adds	r3, #1
 80014de:	727b      	strb	r3, [r7, #9]
 80014e0:	7a7b      	ldrb	r3, [r7, #9]
 80014e2:	2b14      	cmp	r3, #20
 80014e4:	d9c6      	bls.n	8001474 <Make_Spectral_Standard+0x2ec>
	}


	/* channel8 630nm ~ 730nm. center wavelenth:680nm */
	/* divide to 21 parts */
	for(uint8_t i = 0; i < 21; i++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	723b      	strb	r3, [r7, #8]
 80014ea:	e035      	b.n	8001558 <Make_Spectral_Standard+0x3d0>
	{
		attrib->spectral_sta[i+50] += divide_2_21[i] * attrib->spectral[7];
 80014ec:	7a3b      	ldrb	r3, [r7, #8]
 80014ee:	3332      	adds	r3, #50	; 0x32
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	330a      	adds	r3, #10
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fff8 	bl	80004f0 <__aeabi_f2d>
 8001500:	4680      	mov	r8, r0
 8001502:	4689      	mov	r9, r1
 8001504:	7a3b      	ldrb	r3, [r7, #8]
 8001506:	4a19      	ldr	r2, [pc, #100]	; (800156c <Make_Spectral_Standard+0x3e4>)
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ffeb 	bl	80004f0 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7ff f83d 	bl	80005a0 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4640      	mov	r0, r8
 800152c:	4649      	mov	r1, r9
 800152e:	f7fe fe81 	bl	8000234 <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	7a3b      	ldrb	r3, [r7, #8]
 800153c:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001540:	f7ff fade 	bl	8000b00 <__aeabi_d2f>
 8001544:	4601      	mov	r1, r0
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	f104 030a 	add.w	r3, r4, #10
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	6059      	str	r1, [r3, #4]
	for(uint8_t i = 0; i < 21; i++)
 8001552:	7a3b      	ldrb	r3, [r7, #8]
 8001554:	3301      	adds	r3, #1
 8001556:	723b      	strb	r3, [r7, #8]
 8001558:	7a3b      	ldrb	r3, [r7, #8]
 800155a:	2b14      	cmp	r3, #20
 800155c:	d9c6      	bls.n	80014ec <Make_Spectral_Standard+0x364>
	}



}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800156a:	bf00      	nop
 800156c:	0800a040 	.word	0x0800a040

08001570 <Calcute_Ra>:

int Calcute_Ra(light_t *handle)
{
 8001570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001574:	f5ad 5dd6 	sub.w	sp, sp, #6848	; 0x1ac0
 8001578:	af00      	add	r7, sp, #0
 800157a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800157e:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001582:	6018      	str	r0, [r3, #0]
    light_attrib_t ref_light = {0}, sam_r[8] = {0}, sam_k[8] = {0};
 8001584:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001588:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800158c:	4618      	mov	r0, r3
 800158e:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8001592:	461a      	mov	r2, r3
 8001594:	2100      	movs	r1, #0
 8001596:	f006 fbc5 	bl	8007d24 <memset>
 800159a:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800159e:	f6a3 6334 	subw	r3, r3, #3636	; 0xe34
 80015a2:	4618      	mov	r0, r3
 80015a4:	f44f 6346 	mov.w	r3, #3168	; 0xc60
 80015a8:	461a      	mov	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	f006 fbba 	bl	8007d24 <memset>
 80015b0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80015b4:	f6a3 2394 	subw	r3, r3, #2708	; 0xa94
 80015b8:	4618      	mov	r0, r3
 80015ba:	f44f 6346 	mov.w	r3, #3168	; 0xc60
 80015be:	461a      	mov	r2, r3
 80015c0:	2100      	movs	r1, #0
 80015c2:	f006 fbaf 	bl	8007d24 <memset>
    double sum_Ri = 0;
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 80015d2:	f101 0118 	add.w	r1, r1, #24
 80015d6:	e9c1 2300 	strd	r2, r3, [r1]
    float delta_E[8] = {0}, delta_c = 0;
 80015da:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80015de:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 80015e2:	4618      	mov	r0, r3
 80015e4:	2320      	movs	r3, #32
 80015e6:	461a      	mov	r2, r3
 80015e8:	2100      	movs	r1, #0
 80015ea:	f006 fb9b 	bl	8007d24 <memset>
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80015f6:	6013      	str	r3, [r2, #0]

    memset(WUV_r, 0, sizeof(WUV_r));
 80015f8:	2260      	movs	r2, #96	; 0x60
 80015fa:	2100      	movs	r1, #0
 80015fc:	48ca      	ldr	r0, [pc, #808]	; (8001928 <Calcute_Ra+0x3b8>)
 80015fe:	f006 fb91 	bl	8007d24 <memset>
    memset(WUV_k, 0, sizeof(WUV_k));
 8001602:	2260      	movs	r2, #96	; 0x60
 8001604:	2100      	movs	r1, #0
 8001606:	48c9      	ldr	r0, [pc, #804]	; (800192c <Calcute_Ra+0x3bc>)
 8001608:	f006 fb8c 	bl	8007d24 <memset>
    /*first, select reference light with color temperature*/
    if(ATTRS.cdc <= 5000)
 800160c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001610:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	891b      	ldrh	r3, [r3, #8]
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	f200 80b6 	bhi.w	800178e <Calcute_Ra+0x21e>
    {
        /*spectral of reference light should be Sp*/
        /*calculate reference light source power distribution function*/
        double tmp;
        for(uint8_t i = 0; i < 81; i++)
 8001622:	2300      	movs	r3, #0
 8001624:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001628:	f102 0217 	add.w	r2, r2, #23
 800162c:	7013      	strb	r3, [r2, #0]
 800162e:	e0a5      	b.n	800177c <Calcute_Ra+0x20c>
        {
            tmp = c_2 / (((380 + 5 * i) * (1e-9)) * (double)(ATTRS.cdc));
 8001630:	4bbf      	ldr	r3, [pc, #764]	; (8001930 <Calcute_Ra+0x3c0>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff5c 	bl	80004f0 <__aeabi_f2d>
 8001638:	4604      	mov	r4, r0
 800163a:	460d      	mov	r5, r1
 800163c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001640:	f103 0317 	add.w	r3, r3, #23
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff3b 	bl	80004cc <__aeabi_i2d>
 8001656:	a3a6      	add	r3, pc, #664	; (adr r3, 80018f0 <Calcute_Ra+0x380>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe ffa0 	bl	80005a0 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4690      	mov	r8, r2
 8001666:	4699      	mov	r9, r3
 8001668:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800166c:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	891b      	ldrh	r3, [r3, #8]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff19 	bl	80004ac <__aeabi_ui2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4640      	mov	r0, r8
 8001680:	4649      	mov	r1, r9
 8001682:	f7fe ff8d 	bl	80005a0 <__aeabi_dmul>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7ff f8b1 	bl	80007f4 <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	f507 51d4 	add.w	r1, r7, #6784	; 0x1a80
 800169a:	f101 0108 	add.w	r1, r1, #8
 800169e:	e9c1 2300 	strd	r2, r3, [r1]
            tmp = pow(value_e, tmp);
 80016a2:	a195      	add	r1, pc, #596	; (adr r1, 80018f8 <Calcute_Ra+0x388>)
 80016a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016a8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80016ac:	f103 0308 	add.w	r3, r3, #8
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f007 fc16 	bl	8008ee4 <pow>
 80016b8:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80016bc:	f103 0308 	add.w	r3, r3, #8
 80016c0:	e9c3 0100 	strd	r0, r1, [r3]
            ref_light.spectral_sta[i] = c_1 * pow((380 + 5 * i) * (1e-9), -5.0F) * pow(tmp - 1, -1.0F);
 80016c4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80016c8:	f103 0317 	add.w	r3, r3, #23
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fef7 	bl	80004cc <__aeabi_i2d>
 80016de:	a384      	add	r3, pc, #528	; (adr r3, 80018f0 <Calcute_Ra+0x380>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff5c 	bl	80005a0 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4b8f      	ldr	r3, [pc, #572]	; (8001934 <Calcute_Ra+0x3c4>)
 80016f6:	f007 fbf5 	bl	8008ee4 <pow>
 80016fa:	a381      	add	r3, pc, #516	; (adr r3, 8001900 <Calcute_Ra+0x390>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff4e 	bl	80005a0 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b89      	ldr	r3, [pc, #548]	; (8001938 <Calcute_Ra+0x3c8>)
 8001712:	f507 51d4 	add.w	r1, r7, #6784	; 0x1a80
 8001716:	f101 0108 	add.w	r1, r1, #8
 800171a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800171e:	f7fe fd87 	bl	8000230 <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	f04f 0000 	mov.w	r0, #0
 800172a:	4983      	ldr	r1, [pc, #524]	; (8001938 <Calcute_Ra+0x3c8>)
 800172c:	f7ff f862 	bl	80007f4 <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff32 	bl	80005a0 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8001744:	f101 0117 	add.w	r1, r1, #23
 8001748:	780c      	ldrb	r4, [r1, #0]
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff f9d7 	bl	8000b00 <__aeabi_d2f>
 8001752:	4601      	mov	r1, r0
 8001754:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001758:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 800175c:	f104 030a 	add.w	r3, r4, #10
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	6059      	str	r1, [r3, #4]
        for(uint8_t i = 0; i < 81; i++)
 8001766:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800176a:	f103 0317 	add.w	r3, r3, #23
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001776:	f102 0217 	add.w	r2, r2, #23
 800177a:	7013      	strb	r3, [r2, #0]
 800177c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001780:	f103 0317 	add.w	r3, r3, #23
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b50      	cmp	r3, #80	; 0x50
 8001788:	f67f af52 	bls.w	8001630 <Calcute_Ra+0xc0>
 800178c:	e31e      	b.n	8001dcc <Calcute_Ra+0x85c>
        }
    }
    else
    {
        /*spectral of reference light should be Sd*/
        float M_1 = 0, M_2 = 0;
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001796:	f102 021c 	add.w	r2, r2, #28
 800179a:	6013      	str	r3, [r2, #0]
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 80017a4:	f102 0218 	add.w	r2, r2, #24
 80017a8:	6013      	str	r3, [r2, #0]
        float tmp = 1000.0 / (float)(ATTRS.cdc);
 80017aa:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80017ae:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	891b      	ldrh	r3, [r3, #8]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff faa8 	bl	8000d0c <__aeabi_ui2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	4619      	mov	r1, r3
 80017c0:	485e      	ldr	r0, [pc, #376]	; (800193c <Calcute_Ra+0x3cc>)
 80017c2:	f7ff fbaf 	bl	8000f24 <__aeabi_fdiv>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 80017cc:	f102 0214 	add.w	r2, r2, #20
 80017d0:	6013      	str	r3, [r2, #0]
        float x_d = 0, y_d = 0;
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80017da:	f102 0210 	add.w	r2, r2, #16
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 80017e8:	f102 0210 	add.w	r2, r2, #16
 80017ec:	6013      	str	r3, [r2, #0]
        if((ATTRS.cdc >= 5000) && (ATTRS.cdc <= 7000))
 80017ee:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80017f2:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	891b      	ldrh	r3, [r3, #8]
 80017fa:	f241 3287 	movw	r2, #4999	; 0x1387
 80017fe:	4293      	cmp	r3, r2
 8001800:	f240 809e 	bls.w	8001940 <Calcute_Ra+0x3d0>
 8001804:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001808:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	891b      	ldrh	r3, [r3, #8]
 8001810:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001814:	4293      	cmp	r3, r2
 8001816:	f200 8093 	bhi.w	8001940 <Calcute_Ra+0x3d0>
            x_d = (-4.6070) * (tmp*tmp*tmp) + 2.9678 * (tmp*tmp) + 0.09911 * tmp + 0.244063;
 800181a:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800181e:	f103 0314 	add.w	r3, r3, #20
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001828:	f103 0314 	add.w	r3, r3, #20
 800182c:	6818      	ldr	r0, [r3, #0]
 800182e:	f7ff fac5 	bl	8000dbc <__aeabi_fmul>
 8001832:	4603      	mov	r3, r0
 8001834:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001838:	f102 0214 	add.w	r2, r2, #20
 800183c:	6811      	ldr	r1, [r2, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fabc 	bl	8000dbc <__aeabi_fmul>
 8001844:	4603      	mov	r3, r0
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fe52 	bl	80004f0 <__aeabi_f2d>
 800184c:	a32e      	add	r3, pc, #184	; (adr r3, 8001908 <Calcute_Ra+0x398>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fea5 	bl	80005a0 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4614      	mov	r4, r2
 800185c:	461d      	mov	r5, r3
 800185e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001862:	f103 0314 	add.w	r3, r3, #20
 8001866:	6819      	ldr	r1, [r3, #0]
 8001868:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800186c:	f103 0314 	add.w	r3, r3, #20
 8001870:	6818      	ldr	r0, [r3, #0]
 8001872:	f7ff faa3 	bl	8000dbc <__aeabi_fmul>
 8001876:	4603      	mov	r3, r0
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe39 	bl	80004f0 <__aeabi_f2d>
 800187e:	a324      	add	r3, pc, #144	; (adr r3, 8001910 <Calcute_Ra+0x3a0>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fe8c 	bl	80005a0 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fcd0 	bl	8000234 <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80018a0:	f103 0314 	add.w	r3, r3, #20
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	f7fe fe23 	bl	80004f0 <__aeabi_f2d>
 80018aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001918 <Calcute_Ra+0x3a8>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fe76 	bl	80005a0 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fcba 	bl	8000234 <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	a315      	add	r3, pc, #84	; (adr r3, 8001920 <Calcute_Ra+0x3b0>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fcb1 	bl	8000234 <__adddf3>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f911 	bl	8000b00 <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80018e4:	f102 0210 	add.w	r2, r2, #16
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e0aa      	b.n	8001a42 <Calcute_Ra+0x4d2>
 80018ec:	f3af 8000 	nop.w
 80018f0:	e826d695 	.word	0xe826d695
 80018f4:	3e112e0b 	.word	0x3e112e0b
 80018f8:	8b04919b 	.word	0x8b04919b
 80018fc:	4005bf0a 	.word	0x4005bf0a
 8001900:	41f5faf9 	.word	0x41f5faf9
 8001904:	3cbaf675 	.word	0x3cbaf675
 8001908:	6872b021 	.word	0x6872b021
 800190c:	c0126d91 	.word	0xc0126d91
 8001910:	ed288ce7 	.word	0xed288ce7
 8001914:	4007be0d 	.word	0x4007be0d
 8001918:	e0b4e11e 	.word	0xe0b4e11e
 800191c:	3fb95f45 	.word	0x3fb95f45
 8001920:	d594f26b 	.word	0xd594f26b
 8001924:	3fcf3d74 	.word	0x3fcf3d74
 8001928:	20000104 	.word	0x20000104
 800192c:	200000a4 	.word	0x200000a4
 8001930:	3c6bbba5 	.word	0x3c6bbba5
 8001934:	c0140000 	.word	0xc0140000
 8001938:	3ff00000 	.word	0x3ff00000
 800193c:	447a0000 	.word	0x447a0000
        else if((ATTRS.cdc > 7000) && (ATTRS.cdc <= 25000))
 8001940:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001944:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	891b      	ldrh	r3, [r3, #8]
 800194c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001950:	4293      	cmp	r3, r2
 8001952:	d972      	bls.n	8001a3a <Calcute_Ra+0x4ca>
 8001954:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001958:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	891b      	ldrh	r3, [r3, #8]
 8001960:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001964:	4293      	cmp	r3, r2
 8001966:	d868      	bhi.n	8001a3a <Calcute_Ra+0x4ca>
            x_d = (-2.0064) * (tmp*tmp*tmp) + 1.9018 * (tmp*tmp) + 0.24748 * tmp + 0.237040;
 8001968:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 800196c:	f103 0314 	add.w	r3, r3, #20
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001976:	f103 0314 	add.w	r3, r3, #20
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f7ff fa1e 	bl	8000dbc <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001986:	f102 0214 	add.w	r2, r2, #20
 800198a:	6811      	ldr	r1, [r2, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fa15 	bl	8000dbc <__aeabi_fmul>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fdab 	bl	80004f0 <__aeabi_f2d>
 800199a:	a3bb      	add	r3, pc, #748	; (adr r3, 8001c88 <Calcute_Ra+0x718>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fdfe 	bl	80005a0 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	461d      	mov	r5, r3
 80019ac:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019b0:	f103 0314 	add.w	r3, r3, #20
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019ba:	f103 0314 	add.w	r3, r3, #20
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	f7ff f9fc 	bl	8000dbc <__aeabi_fmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd92 	bl	80004f0 <__aeabi_f2d>
 80019cc:	a3b0      	add	r3, pc, #704	; (adr r3, 8001c90 <Calcute_Ra+0x720>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fde5 	bl	80005a0 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fc29 	bl	8000234 <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4614      	mov	r4, r2
 80019e8:	461d      	mov	r5, r3
 80019ea:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 80019ee:	f103 0314 	add.w	r3, r3, #20
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	f7fe fd7c 	bl	80004f0 <__aeabi_f2d>
 80019f8:	a3a7      	add	r3, pc, #668	; (adr r3, 8001c98 <Calcute_Ra+0x728>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fdcf 	bl	80005a0 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fc13 	bl	8000234 <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	a3a2      	add	r3, pc, #648	; (adr r3, 8001ca0 <Calcute_Ra+0x730>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fc0a 	bl	8000234 <__adddf3>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f86a 	bl	8000b00 <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001a32:	f102 0210 	add.w	r2, r2, #16
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e003      	b.n	8001a42 <Calcute_Ra+0x4d2>
        else
            return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3e:	f002 bb1a 	b.w	8004076 <Calcute_Ra+0x2b06>
        y_d = -3.0000 * x_d * x_d + 2.870 * x_d - 0.2750;
 8001a42:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001a46:	f103 0310 	add.w	r3, r3, #16
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	f7fe fd50 	bl	80004f0 <__aeabi_f2d>
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4baa      	ldr	r3, [pc, #680]	; (8001d00 <Calcute_Ra+0x790>)
 8001a56:	f7fe fda3 	bl	80005a0 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4614      	mov	r4, r2
 8001a60:	461d      	mov	r5, r3
 8001a62:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001a66:	f103 0310 	add.w	r3, r3, #16
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f7fe fd40 	bl	80004f0 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fd92 	bl	80005a0 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001a88:	f103 0310 	add.w	r3, r3, #16
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	f7fe fd2f 	bl	80004f0 <__aeabi_f2d>
 8001a92:	a385      	add	r3, pc, #532	; (adr r3, 8001ca8 <Calcute_Ra+0x738>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe fd82 	bl	80005a0 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f7fe fbc6 	bl	8000234 <__adddf3>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	a37f      	add	r3, pc, #508	; (adr r3, 8001cb0 <Calcute_Ra+0x740>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fbbb 	bl	8000230 <__aeabi_dsub>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f81d 	bl	8000b00 <__aeabi_d2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001acc:	f102 0210 	add.w	r2, r2, #16
 8001ad0:	6013      	str	r3, [r2, #0]
        M_1 = (-1.3515 - 1.7703 * x_d + 5.9114 * y_d) / (0.0241 + 0.2562 * x_d - 0.7341 * y_d);
 8001ad2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001ad6:	f103 0310 	add.w	r3, r3, #16
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	f7fe fd08 	bl	80004f0 <__aeabi_f2d>
 8001ae0:	a375      	add	r3, pc, #468	; (adr r3, 8001cb8 <Calcute_Ra+0x748>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	f7fe fd5b 	bl	80005a0 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	a174      	add	r1, pc, #464	; (adr r1, 8001cc0 <Calcute_Ra+0x750>)
 8001af0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001af4:	f7fe fb9c 	bl	8000230 <__aeabi_dsub>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4614      	mov	r4, r2
 8001afe:	461d      	mov	r5, r3
 8001b00:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b04:	f103 0310 	add.w	r3, r3, #16
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f7fe fcf1 	bl	80004f0 <__aeabi_f2d>
 8001b0e:	a36e      	add	r3, pc, #440	; (adr r3, 8001cc8 <Calcute_Ra+0x758>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd44 	bl	80005a0 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fb88 	bl	8000234 <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4614      	mov	r4, r2
 8001b2a:	461d      	mov	r5, r3
 8001b2c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001b30:	f103 0310 	add.w	r3, r3, #16
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f7fe fcdb 	bl	80004f0 <__aeabi_f2d>
 8001b3a:	a365      	add	r3, pc, #404	; (adr r3, 8001cd0 <Calcute_Ra+0x760>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fd2e 	bl	80005a0 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	a362      	add	r3, pc, #392	; (adr r3, 8001cd8 <Calcute_Ra+0x768>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fb6f 	bl	8000234 <__adddf3>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4690      	mov	r8, r2
 8001b5c:	4699      	mov	r9, r3
 8001b5e:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001b62:	f103 0310 	add.w	r3, r3, #16
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	f7fe fcc2 	bl	80004f0 <__aeabi_f2d>
 8001b6c:	a35c      	add	r3, pc, #368	; (adr r3, 8001ce0 <Calcute_Ra+0x770>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe fd15 	bl	80005a0 <__aeabi_dmul>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	f7fe fb57 	bl	8000230 <__aeabi_dsub>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fe33 	bl	80007f4 <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7fe ffb3 	bl	8000b00 <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001ba0:	f102 021c 	add.w	r2, r2, #28
 8001ba4:	6013      	str	r3, [r2, #0]
        M_2 = (0.0300 - 31.4424 * x_d + 30.0171 * y_d) / (0.0241 + 0.2562 * x_d - 0.7341 * y_d);
 8001ba6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001baa:	f103 0310 	add.w	r3, r3, #16
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	f7fe fc9e 	bl	80004f0 <__aeabi_f2d>
 8001bb4:	a34c      	add	r3, pc, #304	; (adr r3, 8001ce8 <Calcute_Ra+0x778>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	f7fe fcf1 	bl	80005a0 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	a14b      	add	r1, pc, #300	; (adr r1, 8001cf0 <Calcute_Ra+0x780>)
 8001bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bc8:	f7fe fb32 	bl	8000230 <__aeabi_dsub>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4614      	mov	r4, r2
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001bd8:	f103 0310 	add.w	r3, r3, #16
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	f7fe fc87 	bl	80004f0 <__aeabi_f2d>
 8001be2:	a345      	add	r3, pc, #276	; (adr r3, 8001cf8 <Calcute_Ra+0x788>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fcda 	bl	80005a0 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fb1e 	bl	8000234 <__adddf3>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001c04:	f103 0310 	add.w	r3, r3, #16
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f7fe fc71 	bl	80004f0 <__aeabi_f2d>
 8001c0e:	a330      	add	r3, pc, #192	; (adr r3, 8001cd0 <Calcute_Ra+0x760>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fcc4 	bl	80005a0 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	a32d      	add	r3, pc, #180	; (adr r3, 8001cd8 <Calcute_Ra+0x768>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fb05 	bl	8000234 <__adddf3>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
 8001c32:	f507 53d4 	add.w	r3, r7, #6784	; 0x1a80
 8001c36:	f103 0310 	add.w	r3, r3, #16
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	f7fe fc58 	bl	80004f0 <__aeabi_f2d>
 8001c40:	a327      	add	r3, pc, #156	; (adr r3, 8001ce0 <Calcute_Ra+0x770>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fcab 	bl	80005a0 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4640      	mov	r0, r8
 8001c50:	4649      	mov	r1, r9
 8001c52:	f7fe faed 	bl	8000230 <__aeabi_dsub>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fdc9 	bl	80007f4 <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe ff49 	bl	8000b00 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001c74:	f102 0218 	add.w	r2, r2, #24
 8001c78:	6013      	str	r3, [r2, #0]
        /*calculate reference light source power distribution function*/
        for(uint8_t i = 0; i < 81; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001c80:	f102 020f 	add.w	r2, r2, #15
 8001c84:	7013      	strb	r3, [r2, #0]
 8001c86:	e09a      	b.n	8001dbe <Calcute_Ra+0x84e>
 8001c88:	71758e22 	.word	0x71758e22
 8001c8c:	c0000d1b 	.word	0xc0000d1b
 8001c90:	d6388659 	.word	0xd6388659
 8001c94:	3ffe6dc5 	.word	0x3ffe6dc5
 8001c98:	b5350093 	.word	0xb5350093
 8001c9c:	3fcfad6c 	.word	0x3fcfad6c
 8001ca0:	a3ec02f3 	.word	0xa3ec02f3
 8001ca4:	3fce5753 	.word	0x3fce5753
 8001ca8:	8f5c28f6 	.word	0x8f5c28f6
 8001cac:	4006f5c2 	.word	0x4006f5c2
 8001cb0:	9999999a 	.word	0x9999999a
 8001cb4:	3fd19999 	.word	0x3fd19999
 8001cb8:	17c1bda5 	.word	0x17c1bda5
 8001cbc:	3ffc5326 	.word	0x3ffc5326
 8001cc0:	76c8b439 	.word	0x76c8b439
 8001cc4:	bff59fbe 	.word	0xbff59fbe
 8001cc8:	0aa64c30 	.word	0x0aa64c30
 8001ccc:	4017a546 	.word	0x4017a546
 8001cd0:	af4f0d84 	.word	0xaf4f0d84
 8001cd4:	3fd06594 	.word	0x3fd06594
 8001cd8:	9f559b3d 	.word	0x9f559b3d
 8001cdc:	3f98adab 	.word	0x3f98adab
 8001ce0:	487fcb92 	.word	0x487fcb92
 8001ce4:	3fe77dbf 	.word	0x3fe77dbf
 8001ce8:	205bc01a 	.word	0x205bc01a
 8001cec:	403f7141 	.word	0x403f7141
 8001cf0:	eb851eb8 	.word	0xeb851eb8
 8001cf4:	3f9eb851 	.word	0x3f9eb851
 8001cf8:	aa64c2f8 	.word	0xaa64c2f8
 8001cfc:	403e0460 	.word	0x403e0460
 8001d00:	c0080000 	.word	0xc0080000
            ref_light.spectral_sta[i] = std_light_D_vec_sta[i][0] + M_1 * std_light_D_vec_sta[i][1] + M_2 * std_light_D_vec_sta[i][2];
 8001d04:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001d08:	f103 030f 	add.w	r3, r3, #15
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	4940      	ldr	r1, [pc, #256]	; (8001e10 <Calcute_Ra+0x8a0>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	681c      	ldr	r4, [r3, #0]
 8001d1c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001d20:	f103 030f 	add.w	r3, r3, #15
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	493a      	ldr	r1, [pc, #232]	; (8001e10 <Calcute_Ra+0x8a0>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	3304      	adds	r3, #4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001d3a:	f102 021c 	add.w	r2, r2, #28
 8001d3e:	6811      	ldr	r1, [r2, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f83b 	bl	8000dbc <__aeabi_fmul>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7fe ff2e 	bl	8000bac <__addsf3>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461d      	mov	r5, r3
 8001d54:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001d58:	f103 030f 	add.w	r3, r3, #15
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	492c      	ldr	r1, [pc, #176]	; (8001e10 <Calcute_Ra+0x8a0>)
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3308      	adds	r3, #8
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8001d72:	f102 0218 	add.w	r2, r2, #24
 8001d76:	6811      	ldr	r1, [r2, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff f81f 	bl	8000dbc <__aeabi_fmul>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001d84:	f102 020f 	add.w	r2, r2, #15
 8001d88:	7814      	ldrb	r4, [r2, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	f7fe ff0d 	bl	8000bac <__addsf3>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8001d9a:	f5a3 72ea 	sub.w	r2, r3, #468	; 0x1d4
 8001d9e:	f104 030a 	add.w	r3, r4, #10
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	6059      	str	r1, [r3, #4]
        for(uint8_t i = 0; i < 81; i++)
 8001da8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001dac:	f103 030f 	add.w	r3, r3, #15
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	3301      	adds	r3, #1
 8001db4:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001db8:	f102 020f 	add.w	r2, r2, #15
 8001dbc:	7013      	strb	r3, [r2, #0]
 8001dbe:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001dc2:	f103 030f 	add.w	r3, r3, #15
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b50      	cmp	r3, #80	; 0x50
 8001dca:	d99b      	bls.n	8001d04 <Calcute_Ra+0x794>
    }

    /*second, calculate XYZ and compare chroma difference (delta c)*/
    /*calculate XYZ*/
    ATTRS.tri_X = 0;
 8001dcc:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001dd0:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ATTRS.tri_Y = 0;
 8001dde:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001de2:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    ATTRS.tri_Z = 0;
 8001df0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001df4:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
/* to be optimize start */
    for(uint8_t i = 0; i < 9; i++){
 8001e02:	2300      	movs	r3, #0
 8001e04:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001e08:	f102 020e 	add.w	r2, r2, #14
 8001e0c:	7013      	strb	r3, [r2, #0]
 8001e0e:	e0cf      	b.n	8001fb0 <Calcute_Ra+0xa40>
 8001e10:	0800a520 	.word	0x0800a520
        ATTRS.tri_X += ATTRS.spectral[i] * _x_lamda[i] * delta_lambda[i];
 8001e14:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001e18:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 8001e22:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001e26:	f103 030e 	add.w	r3, r3, #14
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8001e30:	f6a2 22bc 	subw	r2, r2, #2748	; 0xabc
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	3302      	adds	r3, #2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001e42:	f103 030e 	add.w	r3, r3, #14
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	499b      	ldr	r1, [pc, #620]	; (80020b8 <Calcute_Ra+0xb48>)
 8001e4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4610      	mov	r0, r2
 8001e52:	f7fe ffb3 	bl	8000dbc <__aeabi_fmul>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461d      	mov	r5, r3
 8001e5a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001e5e:	f103 030e 	add.w	r3, r3, #14
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4a95      	ldr	r2, [pc, #596]	; (80020bc <Calcute_Ra+0xb4c>)
 8001e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe ff52 	bl	8000d14 <__aeabi_i2f>
 8001e70:	4603      	mov	r3, r0
 8001e72:	4619      	mov	r1, r3
 8001e74:	4628      	mov	r0, r5
 8001e76:	f7fe ffa1 	bl	8000dbc <__aeabi_fmul>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7fe fe94 	bl	8000bac <__addsf3>
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001e8c:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        ATTRS.tri_Y += ATTRS.spectral[i] * _y_lamda[i] * delta_lambda[i];
 8001e96:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001e9a:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8d3 4184 	ldr.w	r4, [r3, #388]	; 0x184
 8001ea4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001ea8:	f103 030e 	add.w	r3, r3, #14
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8001eb2:	f6a2 22bc 	subw	r2, r2, #2748	; 0xabc
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	3302      	adds	r3, #2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001ec4:	f103 030e 	add.w	r3, r3, #14
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	497d      	ldr	r1, [pc, #500]	; (80020c0 <Calcute_Ra+0xb50>)
 8001ecc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f7fe ff72 	bl	8000dbc <__aeabi_fmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461d      	mov	r5, r3
 8001edc:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001ee0:	f103 030e 	add.w	r3, r3, #14
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <Calcute_Ra+0xb4c>)
 8001ee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe ff11 	bl	8000d14 <__aeabi_i2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	f7fe ff60 	bl	8000dbc <__aeabi_fmul>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4619      	mov	r1, r3
 8001f00:	4620      	mov	r0, r4
 8001f02:	f7fe fe53 	bl	8000bac <__addsf3>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001f0e:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ATTRS.tri_Z += ATTRS.spectral[i] * _z_lamda[i] * delta_lambda[i];
 8001f18:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001f1c:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8d3 4188 	ldr.w	r4, [r3, #392]	; 0x188
 8001f26:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001f2a:	f103 030e 	add.w	r3, r3, #14
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8001f34:	f6a2 22bc 	subw	r2, r2, #2748	; 0xabc
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001f46:	f103 030e 	add.w	r3, r3, #14
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	495d      	ldr	r1, [pc, #372]	; (80020c4 <Calcute_Ra+0xb54>)
 8001f4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f7fe ff31 	bl	8000dbc <__aeabi_fmul>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001f62:	f103 030e 	add.w	r3, r3, #14
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4a54      	ldr	r2, [pc, #336]	; (80020bc <Calcute_Ra+0xb4c>)
 8001f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fed0 	bl	8000d14 <__aeabi_i2f>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4619      	mov	r1, r3
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f7fe ff1f 	bl	8000dbc <__aeabi_fmul>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4619      	mov	r1, r3
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7fe fe12 	bl	8000bac <__addsf3>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001f90:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    for(uint8_t i = 0; i < 9; i++){
 8001f9a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001f9e:	f103 030e 	add.w	r3, r3, #14
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8001faa:	f102 020e 	add.w	r2, r2, #14
 8001fae:	7013      	strb	r3, [r2, #0]
 8001fb0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8001fb4:	f103 030e 	add.w	r3, r3, #14
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	f67f af2a 	bls.w	8001e14 <Calcute_Ra+0x8a4>
    }
/* to be optimize end */
    /*normalization*/
    {
        float tmp = ATTRS.tri_X + ATTRS.tri_Y + ATTRS.tri_Z;
 8001fc0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001fc4:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001fce:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001fd2:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f7fe fde4 	bl	8000bac <__addsf3>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001fec:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	f7fe fdd7 	bl	8000bac <__addsf3>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8002004:	f102 0204 	add.w	r2, r2, #4
 8002008:	6013      	str	r3, [r2, #0]
        //float tmp = 100 / ATTRS.tri_Y; //maybe right
        ATTRS.tri_X /= tmp;
 800200a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800200e:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002018:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 800201c:	f102 0204 	add.w	r2, r2, #4
 8002020:	6811      	ldr	r1, [r2, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe ff7e 	bl	8000f24 <__aeabi_fdiv>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002030:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        ATTRS.tri_Y /= tmp;
 800203a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800203e:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002048:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 800204c:	f102 0204 	add.w	r2, r2, #4
 8002050:	6811      	ldr	r1, [r2, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe ff66 	bl	8000f24 <__aeabi_fdiv>
 8002058:	4603      	mov	r3, r0
 800205a:	461a      	mov	r2, r3
 800205c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002060:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ATTRS.tri_Z /= tmp;
 800206a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800206e:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8002078:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 800207c:	f102 0204 	add.w	r2, r2, #4
 8002080:	6811      	ldr	r1, [r2, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe ff4e 	bl	8000f24 <__aeabi_fdiv>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002090:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    }

    /*calculate XYZ of 8 color sample under test_light and refer_light*/
    for(uint8_t i = 0; i < 8; i++)
 800209a:	2300      	movs	r3, #0
 800209c:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80020a0:	f102 020d 	add.w	r2, r2, #13
 80020a4:	7013      	strb	r3, [r2, #0]
 80020a6:	f000 bc3c 	b.w	8002922 <Calcute_Ra+0x13b2>
    {
        /*i represents amounts of color samples*/
        for(uint8_t j = 0; j < 9; j++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80020b0:	f102 020c 	add.w	r2, r2, #12
 80020b4:	7013      	strb	r3, [r2, #0]
 80020b6:	e297      	b.n	80025e8 <Calcute_Ra+0x1078>
 80020b8:	0800a0e8 	.word	0x0800a0e8
 80020bc:	0800aa0c 	.word	0x0800aa0c
 80020c0:	0800a250 	.word	0x0800a250
 80020c4:	0800a3b8 	.word	0x0800a3b8
        {
            /*j represents wavelength*/
            /*XYZ under test_light*/
/* to be optimize start */
            sam_k[i].tri_X += ATTRS.spectral[j] * _x_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 80020c8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80020cc:	f103 030d 	add.w	r3, r3, #13
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80020d6:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 80020da:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80020e8:	681d      	ldr	r5, [r3, #0]
 80020ea:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80020ee:	f103 030c 	add.w	r3, r3, #12
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80020f8:	f6a2 22bc 	subw	r2, r2, #2748	; 0xabc
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	3302      	adds	r3, #2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800210a:	f103 030c 	add.w	r3, r3, #12
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	49c6      	ldr	r1, [pc, #792]	; (800242c <Calcute_Ra+0xebc>)
 8002112:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f7fe fe4f 	bl	8000dbc <__aeabi_fmul>
 800211e:	4603      	mov	r3, r0
 8002120:	4618      	mov	r0, r3
 8002122:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002126:	f103 030c 	add.w	r3, r3, #12
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002130:	f103 030d 	add.w	r3, r3, #13
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	49be      	ldr	r1, [pc, #760]	; (8002430 <Calcute_Ra+0xec0>)
 8002138:	00d2      	lsls	r2, r2, #3
 800213a:	4413      	add	r3, r2
 800213c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fe3b 	bl	8000dbc <__aeabi_fmul>
 8002146:	4603      	mov	r3, r0
 8002148:	461c      	mov	r4, r3
 800214a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800214e:	f103 030d 	add.w	r3, r3, #13
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4ab7      	ldr	r2, [pc, #732]	; (8002434 <Calcute_Ra+0xec4>)
 8002156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fdda 	bl	8000d14 <__aeabi_i2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4619      	mov	r1, r3
 8002164:	4620      	mov	r0, r4
 8002166:	f7fe fe29 	bl	8000dbc <__aeabi_fmul>
 800216a:	4603      	mov	r3, r0
 800216c:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002170:	f102 020d 	add.w	r2, r2, #13
 8002174:	7814      	ldrb	r4, [r2, #0]
 8002176:	4619      	mov	r1, r3
 8002178:	4628      	mov	r0, r5
 800217a:	f7fe fd17 	bl	8000bac <__addsf3>
 800217e:	4603      	mov	r3, r0
 8002180:	4619      	mov	r1, r3
 8002182:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002186:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 800218a:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800218e:	fb04 f303 	mul.w	r3, r4, r3
 8002192:	4413      	add	r3, r2
 8002194:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002198:	6019      	str	r1, [r3, #0]
            sam_k[i].tri_Y += ATTRS.spectral[j] * _y_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 800219a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800219e:	f103 030d 	add.w	r3, r3, #13
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80021a8:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 80021ac:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80021ba:	681d      	ldr	r5, [r3, #0]
 80021bc:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80021c0:	f103 030c 	add.w	r3, r3, #12
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80021ca:	f6a2 22bc 	subw	r2, r2, #2748	; 0xabc
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	3302      	adds	r3, #2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80021dc:	f103 030c 	add.w	r3, r3, #12
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4995      	ldr	r1, [pc, #596]	; (8002438 <Calcute_Ra+0xec8>)
 80021e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7fe fde6 	bl	8000dbc <__aeabi_fmul>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80021f8:	f103 030c 	add.w	r3, r3, #12
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002202:	f103 030d 	add.w	r3, r3, #13
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4989      	ldr	r1, [pc, #548]	; (8002430 <Calcute_Ra+0xec0>)
 800220a:	00d2      	lsls	r2, r2, #3
 800220c:	4413      	add	r3, r2
 800220e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fdd2 	bl	8000dbc <__aeabi_fmul>
 8002218:	4603      	mov	r3, r0
 800221a:	461c      	mov	r4, r3
 800221c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002220:	f103 030d 	add.w	r3, r3, #13
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	4a83      	ldr	r2, [pc, #524]	; (8002434 <Calcute_Ra+0xec4>)
 8002228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fd71 	bl	8000d14 <__aeabi_i2f>
 8002232:	4603      	mov	r3, r0
 8002234:	4619      	mov	r1, r3
 8002236:	4620      	mov	r0, r4
 8002238:	f7fe fdc0 	bl	8000dbc <__aeabi_fmul>
 800223c:	4603      	mov	r3, r0
 800223e:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002242:	f102 020d 	add.w	r2, r2, #13
 8002246:	7814      	ldrb	r4, [r2, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	4628      	mov	r0, r5
 800224c:	f7fe fcae 	bl	8000bac <__addsf3>
 8002250:	4603      	mov	r3, r0
 8002252:	4619      	mov	r1, r3
 8002254:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002258:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 800225c:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002260:	fb04 f303 	mul.w	r3, r4, r3
 8002264:	4413      	add	r3, r2
 8002266:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800226a:	6019      	str	r1, [r3, #0]
            sam_k[i].tri_Z += ATTRS.spectral[j] * _z_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 800226c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002270:	f103 030d 	add.w	r3, r3, #13
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 800227a:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800227e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800228c:	681d      	ldr	r5, [r3, #0]
 800228e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002292:	f103 030c 	add.w	r3, r3, #12
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 800229c:	f6a2 22bc 	subw	r2, r2, #2748	; 0xabc
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	3302      	adds	r3, #2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80022ae:	f103 030c 	add.w	r3, r3, #12
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4961      	ldr	r1, [pc, #388]	; (800243c <Calcute_Ra+0xecc>)
 80022b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022ba:	4619      	mov	r1, r3
 80022bc:	4610      	mov	r0, r2
 80022be:	f7fe fd7d 	bl	8000dbc <__aeabi_fmul>
 80022c2:	4603      	mov	r3, r0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80022ca:	f103 030c 	add.w	r3, r3, #12
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80022d4:	f103 030d 	add.w	r3, r3, #13
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	4955      	ldr	r1, [pc, #340]	; (8002430 <Calcute_Ra+0xec0>)
 80022dc:	00d2      	lsls	r2, r2, #3
 80022de:	4413      	add	r3, r2
 80022e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fd69 	bl	8000dbc <__aeabi_fmul>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461c      	mov	r4, r3
 80022ee:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80022f2:	f103 030d 	add.w	r3, r3, #13
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4a4e      	ldr	r2, [pc, #312]	; (8002434 <Calcute_Ra+0xec4>)
 80022fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe fd08 	bl	8000d14 <__aeabi_i2f>
 8002304:	4603      	mov	r3, r0
 8002306:	4619      	mov	r1, r3
 8002308:	4620      	mov	r0, r4
 800230a:	f7fe fd57 	bl	8000dbc <__aeabi_fmul>
 800230e:	4603      	mov	r3, r0
 8002310:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002314:	f102 020d 	add.w	r2, r2, #13
 8002318:	7814      	ldrb	r4, [r2, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	4628      	mov	r0, r5
 800231e:	f7fe fc45 	bl	8000bac <__addsf3>
 8002322:	4603      	mov	r3, r0
 8002324:	4619      	mov	r1, r3
 8002326:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800232a:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 800232e:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002332:	fb04 f303 	mul.w	r3, r4, r3
 8002336:	4413      	add	r3, r2
 8002338:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800233c:	6019      	str	r1, [r3, #0]
            /*XYZ under refer_light*/
            sam_r[i].tri_X += ref_light.spectral[j] * _x_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 800233e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002342:	f103 030d 	add.w	r3, r3, #13
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 800234c:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8002350:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800235e:	681d      	ldr	r5, [r3, #0]
 8002360:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002364:	f103 030c 	add.w	r3, r3, #12
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 800236e:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800237c:	f103 030c 	add.w	r3, r3, #12
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	492a      	ldr	r1, [pc, #168]	; (800242c <Calcute_Ra+0xebc>)
 8002384:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002388:	4619      	mov	r1, r3
 800238a:	4610      	mov	r0, r2
 800238c:	f7fe fd16 	bl	8000dbc <__aeabi_fmul>
 8002390:	4603      	mov	r3, r0
 8002392:	4618      	mov	r0, r3
 8002394:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002398:	f103 030c 	add.w	r3, r3, #12
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80023a2:	f103 030d 	add.w	r3, r3, #13
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4921      	ldr	r1, [pc, #132]	; (8002430 <Calcute_Ra+0xec0>)
 80023aa:	00d2      	lsls	r2, r2, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fd02 	bl	8000dbc <__aeabi_fmul>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461c      	mov	r4, r3
 80023bc:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80023c0:	f103 030d 	add.w	r3, r3, #13
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <Calcute_Ra+0xec4>)
 80023c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fca1 	bl	8000d14 <__aeabi_i2f>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4619      	mov	r1, r3
 80023d6:	4620      	mov	r0, r4
 80023d8:	f7fe fcf0 	bl	8000dbc <__aeabi_fmul>
 80023dc:	4603      	mov	r3, r0
 80023de:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80023e2:	f102 020d 	add.w	r2, r2, #13
 80023e6:	7814      	ldrb	r4, [r2, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	4628      	mov	r0, r5
 80023ec:	f7fe fbde 	bl	8000bac <__addsf3>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4619      	mov	r1, r3
 80023f4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80023f8:	f6a3 6234 	subw	r2, r3, #3636	; 0xe34
 80023fc:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002400:	fb04 f303 	mul.w	r3, r4, r3
 8002404:	4413      	add	r3, r2
 8002406:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800240a:	6019      	str	r1, [r3, #0]
            sam_r[i].tri_Y += ref_light.spectral[j] * _y_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 800240c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002410:	f103 030d 	add.w	r3, r3, #13
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 800241a:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 800241e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	e00a      	b.n	8002440 <Calcute_Ra+0xed0>
 800242a:	bf00      	nop
 800242c:	0800a0e8 	.word	0x0800a0e8
 8002430:	0800a8ec 	.word	0x0800a8ec
 8002434:	0800aa0c 	.word	0x0800aa0c
 8002438:	0800a250 	.word	0x0800a250
 800243c:	0800a3b8 	.word	0x0800a3b8
 8002440:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002444:	681d      	ldr	r5, [r3, #0]
 8002446:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800244a:	f103 030c 	add.w	r3, r3, #12
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8002454:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002462:	f103 030c 	add.w	r3, r3, #12
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	495b      	ldr	r1, [pc, #364]	; (80025d8 <Calcute_Ra+0x1068>)
 800246a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f7fe fca3 	bl	8000dbc <__aeabi_fmul>
 8002476:	4603      	mov	r3, r0
 8002478:	4618      	mov	r0, r3
 800247a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800247e:	f103 030c 	add.w	r3, r3, #12
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002488:	f103 030d 	add.w	r3, r3, #13
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	4953      	ldr	r1, [pc, #332]	; (80025dc <Calcute_Ra+0x106c>)
 8002490:	00d2      	lsls	r2, r2, #3
 8002492:	4413      	add	r3, r2
 8002494:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fc8f 	bl	8000dbc <__aeabi_fmul>
 800249e:	4603      	mov	r3, r0
 80024a0:	461c      	mov	r4, r3
 80024a2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80024a6:	f103 030d 	add.w	r3, r3, #13
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4a4c      	ldr	r2, [pc, #304]	; (80025e0 <Calcute_Ra+0x1070>)
 80024ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fc2e 	bl	8000d14 <__aeabi_i2f>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4619      	mov	r1, r3
 80024bc:	4620      	mov	r0, r4
 80024be:	f7fe fc7d 	bl	8000dbc <__aeabi_fmul>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80024c8:	f102 020d 	add.w	r2, r2, #13
 80024cc:	7814      	ldrb	r4, [r2, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	4628      	mov	r0, r5
 80024d2:	f7fe fb6b 	bl	8000bac <__addsf3>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4619      	mov	r1, r3
 80024da:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80024de:	f6a3 6234 	subw	r2, r3, #3636	; 0xe34
 80024e2:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80024e6:	fb04 f303 	mul.w	r3, r4, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024f0:	6019      	str	r1, [r3, #0]
            sam_r[i].tri_Z += ref_light.spectral[j] * _z_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 80024f2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80024f6:	f103 030d 	add.w	r3, r3, #13
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8002500:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8002504:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002512:	681d      	ldr	r5, [r3, #0]
 8002514:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002518:	f103 030c 	add.w	r3, r3, #12
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8002522:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002530:	f103 030c 	add.w	r3, r3, #12
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	492b      	ldr	r1, [pc, #172]	; (80025e4 <Calcute_Ra+0x1074>)
 8002538:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f7fe fc3c 	bl	8000dbc <__aeabi_fmul>
 8002544:	4603      	mov	r3, r0
 8002546:	4618      	mov	r0, r3
 8002548:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800254c:	f103 030c 	add.w	r3, r3, #12
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002556:	f103 030d 	add.w	r3, r3, #13
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	491f      	ldr	r1, [pc, #124]	; (80025dc <Calcute_Ra+0x106c>)
 800255e:	00d2      	lsls	r2, r2, #3
 8002560:	4413      	add	r3, r2
 8002562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fc28 	bl	8000dbc <__aeabi_fmul>
 800256c:	4603      	mov	r3, r0
 800256e:	461c      	mov	r4, r3
 8002570:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002574:	f103 030d 	add.w	r3, r3, #13
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <Calcute_Ra+0x1070>)
 800257c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fbc7 	bl	8000d14 <__aeabi_i2f>
 8002586:	4603      	mov	r3, r0
 8002588:	4619      	mov	r1, r3
 800258a:	4620      	mov	r0, r4
 800258c:	f7fe fc16 	bl	8000dbc <__aeabi_fmul>
 8002590:	4603      	mov	r3, r0
 8002592:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002596:	f102 020d 	add.w	r2, r2, #13
 800259a:	7814      	ldrb	r4, [r2, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	4628      	mov	r0, r5
 80025a0:	f7fe fb04 	bl	8000bac <__addsf3>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4619      	mov	r1, r3
 80025a8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80025ac:	f6a3 6234 	subw	r2, r3, #3636	; 0xe34
 80025b0:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80025b4:	fb04 f303 	mul.w	r3, r4, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80025be:	6019      	str	r1, [r3, #0]
        for(uint8_t j = 0; j < 9; j++)
 80025c0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80025c4:	f103 030c 	add.w	r3, r3, #12
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80025d0:	f102 020c 	add.w	r2, r2, #12
 80025d4:	7013      	strb	r3, [r2, #0]
 80025d6:	e007      	b.n	80025e8 <Calcute_Ra+0x1078>
 80025d8:	0800a250 	.word	0x0800a250
 80025dc:	0800a8ec 	.word	0x0800a8ec
 80025e0:	0800aa0c 	.word	0x0800aa0c
 80025e4:	0800a3b8 	.word	0x0800a3b8
 80025e8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80025ec:	f103 030c 	add.w	r3, r3, #12
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	f67f ad68 	bls.w	80020c8 <Calcute_Ra+0xb58>
/* to be optimize end */
        }
        {
            float tmp = sam_k[i].tri_X + sam_k[i].tri_Y + sam_k[i].tri_Z;
 80025f8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80025fc:	f103 030d 	add.w	r3, r3, #13
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002606:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800260a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800261e:	f103 030d 	add.w	r3, r3, #13
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002628:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800262c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fab5 	bl	8000bac <__addsf3>
 8002642:	4603      	mov	r3, r0
 8002644:	4618      	mov	r0, r3
 8002646:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800264a:	f103 030d 	add.w	r3, r3, #13
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002654:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8002658:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	f7fe fa9f 	bl	8000bac <__addsf3>
 800266e:	4603      	mov	r3, r0
 8002670:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8002674:	f102 021c 	add.w	r2, r2, #28
 8002678:	6013      	str	r3, [r2, #0]
            //float tmp = 100 / sam_k[i].tri_Y; //maybe right
            /*normalization*/
            sam_k[i].tri_X /= tmp;
 800267a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800267e:	f103 030d 	add.w	r3, r3, #13
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002688:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800268c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80026a0:	f102 020d 	add.w	r2, r2, #13
 80026a4:	7814      	ldrb	r4, [r2, #0]
 80026a6:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80026aa:	f102 021c 	add.w	r2, r2, #28
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fc37 	bl	8000f24 <__aeabi_fdiv>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4619      	mov	r1, r3
 80026ba:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80026be:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 80026c2:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80026c6:	fb04 f303 	mul.w	r3, r4, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80026d0:	6019      	str	r1, [r3, #0]
            sam_k[i].tri_Y /= tmp;
 80026d2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80026d6:	f103 030d 	add.w	r3, r3, #13
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80026e0:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 80026e4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80026f8:	f102 020d 	add.w	r2, r2, #13
 80026fc:	7814      	ldrb	r4, [r2, #0]
 80026fe:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8002702:	f102 021c 	add.w	r2, r2, #28
 8002706:	6811      	ldr	r1, [r2, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fc0b 	bl	8000f24 <__aeabi_fdiv>
 800270e:	4603      	mov	r3, r0
 8002710:	4619      	mov	r1, r3
 8002712:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002716:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 800271a:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800271e:	fb04 f303 	mul.w	r3, r4, r3
 8002722:	4413      	add	r3, r2
 8002724:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002728:	6019      	str	r1, [r3, #0]
            sam_k[i].tri_Z /= tmp;
 800272a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800272e:	f103 030d 	add.w	r3, r3, #13
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002738:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800273c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002750:	f102 020d 	add.w	r2, r2, #13
 8002754:	7814      	ldrb	r4, [r2, #0]
 8002756:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 800275a:	f102 021c 	add.w	r2, r2, #28
 800275e:	6811      	ldr	r1, [r2, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fbdf 	bl	8000f24 <__aeabi_fdiv>
 8002766:	4603      	mov	r3, r0
 8002768:	4619      	mov	r1, r3
 800276a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800276e:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 8002772:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002776:	fb04 f303 	mul.w	r3, r4, r3
 800277a:	4413      	add	r3, r2
 800277c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002780:	6019      	str	r1, [r3, #0]
        }
        {
            float tmp = sam_r[i].tri_X + sam_r[i].tri_Y + sam_r[i].tri_Z;
 8002782:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002786:	f103 030d 	add.w	r3, r3, #13
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8002790:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8002794:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80027a8:	f103 030d 	add.w	r3, r3, #13
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80027b2:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 80027b6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	f7fe f9f0 	bl	8000bac <__addsf3>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80027d4:	f103 030d 	add.w	r3, r3, #13
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80027de:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 80027e2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe f9da 	bl	8000bac <__addsf3>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80027fe:	f102 0218 	add.w	r2, r2, #24
 8002802:	6013      	str	r3, [r2, #0]
            //float tmp = 100 / sam_r[i].tri_Y; //maybe right
            /*normalization*/
            sam_r[i].tri_X /= tmp;
 8002804:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002808:	f103 030d 	add.w	r3, r3, #13
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8002812:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8002816:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800282a:	f102 020d 	add.w	r2, r2, #13
 800282e:	7814      	ldrb	r4, [r2, #0]
 8002830:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 8002834:	f102 0218 	add.w	r2, r2, #24
 8002838:	6811      	ldr	r1, [r2, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fb72 	bl	8000f24 <__aeabi_fdiv>
 8002840:	4603      	mov	r3, r0
 8002842:	4619      	mov	r1, r3
 8002844:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002848:	f6a3 6234 	subw	r2, r3, #3636	; 0xe34
 800284c:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002850:	fb04 f303 	mul.w	r3, r4, r3
 8002854:	4413      	add	r3, r2
 8002856:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800285a:	6019      	str	r1, [r3, #0]
            sam_r[i].tri_Y /= tmp;
 800285c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002860:	f103 030d 	add.w	r3, r3, #13
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 800286a:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 800286e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002882:	f102 020d 	add.w	r2, r2, #13
 8002886:	7814      	ldrb	r4, [r2, #0]
 8002888:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 800288c:	f102 0218 	add.w	r2, r2, #24
 8002890:	6811      	ldr	r1, [r2, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fb46 	bl	8000f24 <__aeabi_fdiv>
 8002898:	4603      	mov	r3, r0
 800289a:	4619      	mov	r1, r3
 800289c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80028a0:	f6a3 6234 	subw	r2, r3, #3636	; 0xe34
 80028a4:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80028a8:	fb04 f303 	mul.w	r3, r4, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028b2:	6019      	str	r1, [r3, #0]
            sam_r[i].tri_Z /= tmp;
 80028b4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80028b8:	f103 030d 	add.w	r3, r3, #13
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80028c2:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 80028c6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80028da:	f102 020d 	add.w	r2, r2, #13
 80028de:	7814      	ldrb	r4, [r2, #0]
 80028e0:	f507 52d3 	add.w	r2, r7, #6752	; 0x1a60
 80028e4:	f102 0218 	add.w	r2, r2, #24
 80028e8:	6811      	ldr	r1, [r2, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fb1a 	bl	8000f24 <__aeabi_fdiv>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4619      	mov	r1, r3
 80028f4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80028f8:	f6a3 6234 	subw	r2, r3, #3636	; 0xe34
 80028fc:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002900:	fb04 f303 	mul.w	r3, r4, r3
 8002904:	4413      	add	r3, r2
 8002906:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800290a:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 800290c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002910:	f103 030d 	add.w	r3, r3, #13
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	3301      	adds	r3, #1
 8002918:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800291c:	f102 020d 	add.w	r2, r2, #13
 8002920:	7013      	strb	r3, [r2, #0]
 8002922:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002926:	f103 030d 	add.w	r3, r3, #13
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b07      	cmp	r3, #7
 800292e:	f67f abbc 	bls.w	80020aa <Calcute_Ra+0xb3a>
        }
    }

    /*calculate XYZ of reference light*/
    for(uint8_t i = 0; i < 81; i++)
 8002932:	2300      	movs	r3, #0
 8002934:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002938:	f102 020b 	add.w	r2, r2, #11
 800293c:	7013      	strb	r3, [r2, #0]
 800293e:	e0ca      	b.n	8002ad6 <Calcute_Ra+0x1566>
    {
        ref_light.tri_X += ref_light.spectral_sta[i] * _x_lamda_sta[i] * (380 + 5 * i);
 8002940:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002944:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002948:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 800294c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002950:	f103 030b 	add.w	r3, r3, #11
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 800295a:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 800295e:	330a      	adds	r3, #10
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800296a:	f103 030b 	add.w	r3, r3, #11
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	49c4      	ldr	r1, [pc, #784]	; (8002c84 <Calcute_Ra+0x1714>)
 8002972:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f7fe fa1f 	bl	8000dbc <__aeabi_fmul>
 800297e:	4603      	mov	r3, r0
 8002980:	461d      	mov	r5, r3
 8002982:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002986:	f103 030b 	add.w	r3, r3, #11
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f9bc 	bl	8000d14 <__aeabi_i2f>
 800299c:	4603      	mov	r3, r0
 800299e:	4619      	mov	r1, r3
 80029a0:	4628      	mov	r0, r5
 80029a2:	f7fe fa0b 	bl	8000dbc <__aeabi_fmul>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4619      	mov	r1, r3
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7fe f8fe 	bl	8000bac <__addsf3>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80029b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029bc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ref_light.tri_Y += ref_light.spectral_sta[i] * _y_lamda_sta[i] * (380 + 5 * i);
 80029c0:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80029c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029c8:	f8d3 417c 	ldr.w	r4, [r3, #380]	; 0x17c
 80029cc:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80029d0:	f103 030b 	add.w	r3, r3, #11
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80029da:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 80029de:	330a      	adds	r3, #10
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80029ea:	f103 030b 	add.w	r3, r3, #11
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	49a5      	ldr	r1, [pc, #660]	; (8002c88 <Calcute_Ra+0x1718>)
 80029f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7fe f9df 	bl	8000dbc <__aeabi_fmul>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461d      	mov	r5, r3
 8002a02:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002a06:	f103 030b 	add.w	r3, r3, #11
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f97c 	bl	8000d14 <__aeabi_i2f>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4628      	mov	r0, r5
 8002a22:	f7fe f9cb 	bl	8000dbc <__aeabi_fmul>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7fe f8be 	bl	8000bac <__addsf3>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002a38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a3c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ref_light.tri_Z += ref_light.spectral_sta[i] * _z_lamda_sta[i] * (380 + 5 * i);
 8002a40:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002a44:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a48:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 8002a4c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002a50:	f103 030b 	add.w	r3, r3, #11
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8002a5a:	f5a2 72ea 	sub.w	r2, r2, #468	; 0x1d4
 8002a5e:	330a      	adds	r3, #10
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002a6a:	f103 030b 	add.w	r3, r3, #11
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4986      	ldr	r1, [pc, #536]	; (8002c8c <Calcute_Ra+0x171c>)
 8002a72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f7fe f99f 	bl	8000dbc <__aeabi_fmul>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	461d      	mov	r5, r3
 8002a82:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002a86:	f103 030b 	add.w	r3, r3, #11
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe f93c 	bl	8000d14 <__aeabi_i2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f7fe f98b 	bl	8000dbc <__aeabi_fmul>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe f87e 	bl	8000bac <__addsf3>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002ab8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002abc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    for(uint8_t i = 0; i < 81; i++)
 8002ac0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002ac4:	f103 030b 	add.w	r3, r3, #11
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002ad0:	f102 020b 	add.w	r2, r2, #11
 8002ad4:	7013      	strb	r3, [r2, #0]
 8002ad6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002ada:	f103 030b 	add.w	r3, r3, #11
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b50      	cmp	r3, #80	; 0x50
 8002ae2:	f67f af2d 	bls.w	8002940 <Calcute_Ra+0x13d0>
    }
    /*normalzation*/
    {
        float tmp = ref_light.tri_X + ref_light.tri_Y + ref_light.tri_Z;
 8002ae6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002aea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002aee:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002af2:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002af6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002afa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f7fe f853 	bl	8000bac <__addsf3>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002b0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b12:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7fe f847 	bl	8000bac <__addsf3>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8002b24:	6013      	str	r3, [r2, #0]
        //float tmp = 100 / ref_light.tri_Y; //maybe right
        ref_light.tri_X /= tmp;
 8002b26:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002b2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b2e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002b32:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8002b36:	6811      	ldr	r1, [r2, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe f9f3 	bl	8000f24 <__aeabi_fdiv>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002b46:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b4a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ref_light.tri_Y /= tmp;
 8002b4e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002b52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b56:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002b5a:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8002b5e:	6811      	ldr	r1, [r2, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe f9df 	bl	8000f24 <__aeabi_fdiv>
 8002b66:	4603      	mov	r3, r0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002b6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b72:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ref_light.tri_Z /= tmp;
 8002b76:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002b7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b7e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002b82:	f507 52d4 	add.w	r2, r7, #6784	; 0x1a80
 8002b86:	6811      	ldr	r1, [r2, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe f9cb 	bl	8000f24 <__aeabi_fdiv>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002b96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b9a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    }

    /*calculate chroma coordinate*/
    /*test_light don't need to correct*/
    ATTRS.param_u = 4 * ATTRS.tri_X / (ATTRS.tri_X + 15 * ATTRS.tri_Y + 3 * ATTRS.tri_Z);
 8002b9e:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002ba2:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002bac:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe f903 	bl	8000dbc <__aeabi_fmul>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461d      	mov	r5, r3
 8002bba:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002bbe:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 8002bc8:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002bcc:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002bd6:	492e      	ldr	r1, [pc, #184]	; (8002c90 <Calcute_Ra+0x1720>)
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f8ef 	bl	8000dbc <__aeabi_fmul>
 8002bde:	4603      	mov	r3, r0
 8002be0:	4619      	mov	r1, r3
 8002be2:	4620      	mov	r0, r4
 8002be4:	f7fd ffe2 	bl	8000bac <__addsf3>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461c      	mov	r4, r3
 8002bec:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002bf0:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8002bfa:	4926      	ldr	r1, [pc, #152]	; (8002c94 <Calcute_Ra+0x1724>)
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe f8dd 	bl	8000dbc <__aeabi_fmul>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4619      	mov	r1, r3
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7fd ffd0 	bl	8000bac <__addsf3>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4628      	mov	r0, r5
 8002c12:	f7fe f987 	bl	8000f24 <__aeabi_fdiv>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002c1e:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    ATTRS.param_v = 6 * ATTRS.tri_Y / (ATTRS.tri_X + 15 * ATTRS.tri_Y + 3 * ATTRS.tri_Z);
 8002c28:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002c2c:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002c36:	4918      	ldr	r1, [pc, #96]	; (8002c98 <Calcute_Ra+0x1728>)
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe f8bf 	bl	8000dbc <__aeabi_fmul>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461d      	mov	r5, r3
 8002c42:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002c46:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 8002c50:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002c54:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002c5e:	490c      	ldr	r1, [pc, #48]	; (8002c90 <Calcute_Ra+0x1720>)
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe f8ab 	bl	8000dbc <__aeabi_fmul>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7fd ff9e 	bl	8000bac <__addsf3>
 8002c70:	4603      	mov	r3, r0
 8002c72:	461c      	mov	r4, r3
 8002c74:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002c78:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8002c82:	e00b      	b.n	8002c9c <Calcute_Ra+0x172c>
 8002c84:	0800a10c 	.word	0x0800a10c
 8002c88:	0800a274 	.word	0x0800a274
 8002c8c:	0800a3dc 	.word	0x0800a3dc
 8002c90:	41700000 	.word	0x41700000
 8002c94:	40400000 	.word	0x40400000
 8002c98:	40c00000 	.word	0x40c00000
 8002c9c:	4990      	ldr	r1, [pc, #576]	; (8002ee0 <Calcute_Ra+0x1970>)
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f88c 	bl	8000dbc <__aeabi_fmul>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7fd ff7f 	bl	8000bac <__addsf3>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f7fe f936 	bl	8000f24 <__aeabi_fdiv>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002cc0:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    /*reference light don't need correction*/
    ref_light.param_u = 4 * ref_light.tri_X / (ref_light.tri_X + 15 * ref_light.tri_Y + 3 * ref_light.tri_Z);
 8002cca:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002cce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cd2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002cd6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe f86e 	bl	8000dbc <__aeabi_fmul>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461d      	mov	r5, r3
 8002ce4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002ce8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cec:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 8002cf0:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002cf4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002cf8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002cfc:	4979      	ldr	r1, [pc, #484]	; (8002ee4 <Calcute_Ra+0x1974>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe f85c 	bl	8000dbc <__aeabi_fmul>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4619      	mov	r1, r3
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7fd ff4f 	bl	8000bac <__addsf3>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461c      	mov	r4, r3
 8002d12:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002d16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d1a:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002d1e:	4970      	ldr	r1, [pc, #448]	; (8002ee0 <Calcute_Ra+0x1970>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe f84b 	bl	8000dbc <__aeabi_fmul>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7fd ff3e 	bl	8000bac <__addsf3>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	4628      	mov	r0, r5
 8002d36:	f7fe f8f5 	bl	8000f24 <__aeabi_fdiv>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002d42:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d46:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    ref_light.param_v = 6 * ref_light.tri_Y / (ref_light.tri_X + 15 * ref_light.tri_Y + 3 * ref_light.tri_Z);
 8002d4a:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002d4e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d52:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002d56:	4964      	ldr	r1, [pc, #400]	; (8002ee8 <Calcute_Ra+0x1978>)
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe f82f 	bl	8000dbc <__aeabi_fmul>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461d      	mov	r5, r3
 8002d62:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002d66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d6a:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 8002d6e:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002d72:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d76:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002d7a:	495a      	ldr	r1, [pc, #360]	; (8002ee4 <Calcute_Ra+0x1974>)
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe f81d 	bl	8000dbc <__aeabi_fmul>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4619      	mov	r1, r3
 8002d86:	4620      	mov	r0, r4
 8002d88:	f7fd ff10 	bl	8000bac <__addsf3>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461c      	mov	r4, r3
 8002d90:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002d94:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002d98:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002d9c:	4950      	ldr	r1, [pc, #320]	; (8002ee0 <Calcute_Ra+0x1970>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe f80c 	bl	8000dbc <__aeabi_fmul>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4619      	mov	r1, r3
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7fd feff 	bl	8000bac <__addsf3>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	4628      	mov	r0, r5
 8002db4:	f7fe f8b6 	bl	8000f24 <__aeabi_fdiv>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002dc0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dc4:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

    /*calculate delta_c*/
    delta_c = sqrt((ATTRS.param_u - ref_light.param_u) * (ATTRS.param_u - ref_light.param_u) + 
 8002dc8:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002dcc:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002dd6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002dda:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dde:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002de2:	4619      	mov	r1, r3
 8002de4:	4610      	mov	r0, r2
 8002de6:	f7fd fedf 	bl	8000ba8 <__aeabi_fsub>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461c      	mov	r4, r3
 8002dee:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002df2:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002dfc:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002e00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e04:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7fd fecc 	bl	8000ba8 <__aeabi_fsub>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4619      	mov	r1, r3
 8002e14:	4620      	mov	r0, r4
 8002e16:	f7fd ffd1 	bl	8000dbc <__aeabi_fmul>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461c      	mov	r4, r3
                    (ATTRS.param_v - ref_light.param_v) * (ATTRS.param_v - ref_light.param_v));
 8002e1e:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002e22:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002e2c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002e30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e34:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f7fd feb4 	bl	8000ba8 <__aeabi_fsub>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461d      	mov	r5, r3
 8002e44:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002e48:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002e52:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8002e56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e5a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4610      	mov	r0, r2
 8002e62:	f7fd fea1 	bl	8000ba8 <__aeabi_fsub>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f7fd ffa6 	bl	8000dbc <__aeabi_fmul>
 8002e70:	4603      	mov	r3, r0
    delta_c = sqrt((ATTRS.param_u - ref_light.param_u) * (ATTRS.param_u - ref_light.param_u) + 
 8002e72:	4619      	mov	r1, r3
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7fd fe99 	bl	8000bac <__addsf3>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb37 	bl	80004f0 <__aeabi_f2d>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f006 f893 	bl	8008fb4 <sqrt>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4610      	mov	r0, r2
 8002e94:	4619      	mov	r1, r3
 8002e96:	f7fd fe33 	bl	8000b00 <__aeabi_d2f>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002ea0:	6013      	str	r3, [r2, #0]
    if(delta_c > 0.0054)
 8002ea2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	f7fd fb22 	bl	80004f0 <__aeabi_f2d>
 8002eac:	a30a      	add	r3, pc, #40	; (adr r3, 8002ed8 <Calcute_Ra+0x1968>)
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f7fd fe05 	bl	8000ac0 <__aeabi_dcmpgt>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <Calcute_Ra+0x1954>
    {
        return -1;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec0:	f001 b8d9 	b.w	8004076 <Calcute_Ra+0x2b06>

    }

    /*color sample under test_light and refer_light*/
    for(uint8_t i = 0; i < 8; i++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002eca:	f102 020a 	add.w	r2, r2, #10
 8002ece:	7013      	strb	r3, [r2, #0]
 8002ed0:	e1f9      	b.n	80032c6 <Calcute_Ra+0x1d56>
 8002ed2:	bf00      	nop
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	765fd8ae 	.word	0x765fd8ae
 8002edc:	3f761e4f 	.word	0x3f761e4f
 8002ee0:	40400000 	.word	0x40400000
 8002ee4:	41700000 	.word	0x41700000
 8002ee8:	40c00000 	.word	0x40c00000
    {
        /*i represents the number of one sample*/ 
        /*under test_light*/
        sam_k[i].param_u = 4 * sam_k[i].tri_X / (sam_k[i].tri_X + 15 * sam_k[i].tri_Y + 3 * sam_k[i].tri_Z);
 8002eec:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002ef0:	f103 030a 	add.w	r3, r3, #10
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002efa:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8002efe:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd ff52 	bl	8000dbc <__aeabi_fmul>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002f20:	f103 030a 	add.w	r3, r3, #10
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002f2a:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8002f2e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002f3c:	681c      	ldr	r4, [r3, #0]
 8002f3e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002f42:	f103 030a 	add.w	r3, r3, #10
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002f4c:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8002f50:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	49c7      	ldr	r1, [pc, #796]	; (8003280 <Calcute_Ra+0x1d10>)
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd ff2a 	bl	8000dbc <__aeabi_fmul>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7fd fe1d 	bl	8000bac <__addsf3>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461c      	mov	r4, r3
 8002f76:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002f7a:	f103 030a 	add.w	r3, r3, #10
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002f84:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8002f88:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	49ba      	ldr	r1, [pc, #744]	; (8003284 <Calcute_Ra+0x1d14>)
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd ff0e 	bl	8000dbc <__aeabi_fmul>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f7fd fe01 	bl	8000bac <__addsf3>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8002fb0:	f102 020a 	add.w	r2, r2, #10
 8002fb4:	7814      	ldrb	r4, [r2, #0]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f7fd ffb3 	bl	8000f24 <__aeabi_fdiv>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8002fc6:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 8002fca:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002fce:	fb04 f303 	mul.w	r3, r4, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002fd8:	6019      	str	r1, [r3, #0]
        sam_k[i].param_v = 6 * sam_k[i].tri_Y / (sam_k[i].tri_X + 15 * sam_k[i].tri_Y + 3 * sam_k[i].tri_Z);
 8002fda:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8002fde:	f103 030a 	add.w	r3, r3, #10
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8002fe8:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8002fec:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	49a2      	ldr	r1, [pc, #648]	; (8003288 <Calcute_Ra+0x1d18>)
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fedc 	bl	8000dbc <__aeabi_fmul>
 8003004:	4603      	mov	r3, r0
 8003006:	461d      	mov	r5, r3
 8003008:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800300c:	f103 030a 	add.w	r3, r3, #10
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003016:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800301a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003028:	681c      	ldr	r4, [r3, #0]
 800302a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800302e:	f103 030a 	add.w	r3, r3, #10
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003038:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800303c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	498c      	ldr	r1, [pc, #560]	; (8003280 <Calcute_Ra+0x1d10>)
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd feb4 	bl	8000dbc <__aeabi_fmul>
 8003054:	4603      	mov	r3, r0
 8003056:	4619      	mov	r1, r3
 8003058:	4620      	mov	r0, r4
 800305a:	f7fd fda7 	bl	8000bac <__addsf3>
 800305e:	4603      	mov	r3, r0
 8003060:	461c      	mov	r4, r3
 8003062:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003066:	f103 030a 	add.w	r3, r3, #10
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003070:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8003074:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	497f      	ldr	r1, [pc, #508]	; (8003284 <Calcute_Ra+0x1d14>)
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fe98 	bl	8000dbc <__aeabi_fmul>
 800308c:	4603      	mov	r3, r0
 800308e:	4619      	mov	r1, r3
 8003090:	4620      	mov	r0, r4
 8003092:	f7fd fd8b 	bl	8000bac <__addsf3>
 8003096:	4603      	mov	r3, r0
 8003098:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800309c:	f102 020a 	add.w	r2, r2, #10
 80030a0:	7814      	ldrb	r4, [r2, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4628      	mov	r0, r5
 80030a6:	f7fd ff3d 	bl	8000f24 <__aeabi_fdiv>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4619      	mov	r1, r3
 80030ae:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80030b2:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 80030b6:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80030ba:	fb04 f303 	mul.w	r3, r4, r3
 80030be:	4413      	add	r3, r2
 80030c0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80030c4:	6019      	str	r1, [r3, #0]
        /*under refer_light*/
        sam_r[i].param_u = 4 * sam_r[i].tri_X / (sam_r[i].tri_X + 15 * sam_r[i].tri_Y + 3 * sam_r[i].tri_Z);
 80030c6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80030ca:	f103 030a 	add.w	r3, r3, #10
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80030d4:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 80030d8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fe65 	bl	8000dbc <__aeabi_fmul>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461d      	mov	r5, r3
 80030f6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80030fa:	f103 030a 	add.w	r3, r3, #10
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8003104:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8003108:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800311c:	f103 030a 	add.w	r3, r3, #10
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8003126:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 800312a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4951      	ldr	r1, [pc, #324]	; (8003280 <Calcute_Ra+0x1d10>)
 800313c:	4618      	mov	r0, r3
 800313e:	f7fd fe3d 	bl	8000dbc <__aeabi_fmul>
 8003142:	4603      	mov	r3, r0
 8003144:	4619      	mov	r1, r3
 8003146:	4620      	mov	r0, r4
 8003148:	f7fd fd30 	bl	8000bac <__addsf3>
 800314c:	4603      	mov	r3, r0
 800314e:	461c      	mov	r4, r3
 8003150:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003154:	f103 030a 	add.w	r3, r3, #10
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 800315e:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8003162:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4944      	ldr	r1, [pc, #272]	; (8003284 <Calcute_Ra+0x1d14>)
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fe21 	bl	8000dbc <__aeabi_fmul>
 800317a:	4603      	mov	r3, r0
 800317c:	4619      	mov	r1, r3
 800317e:	4620      	mov	r0, r4
 8003180:	f7fd fd14 	bl	8000bac <__addsf3>
 8003184:	4603      	mov	r3, r0
 8003186:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800318a:	f102 020a 	add.w	r2, r2, #10
 800318e:	7814      	ldrb	r4, [r2, #0]
 8003190:	4619      	mov	r1, r3
 8003192:	4628      	mov	r0, r5
 8003194:	f7fd fec6 	bl	8000f24 <__aeabi_fdiv>
 8003198:	4603      	mov	r3, r0
 800319a:	4619      	mov	r1, r3
 800319c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80031a0:	f6a3 6234 	subw	r2, r3, #3636	; 0xe34
 80031a4:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80031a8:	fb04 f303 	mul.w	r3, r4, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80031b2:	6019      	str	r1, [r3, #0]
        sam_r[i].param_v = 6 * sam_r[i].tri_Y / (sam_r[i].tri_X + 15 * sam_r[i].tri_Y + 3 * sam_r[i].tri_Z);
 80031b4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80031b8:	f103 030a 	add.w	r3, r3, #10
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80031c2:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 80031c6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	492c      	ldr	r1, [pc, #176]	; (8003288 <Calcute_Ra+0x1d18>)
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd fdef 	bl	8000dbc <__aeabi_fmul>
 80031de:	4603      	mov	r3, r0
 80031e0:	461d      	mov	r5, r3
 80031e2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80031e6:	f103 030a 	add.w	r3, r3, #10
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 80031f0:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 80031f4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003202:	681c      	ldr	r4, [r3, #0]
 8003204:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003208:	f103 030a 	add.w	r3, r3, #10
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8003212:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8003216:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4916      	ldr	r1, [pc, #88]	; (8003280 <Calcute_Ra+0x1d10>)
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fdc7 	bl	8000dbc <__aeabi_fmul>
 800322e:	4603      	mov	r3, r0
 8003230:	4619      	mov	r1, r3
 8003232:	4620      	mov	r0, r4
 8003234:	f7fd fcba 	bl	8000bac <__addsf3>
 8003238:	4603      	mov	r3, r0
 800323a:	461c      	mov	r4, r3
 800323c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003240:	f103 030a 	add.w	r3, r3, #10
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 800324a:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 800324e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4909      	ldr	r1, [pc, #36]	; (8003284 <Calcute_Ra+0x1d14>)
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd fdab 	bl	8000dbc <__aeabi_fmul>
 8003266:	4603      	mov	r3, r0
 8003268:	4619      	mov	r1, r3
 800326a:	4620      	mov	r0, r4
 800326c:	f7fd fc9e 	bl	8000bac <__addsf3>
 8003270:	4603      	mov	r3, r0
 8003272:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003276:	f102 020a 	add.w	r2, r2, #10
 800327a:	7814      	ldrb	r4, [r2, #0]
 800327c:	e006      	b.n	800328c <Calcute_Ra+0x1d1c>
 800327e:	bf00      	nop
 8003280:	41700000 	.word	0x41700000
 8003284:	40400000 	.word	0x40400000
 8003288:	40c00000 	.word	0x40c00000
 800328c:	4619      	mov	r1, r3
 800328e:	4628      	mov	r0, r5
 8003290:	f7fd fe48 	bl	8000f24 <__aeabi_fdiv>
 8003294:	4603      	mov	r3, r0
 8003296:	4619      	mov	r1, r3
 8003298:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800329c:	f6a3 6234 	subw	r2, r3, #3636	; 0xe34
 80032a0:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80032a4:	fb04 f303 	mul.w	r3, r4, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80032ae:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 80032b0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80032b4:	f103 030a 	add.w	r3, r3, #10
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80032c0:	f102 020a 	add.w	r2, r2, #10
 80032c4:	7013      	strb	r3, [r2, #0]
 80032c6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80032ca:	f103 030a 	add.w	r3, r3, #10
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b07      	cmp	r3, #7
 80032d2:	f67f ae0b 	bls.w	8002eec <Calcute_Ra+0x197c>
    }

    /*third, color sample under test_light correction*/
    /*calculate parameter that calculation needs*/
    /*test_light*/
    ATTRS.param_c = (4 - ATTRS.param_u - 10 * ATTRS.param_v) / ATTRS.param_v;
 80032d6:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80032da:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80032ea:	f7fd fc5d 	bl	8000ba8 <__aeabi_fsub>
 80032ee:	4603      	mov	r3, r0
 80032f0:	461c      	mov	r4, r3
 80032f2:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80032f6:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8003300:	4981      	ldr	r1, [pc, #516]	; (8003508 <Calcute_Ra+0x1f98>)
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd fd5a 	bl	8000dbc <__aeabi_fmul>
 8003308:	4603      	mov	r3, r0
 800330a:	4619      	mov	r1, r3
 800330c:	4620      	mov	r0, r4
 800330e:	f7fd fc4b 	bl	8000ba8 <__aeabi_fsub>
 8003312:	4603      	mov	r3, r0
 8003314:	461a      	mov	r2, r3
 8003316:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800331a:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7fd fdfc 	bl	8000f24 <__aeabi_fdiv>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003334:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    ATTRS.param_d = (1.708 * ATTRS.param_v + 0.404 - 1.481 * ATTRS.param_u) / ATTRS.param_v;
 800333e:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003342:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f8cf 	bl	80004f0 <__aeabi_f2d>
 8003352:	a367      	add	r3, pc, #412	; (adr r3, 80034f0 <Calcute_Ra+0x1f80>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd f922 	bl	80005a0 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	a364      	add	r3, pc, #400	; (adr r3, 80034f8 <Calcute_Ra+0x1f88>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f7fc ff63 	bl	8000234 <__adddf3>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4614      	mov	r4, r2
 8003374:	461d      	mov	r5, r3
 8003376:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800337a:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f8b3 	bl	80004f0 <__aeabi_f2d>
 800338a:	a35d      	add	r3, pc, #372	; (adr r3, 8003500 <Calcute_Ra+0x1f90>)
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f7fd f906 	bl	80005a0 <__aeabi_dmul>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4620      	mov	r0, r4
 800339a:	4629      	mov	r1, r5
 800339c:	f7fc ff48 	bl	8000230 <__aeabi_dsub>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4614      	mov	r4, r2
 80033a6:	461d      	mov	r5, r3
 80033a8:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80033ac:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd f89a 	bl	80004f0 <__aeabi_f2d>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4620      	mov	r0, r4
 80033c2:	4629      	mov	r1, r5
 80033c4:	f7fd fa16 	bl	80007f4 <__aeabi_ddiv>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	f7fd fb96 	bl	8000b00 <__aeabi_d2f>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80033da:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    /*ref_light*/
    ref_light.param_c = (4 - ref_light.param_u - 10 * ref_light.param_v) / ref_light.param_v;
 80033e4:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80033e8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033ec:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80033f0:	4619      	mov	r1, r3
 80033f2:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80033f6:	f7fd fbd7 	bl	8000ba8 <__aeabi_fsub>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461c      	mov	r4, r3
 80033fe:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003402:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003406:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800340a:	493f      	ldr	r1, [pc, #252]	; (8003508 <Calcute_Ra+0x1f98>)
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd fcd5 	bl	8000dbc <__aeabi_fmul>
 8003412:	4603      	mov	r3, r0
 8003414:	4619      	mov	r1, r3
 8003416:	4620      	mov	r0, r4
 8003418:	f7fd fbc6 	bl	8000ba8 <__aeabi_fsub>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003424:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003428:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f7fd fd78 	bl	8000f24 <__aeabi_fdiv>
 8003434:	4603      	mov	r3, r0
 8003436:	461a      	mov	r2, r3
 8003438:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800343c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003440:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    ref_light.param_d = (1.708 * ref_light.param_v + 0.404 - 1.481 * ref_light.param_u) / ref_light.param_v;
 8003444:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003448:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800344c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f84d 	bl	80004f0 <__aeabi_f2d>
 8003456:	a326      	add	r3, pc, #152	; (adr r3, 80034f0 <Calcute_Ra+0x1f80>)
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f7fd f8a0 	bl	80005a0 <__aeabi_dmul>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	a323      	add	r3, pc, #140	; (adr r3, 80034f8 <Calcute_Ra+0x1f88>)
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f7fc fee1 	bl	8000234 <__adddf3>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4614      	mov	r4, r2
 8003478:	461d      	mov	r5, r3
 800347a:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800347e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003482:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd f832 	bl	80004f0 <__aeabi_f2d>
 800348c:	a31c      	add	r3, pc, #112	; (adr r3, 8003500 <Calcute_Ra+0x1f90>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	f7fd f885 	bl	80005a0 <__aeabi_dmul>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4620      	mov	r0, r4
 800349c:	4629      	mov	r1, r5
 800349e:	f7fc fec7 	bl	8000230 <__aeabi_dsub>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4614      	mov	r4, r2
 80034a8:	461d      	mov	r5, r3
 80034aa:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80034ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034b2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f81a 	bl	80004f0 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fd f996 	bl	80007f4 <__aeabi_ddiv>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd fb16 	bl	8000b00 <__aeabi_d2f>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80034da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80034de:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    /*color samples under test_light, does not need values that under refer_light*/
    for(uint8_t i = 0; i < 8; i++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80034e8:	f102 0209 	add.w	r2, r2, #9
 80034ec:	7013      	strb	r3, [r2, #0]
 80034ee:	e0ee      	b.n	80036ce <Calcute_Ra+0x215e>
 80034f0:	ced91687 	.word	0xced91687
 80034f4:	3ffb53f7 	.word	0x3ffb53f7
 80034f8:	d0e56042 	.word	0xd0e56042
 80034fc:	3fd9db22 	.word	0x3fd9db22
 8003500:	0e560419 	.word	0x0e560419
 8003504:	3ff7b22d 	.word	0x3ff7b22d
 8003508:	41200000 	.word	0x41200000
    {
        sam_k[i].param_c = (4 - sam_k[i].param_u - 10 * sam_k[i].param_v) / sam_k[i].param_v;
 800350c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003510:	f103 0309 	add.w	r3, r3, #9
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 800351a:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800351e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4619      	mov	r1, r3
 8003530:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8003534:	f7fd fb38 	bl	8000ba8 <__aeabi_fsub>
 8003538:	4603      	mov	r3, r0
 800353a:	461c      	mov	r4, r3
 800353c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003540:	f103 0309 	add.w	r3, r3, #9
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 800354a:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800354e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003552:	fb01 f303 	mul.w	r3, r1, r3
 8003556:	4413      	add	r3, r2
 8003558:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	496a      	ldr	r1, [pc, #424]	; (8003708 <Calcute_Ra+0x2198>)
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd fc2b 	bl	8000dbc <__aeabi_fmul>
 8003566:	4603      	mov	r3, r0
 8003568:	4619      	mov	r1, r3
 800356a:	4620      	mov	r0, r4
 800356c:	f7fd fb1c 	bl	8000ba8 <__aeabi_fsub>
 8003570:	4603      	mov	r3, r0
 8003572:	4618      	mov	r0, r3
 8003574:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003578:	f103 0309 	add.w	r3, r3, #9
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003582:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8003586:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800359a:	f102 0209 	add.w	r2, r2, #9
 800359e:	7814      	ldrb	r4, [r2, #0]
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7fd fcbf 	bl	8000f24 <__aeabi_fdiv>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4619      	mov	r1, r3
 80035aa:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80035ae:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 80035b2:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80035b6:	fb04 f303 	mul.w	r3, r4, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80035c0:	6019      	str	r1, [r3, #0]
        sam_k[i].param_d = (1.708 * sam_k[i].param_v + 0.404 - 1.481 * sam_k[i].param_u) / sam_k[i].param_v;
 80035c2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80035c6:	f103 0309 	add.w	r3, r3, #9
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80035d0:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 80035d4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80035d8:	fb01 f303 	mul.w	r3, r1, r3
 80035dc:	4413      	add	r3, r2
 80035de:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fc ff83 	bl	80004f0 <__aeabi_f2d>
 80035ea:	a341      	add	r3, pc, #260	; (adr r3, 80036f0 <Calcute_Ra+0x2180>)
 80035ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f0:	f7fc ffd6 	bl	80005a0 <__aeabi_dmul>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	a33e      	add	r3, pc, #248	; (adr r3, 80036f8 <Calcute_Ra+0x2188>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f7fc fe17 	bl	8000234 <__adddf3>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4614      	mov	r4, r2
 800360c:	461d      	mov	r5, r3
 800360e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003612:	f103 0309 	add.w	r3, r3, #9
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 800361c:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8003620:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff5d 	bl	80004f0 <__aeabi_f2d>
 8003636:	a332      	add	r3, pc, #200	; (adr r3, 8003700 <Calcute_Ra+0x2190>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fc ffb0 	bl	80005a0 <__aeabi_dmul>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fc fdf2 	bl	8000230 <__aeabi_dsub>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4614      	mov	r4, r2
 8003652:	461d      	mov	r5, r3
 8003654:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003658:	f103 0309 	add.w	r3, r3, #9
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003662:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8003666:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc ff3a 	bl	80004f0 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fd f8b6 	bl	80007f4 <__aeabi_ddiv>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8003690:	f101 0109 	add.w	r1, r1, #9
 8003694:	780c      	ldrb	r4, [r1, #0]
 8003696:	4610      	mov	r0, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7fd fa31 	bl	8000b00 <__aeabi_d2f>
 800369e:	4601      	mov	r1, r0
 80036a0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80036a4:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 80036a8:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80036ac:	fb04 f303 	mul.w	r3, r4, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80036b6:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 80036b8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80036bc:	f103 0309 	add.w	r3, r3, #9
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80036c8:	f102 0209 	add.w	r2, r2, #9
 80036cc:	7013      	strb	r3, [r2, #0]
 80036ce:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80036d2:	f103 0309 	add.w	r3, r3, #9
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b07      	cmp	r3, #7
 80036da:	f67f af17 	bls.w	800350c <Calcute_Ra+0x1f9c>
    }
    /*correction*/
    for(uint8_t i = 0; i < 8; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 80036e4:	f102 0208 	add.w	r2, r2, #8
 80036e8:	7013      	strb	r3, [r2, #0]
 80036ea:	e1c3      	b.n	8003a74 <Calcute_Ra+0x2504>
 80036ec:	f3af 8000 	nop.w
 80036f0:	ced91687 	.word	0xced91687
 80036f4:	3ffb53f7 	.word	0x3ffb53f7
 80036f8:	d0e56042 	.word	0xd0e56042
 80036fc:	3fd9db22 	.word	0x3fd9db22
 8003700:	0e560419 	.word	0x0e560419
 8003704:	3ff7b22d 	.word	0x3ff7b22d
 8003708:	41200000 	.word	0x41200000
    {
        sam_k[i].param_u = (10.872 + 0.404 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - 4 * (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d)
 800370c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003710:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003714:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003718:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800371c:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7fd fbfb 	bl	8000f24 <__aeabi_fdiv>
 800372e:	4603      	mov	r3, r0
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc fedd 	bl	80004f0 <__aeabi_f2d>
 8003736:	a3d8      	add	r3, pc, #864	; (adr r3, 8003a98 <Calcute_Ra+0x2528>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f7fc ff30 	bl	80005a0 <__aeabi_dmul>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4614      	mov	r4, r2
 8003746:	461d      	mov	r5, r3
 8003748:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800374c:	f103 0308 	add.w	r3, r3, #8
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003756:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800375a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800375e:	fb01 f303 	mul.w	r3, r1, r3
 8003762:	4413      	add	r3, r2
 8003764:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc fec0 	bl	80004f0 <__aeabi_f2d>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4620      	mov	r0, r4
 8003776:	4629      	mov	r1, r5
 8003778:	f7fc ff12 	bl	80005a0 <__aeabi_dmul>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	a3c6      	add	r3, pc, #792	; (adr r3, 8003aa0 <Calcute_Ra+0x2530>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f7fc fd53 	bl	8000234 <__adddf3>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4614      	mov	r4, r2
 8003794:	461d      	mov	r5, r3
 8003796:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800379a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800379e:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80037a2:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80037a6:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f7fd fbb6 	bl	8000f24 <__aeabi_fdiv>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fafc 	bl	8000dbc <__aeabi_fmul>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80037cc:	f103 0308 	add.w	r3, r3, #8
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80037d6:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 80037da:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd fae6 	bl	8000dbc <__aeabi_fmul>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fc fe7c 	bl	80004f0 <__aeabi_f2d>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4620      	mov	r0, r4
 80037fe:	4629      	mov	r1, r5
 8003800:	f7fc fd16 	bl	8000230 <__aeabi_dsub>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4614      	mov	r4, r2
 800380a:	461d      	mov	r5, r3
                                / (16.518 + 1.481 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d);
 800380c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003810:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003814:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003818:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800381c:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f7fd fb7b 	bl	8000f24 <__aeabi_fdiv>
 800382e:	4603      	mov	r3, r0
 8003830:	4618      	mov	r0, r3
 8003832:	f7fc fe5d 	bl	80004f0 <__aeabi_f2d>
 8003836:	a39c      	add	r3, pc, #624	; (adr r3, 8003aa8 <Calcute_Ra+0x2538>)
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f7fc feb0 	bl	80005a0 <__aeabi_dmul>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4690      	mov	r8, r2
 8003846:	4699      	mov	r9, r3
 8003848:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 800384c:	f103 0308 	add.w	r3, r3, #8
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003856:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 800385a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc fe40 	bl	80004f0 <__aeabi_f2d>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4640      	mov	r0, r8
 8003876:	4649      	mov	r1, r9
 8003878:	f7fc fe92 	bl	80005a0 <__aeabi_dmul>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	a38a      	add	r3, pc, #552	; (adr r3, 8003ab0 <Calcute_Ra+0x2540>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f7fc fcd3 	bl	8000234 <__adddf3>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4690      	mov	r8, r2
 8003894:	4699      	mov	r9, r3
 8003896:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 800389a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800389e:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80038a2:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80038a6:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7fd fb36 	bl	8000f24 <__aeabi_fdiv>
 80038b8:	4603      	mov	r3, r0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80038c0:	f103 0308 	add.w	r3, r3, #8
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80038ca:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 80038ce:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4619      	mov	r1, r3
 80038e0:	f7fd fa6c 	bl	8000dbc <__aeabi_fmul>
 80038e4:	4603      	mov	r3, r0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fc fe02 	bl	80004f0 <__aeabi_f2d>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4640      	mov	r0, r8
 80038f2:	4649      	mov	r1, r9
 80038f4:	f7fc fc9c 	bl	8000230 <__aeabi_dsub>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4620      	mov	r0, r4
 80038fe:	4629      	mov	r1, r5
 8003900:	f7fc ff78 	bl	80007f4 <__aeabi_ddiv>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
        sam_k[i].param_u = (10.872 + 0.404 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - 4 * (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d)
 8003908:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 800390c:	f101 0108 	add.w	r1, r1, #8
 8003910:	780c      	ldrb	r4, [r1, #0]
                                / (16.518 + 1.481 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d);
 8003912:	4610      	mov	r0, r2
 8003914:	4619      	mov	r1, r3
 8003916:	f7fd f8f3 	bl	8000b00 <__aeabi_d2f>
 800391a:	4601      	mov	r1, r0
        sam_k[i].param_u = (10.872 + 0.404 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - 4 * (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d)
 800391c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003920:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 8003924:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8003928:	fb04 f303 	mul.w	r3, r4, r3
 800392c:	4413      	add	r3, r2
 800392e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003932:	6019      	str	r1, [r3, #0]
        sam_k[i].param_v = 5.520 / (16.518 + 1.481 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d);
 8003934:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003938:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800393c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003940:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003944:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fd fae7 	bl	8000f24 <__aeabi_fdiv>
 8003956:	4603      	mov	r3, r0
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fdc9 	bl	80004f0 <__aeabi_f2d>
 800395e:	a352      	add	r3, pc, #328	; (adr r3, 8003aa8 <Calcute_Ra+0x2538>)
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f7fc fe1c 	bl	80005a0 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4614      	mov	r4, r2
 800396e:	461d      	mov	r5, r3
 8003970:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003974:	f103 0308 	add.w	r3, r3, #8
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 800397e:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8003982:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fdac 	bl	80004f0 <__aeabi_f2d>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4620      	mov	r0, r4
 800399e:	4629      	mov	r1, r5
 80039a0:	f7fc fdfe 	bl	80005a0 <__aeabi_dmul>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	a340      	add	r3, pc, #256	; (adr r3, 8003ab0 <Calcute_Ra+0x2540>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f7fc fc3f 	bl	8000234 <__adddf3>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4614      	mov	r4, r2
 80039bc:	461d      	mov	r5, r3
 80039be:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 80039c2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80039c6:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80039ca:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80039ce:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fd faa2 	bl	8000f24 <__aeabi_fdiv>
 80039e0:	4603      	mov	r3, r0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 80039e8:	f103 0308 	add.w	r3, r3, #8
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80039f2:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 80039f6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4619      	mov	r1, r3
 8003a08:	f7fd f9d8 	bl	8000dbc <__aeabi_fmul>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fd6e 	bl	80004f0 <__aeabi_f2d>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4620      	mov	r0, r4
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	f7fc fc08 	bl	8000230 <__aeabi_dsub>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	a124      	add	r1, pc, #144	; (adr r1, 8003ab8 <Calcute_Ra+0x2548>)
 8003a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a2a:	f7fc fee3 	bl	80007f4 <__aeabi_ddiv>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8003a36:	f101 0108 	add.w	r1, r1, #8
 8003a3a:	780c      	ldrb	r4, [r1, #0]
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f7fd f85e 	bl	8000b00 <__aeabi_d2f>
 8003a44:	4601      	mov	r1, r0
 8003a46:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003a4a:	f6a3 2294 	subw	r2, r3, #2708	; 0xa94
 8003a4e:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8003a52:	fb04 f303 	mul.w	r3, r4, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003a5c:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8003a5e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003a62:	f103 0308 	add.w	r3, r3, #8
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003a6e:	f102 0208 	add.w	r2, r2, #8
 8003a72:	7013      	strb	r3, [r2, #0]
 8003a74:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003a78:	f103 0308 	add.w	r3, r3, #8
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b07      	cmp	r3, #7
 8003a80:	f67f ae44 	bls.w	800370c <Calcute_Ra+0x219c>
    }

    /*forth, calculate W, U, V, delta_E to gain Ri then Ra*/
    for(uint8_t i = 0; i < 8; i++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003a8a:	f102 0207 	add.w	r2, r2, #7
 8003a8e:	7013      	strb	r3, [r2, #0]
 8003a90:	e195      	b.n	8003dbe <Calcute_Ra+0x284e>
 8003a92:	bf00      	nop
 8003a94:	f3af 8000 	nop.w
 8003a98:	d0e56042 	.word	0xd0e56042
 8003a9c:	3fd9db22 	.word	0x3fd9db22
 8003aa0:	c8b43958 	.word	0xc8b43958
 8003aa4:	4025be76 	.word	0x4025be76
 8003aa8:	0e560419 	.word	0x0e560419
 8003aac:	3ff7b22d 	.word	0x3ff7b22d
 8003ab0:	a5e353f8 	.word	0xa5e353f8
 8003ab4:	4030849b 	.word	0x4030849b
 8003ab8:	e147ae14 	.word	0xe147ae14
 8003abc:	4016147a 	.word	0x4016147a
    {
        /*color samples under refer_light*/
        WUV_r[i][0] = 25 * pow(sam_r[i].tri_Y, 1 / 3) - 17;
 8003ac0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003ac4:	f103 0307 	add.w	r3, r3, #7
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8003ace:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8003ad2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fd04 	bl	80004f0 <__aeabi_f2d>
 8003ae8:	f04f 0000 	mov.w	r0, #0
 8003aec:	49bb      	ldr	r1, [pc, #748]	; (8003ddc <Calcute_Ra+0x286c>)
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	4bbb      	ldr	r3, [pc, #748]	; (8003de0 <Calcute_Ra+0x2870>)
 8003af4:	f7fc fd54 	bl	80005a0 <__aeabi_dmul>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	4bb7      	ldr	r3, [pc, #732]	; (8003de4 <Calcute_Ra+0x2874>)
 8003b06:	f7fc fb93 	bl	8000230 <__aeabi_dsub>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8003b12:	f101 0107 	add.w	r1, r1, #7
 8003b16:	780c      	ldrb	r4, [r1, #0]
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f7fc fff0 	bl	8000b00 <__aeabi_d2f>
 8003b20:	4602      	mov	r2, r0
 8003b22:	49b1      	ldr	r1, [pc, #708]	; (8003de8 <Calcute_Ra+0x2878>)
 8003b24:	4623      	mov	r3, r4
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4423      	add	r3, r4
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	601a      	str	r2, [r3, #0]
        WUV_r[i][1] = 13 * WUV_r[i][0] * (sam_r[i].param_u - ref_light.param_u);
 8003b30:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003b34:	f103 0307 	add.w	r3, r3, #7
 8003b38:	781a      	ldrb	r2, [r3, #0]
 8003b3a:	49ab      	ldr	r1, [pc, #684]	; (8003de8 <Calcute_Ra+0x2878>)
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	49a8      	ldr	r1, [pc, #672]	; (8003dec <Calcute_Ra+0x287c>)
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd f936 	bl	8000dbc <__aeabi_fmul>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461d      	mov	r5, r3
 8003b54:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003b58:	f103 0307 	add.w	r3, r3, #7
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8003b62:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8003b66:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003b7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b7e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fd f80f 	bl	8000ba8 <__aeabi_fsub>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003b90:	f102 0207 	add.w	r2, r2, #7
 8003b94:	7814      	ldrb	r4, [r2, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f7fd f90f 	bl	8000dbc <__aeabi_fmul>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4a91      	ldr	r2, [pc, #580]	; (8003de8 <Calcute_Ra+0x2878>)
 8003ba4:	4623      	mov	r3, r4
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4423      	add	r3, r4
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	3304      	adds	r3, #4
 8003bb0:	6019      	str	r1, [r3, #0]
	WUV_r[i][2] = 13 * WUV_r[i][0] * (sam_r[i].param_v - ref_light.param_v);
 8003bb2:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003bb6:	f103 0307 	add.w	r3, r3, #7
 8003bba:	781a      	ldrb	r2, [r3, #0]
 8003bbc:	498a      	ldr	r1, [pc, #552]	; (8003de8 <Calcute_Ra+0x2878>)
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4988      	ldr	r1, [pc, #544]	; (8003dec <Calcute_Ra+0x287c>)
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fd f8f5 	bl	8000dbc <__aeabi_fmul>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	461d      	mov	r5, r3
 8003bd6:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003bda:	f103 0307 	add.w	r3, r3, #7
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	f507 52d6 	add.w	r2, r7, #6848	; 0x1ac0
 8003be4:	f6a2 6234 	subw	r2, r2, #3636	; 0xe34
 8003be8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003bfc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c00:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7fc ffce 	bl	8000ba8 <__aeabi_fsub>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003c12:	f102 0207 	add.w	r2, r2, #7
 8003c16:	7814      	ldrb	r4, [r2, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f7fd f8ce 	bl	8000dbc <__aeabi_fmul>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4619      	mov	r1, r3
 8003c24:	4a70      	ldr	r2, [pc, #448]	; (8003de8 <Calcute_Ra+0x2878>)
 8003c26:	4623      	mov	r3, r4
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4423      	add	r3, r4
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	3308      	adds	r3, #8
 8003c32:	6019      	str	r1, [r3, #0]

        /*color samples under test_light*/
	WUV_k[i][0] = 25 * pow(sam_k[i].tri_Y, 1 / 3) - 17;
 8003c34:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003c38:	f103 0307 	add.w	r3, r3, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003c42:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8003c46:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc fc4a 	bl	80004f0 <__aeabi_f2d>
 8003c5c:	f04f 0000 	mov.w	r0, #0
 8003c60:	495e      	ldr	r1, [pc, #376]	; (8003ddc <Calcute_Ra+0x286c>)
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	4b5e      	ldr	r3, [pc, #376]	; (8003de0 <Calcute_Ra+0x2870>)
 8003c68:	f7fc fc9a 	bl	80005a0 <__aeabi_dmul>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	4b5a      	ldr	r3, [pc, #360]	; (8003de4 <Calcute_Ra+0x2874>)
 8003c7a:	f7fc fad9 	bl	8000230 <__aeabi_dsub>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8003c86:	f101 0107 	add.w	r1, r1, #7
 8003c8a:	780c      	ldrb	r4, [r1, #0]
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4619      	mov	r1, r3
 8003c90:	f7fc ff36 	bl	8000b00 <__aeabi_d2f>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4956      	ldr	r1, [pc, #344]	; (8003df0 <Calcute_Ra+0x2880>)
 8003c98:	4623      	mov	r3, r4
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4423      	add	r3, r4
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	601a      	str	r2, [r3, #0]
	WUV_k[i][1] = 13 * WUV_k[i][0] * (sam_k[i].param_u - ref_light.param_u);
 8003ca4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003ca8:	f103 0307 	add.w	r3, r3, #7
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	4950      	ldr	r1, [pc, #320]	; (8003df0 <Calcute_Ra+0x2880>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	494b      	ldr	r1, [pc, #300]	; (8003dec <Calcute_Ra+0x287c>)
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fd f87c 	bl	8000dbc <__aeabi_fmul>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461d      	mov	r5, r3
 8003cc8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003ccc:	f103 0307 	add.w	r3, r3, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003cd6:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8003cda:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003cee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003cf2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f7fc ff55 	bl	8000ba8 <__aeabi_fsub>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003d04:	f102 0207 	add.w	r2, r2, #7
 8003d08:	7814      	ldrb	r4, [r2, #0]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f7fd f855 	bl	8000dbc <__aeabi_fmul>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4619      	mov	r1, r3
 8003d16:	4a36      	ldr	r2, [pc, #216]	; (8003df0 <Calcute_Ra+0x2880>)
 8003d18:	4623      	mov	r3, r4
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	4423      	add	r3, r4
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	6019      	str	r1, [r3, #0]
	WUV_k[i][2] = 13 * WUV_k[i][0] * (sam_k[i].param_v - ref_light.param_v);
 8003d26:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003d2a:	f103 0307 	add.w	r3, r3, #7
 8003d2e:	781a      	ldrb	r2, [r3, #0]
 8003d30:	492f      	ldr	r1, [pc, #188]	; (8003df0 <Calcute_Ra+0x2880>)
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	492b      	ldr	r1, [pc, #172]	; (8003dec <Calcute_Ra+0x287c>)
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fd f83b 	bl	8000dbc <__aeabi_fmul>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461d      	mov	r5, r3
 8003d4a:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003d4e:	f103 0307 	add.w	r3, r3, #7
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003d58:	f6a2 2294 	subw	r2, r2, #2708	; 0xa94
 8003d5c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	f507 53d6 	add.w	r3, r7, #6848	; 0x1ac0
 8003d70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003d74:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f7fc ff14 	bl	8000ba8 <__aeabi_fsub>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003d86:	f102 0207 	add.w	r2, r2, #7
 8003d8a:	7814      	ldrb	r4, [r2, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f7fd f814 	bl	8000dbc <__aeabi_fmul>
 8003d94:	4603      	mov	r3, r0
 8003d96:	4619      	mov	r1, r3
 8003d98:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <Calcute_Ra+0x2880>)
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4423      	add	r3, r4
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	3308      	adds	r3, #8
 8003da6:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8003da8:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003dac:	f103 0307 	add.w	r3, r3, #7
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003db8:	f102 0207 	add.w	r2, r2, #7
 8003dbc:	7013      	strb	r3, [r2, #0]
 8003dbe:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003dc2:	f103 0307 	add.w	r3, r3, #7
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b07      	cmp	r3, #7
 8003dca:	f67f ae79 	bls.w	8003ac0 <Calcute_Ra+0x2550>
    }
    /*calculate delta_E and sum of Ri*/
    for(uint8_t i = 0; i < 8; i++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 8003dd4:	f102 0206 	add.w	r2, r2, #6
 8003dd8:	7013      	strb	r3, [r2, #0]
 8003dda:	e12a      	b.n	8004032 <Calcute_Ra+0x2ac2>
 8003ddc:	3ff00000 	.word	0x3ff00000
 8003de0:	40390000 	.word	0x40390000
 8003de4:	40310000 	.word	0x40310000
 8003de8:	20000104 	.word	0x20000104
 8003dec:	41500000 	.word	0x41500000
 8003df0:	200000a4 	.word	0x200000a4
    {
        delta_E[i] = sqrt( (WUV_r[i][0] - WUV_k[i][0]) * (WUV_r[i][0] - WUV_k[i][0]) +
 8003df4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003df8:	f103 0306 	add.w	r3, r3, #6
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	49a4      	ldr	r1, [pc, #656]	; (8004090 <Calcute_Ra+0x2b20>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003e10:	f103 0306 	add.w	r3, r3, #6
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	499f      	ldr	r1, [pc, #636]	; (8004094 <Calcute_Ra+0x2b24>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4619      	mov	r1, r3
 8003e26:	f7fc febf 	bl	8000ba8 <__aeabi_fsub>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461c      	mov	r4, r3
 8003e2e:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003e32:	f103 0306 	add.w	r3, r3, #6
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	4995      	ldr	r1, [pc, #596]	; (8004090 <Calcute_Ra+0x2b20>)
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003e4a:	f103 0306 	add.w	r3, r3, #6
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	4990      	ldr	r1, [pc, #576]	; (8004094 <Calcute_Ra+0x2b24>)
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7fc fea2 	bl	8000ba8 <__aeabi_fsub>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4619      	mov	r1, r3
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7fc ffa7 	bl	8000dbc <__aeabi_fmul>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461c      	mov	r4, r3
			   (WUV_r[i][1] - WUV_k[i][1]) * (WUV_r[i][1] - WUV_k[i][1]) +
 8003e72:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003e76:	f103 0306 	add.w	r3, r3, #6
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	4984      	ldr	r1, [pc, #528]	; (8004090 <Calcute_Ra+0x2b20>)
 8003e7e:	4613      	mov	r3, r2
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3304      	adds	r3, #4
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003e90:	f103 0306 	add.w	r3, r3, #6
 8003e94:	781a      	ldrb	r2, [r3, #0]
 8003e96:	497f      	ldr	r1, [pc, #508]	; (8004094 <Calcute_Ra+0x2b24>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f7fc fe7e 	bl	8000ba8 <__aeabi_fsub>
 8003eac:	4603      	mov	r3, r0
 8003eae:	461d      	mov	r5, r3
 8003eb0:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003eb4:	f103 0306 	add.w	r3, r3, #6
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	4975      	ldr	r1, [pc, #468]	; (8004090 <Calcute_Ra+0x2b20>)
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003ece:	f103 0306 	add.w	r3, r3, #6
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	496f      	ldr	r1, [pc, #444]	; (8004094 <Calcute_Ra+0x2b24>)
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f7fc fe5f 	bl	8000ba8 <__aeabi_fsub>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4619      	mov	r1, r3
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f7fc ff64 	bl	8000dbc <__aeabi_fmul>
 8003ef4:	4603      	mov	r3, r0
        delta_E[i] = sqrt( (WUV_r[i][0] - WUV_k[i][0]) * (WUV_r[i][0] - WUV_k[i][0]) +
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f7fc fe57 	bl	8000bac <__addsf3>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461c      	mov	r4, r3
			   (WUV_r[i][2] - WUV_k[i][2]) * (WUV_r[i][0] - WUV_k[i][2]) );
 8003f02:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003f06:	f103 0306 	add.w	r3, r3, #6
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	4960      	ldr	r1, [pc, #384]	; (8004090 <Calcute_Ra+0x2b20>)
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3308      	adds	r3, #8
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003f20:	f103 0306 	add.w	r3, r3, #6
 8003f24:	781a      	ldrb	r2, [r3, #0]
 8003f26:	495b      	ldr	r1, [pc, #364]	; (8004094 <Calcute_Ra+0x2b24>)
 8003f28:	4613      	mov	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3308      	adds	r3, #8
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4619      	mov	r1, r3
 8003f38:	f7fc fe36 	bl	8000ba8 <__aeabi_fsub>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461d      	mov	r5, r3
 8003f40:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003f44:	f103 0306 	add.w	r3, r3, #6
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	4951      	ldr	r1, [pc, #324]	; (8004090 <Calcute_Ra+0x2b20>)
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003f5c:	f103 0306 	add.w	r3, r3, #6
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	494c      	ldr	r1, [pc, #304]	; (8004094 <Calcute_Ra+0x2b24>)
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	3308      	adds	r3, #8
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	f7fc fe18 	bl	8000ba8 <__aeabi_fsub>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7fc ff1d 	bl	8000dbc <__aeabi_fmul>
 8003f82:	4603      	mov	r3, r0
			   (WUV_r[i][1] - WUV_k[i][1]) * (WUV_r[i][1] - WUV_k[i][1]) +
 8003f84:	4619      	mov	r1, r3
 8003f86:	4620      	mov	r0, r4
 8003f88:	f7fc fe10 	bl	8000bac <__addsf3>
 8003f8c:	4603      	mov	r3, r0
        delta_E[i] = sqrt( (WUV_r[i][0] - WUV_k[i][0]) * (WUV_r[i][0] - WUV_k[i][0]) +
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc faae 	bl	80004f0 <__aeabi_f2d>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	f005 f80a 	bl	8008fb4 <sqrt>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8003fa8:	f101 0106 	add.w	r1, r1, #6
 8003fac:	780c      	ldrb	r4, [r1, #0]
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	f7fc fda5 	bl	8000b00 <__aeabi_d2f>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003fbc:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 8003fc0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        sum_Ri += (100 - 4.6 * delta_E[i]);
 8003fc4:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8003fc8:	f103 0306 	add.w	r3, r3, #6
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003fd2:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 8003fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fa88 	bl	80004f0 <__aeabi_f2d>
 8003fe0:	a329      	add	r3, pc, #164	; (adr r3, 8004088 <Calcute_Ra+0x2b18>)
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f7fc fadb 	bl	80005a0 <__aeabi_dmul>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	4929      	ldr	r1, [pc, #164]	; (8004098 <Calcute_Ra+0x2b28>)
 8003ff4:	f7fc f91c 	bl	8000230 <__aeabi_dsub>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8004000:	f101 0118 	add.w	r1, r1, #24
 8004004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004008:	f7fc f914 	bl	8000234 <__adddf3>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 8004014:	f101 0118 	add.w	r1, r1, #24
 8004018:	e9c1 2300 	strd	r2, r3, [r1]
    for(uint8_t i = 0; i < 8; i++)
 800401c:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8004020:	f103 0306 	add.w	r3, r3, #6
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	f507 52d5 	add.w	r2, r7, #6816	; 0x1aa0
 800402c:	f102 0206 	add.w	r2, r2, #6
 8004030:	7013      	strb	r3, [r2, #0]
 8004032:	f507 53d5 	add.w	r3, r7, #6816	; 0x1aa0
 8004036:	f103 0306 	add.w	r3, r3, #6
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b07      	cmp	r3, #7
 800403e:	f67f aed9 	bls.w	8003df4 <Calcute_Ra+0x2884>
    }

    /*finally, gain Ra*/
    handle->Ra = sum_Ri / 8;
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <Calcute_Ra+0x2b2c>)
 8004048:	f507 51d5 	add.w	r1, r7, #6816	; 0x1aa0
 800404c:	f101 0118 	add.w	r1, r1, #24
 8004050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004054:	f7fc fbce 	bl	80007f4 <__aeabi_ddiv>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	f7fc fd4e 	bl	8000b00 <__aeabi_d2f>
 8004064:	4602      	mov	r2, r0
 8004066:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 800406a:	f6a3 23bc 	subw	r3, r3, #2748	; 0xabc
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    return 0;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	f507 57d6 	add.w	r7, r7, #6848	; 0x1ac0
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004082:	bf00      	nop
 8004084:	f3af 8000 	nop.w
 8004088:	66666666 	.word	0x66666666
 800408c:	40126666 	.word	0x40126666
 8004090:	20000104 	.word	0x20000104
 8004094:	200000a4 	.word	0x200000a4
 8004098:	40590000 	.word	0x40590000
 800409c:	40200000 	.word	0x40200000

080040a0 <My_Getdata_test>:

void My_Getdata_test(light_t *handle)
{   
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6178      	str	r0, [r7, #20]
	AS7341_ControlLed(true,10);
 80040a8:	210a      	movs	r1, #10
 80040aa:	2001      	movs	r0, #1
 80040ac:	f001 f85d 	bl	800516a <AS7341_ControlLed>
    AS7341_startMeasure(eF1F4ClearNIR);
 80040b0:	2000      	movs	r0, #0
 80040b2:	f000 feb5 	bl	8004e20 <AS7341_startMeasure>
    *(handle->pdata1) = AS7341_ReadSpectralDataOne();
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	681c      	ldr	r4, [r3, #0]
 80040ba:	463b      	mov	r3, r7
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 ff44 	bl	8004f4a <AS7341_ReadSpectralDataOne>
 80040c2:	4622      	mov	r2, r4
 80040c4:	463b      	mov	r3, r7
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	6010      	str	r0, [r2, #0]
 80040ce:	6051      	str	r1, [r2, #4]
 80040d0:	6093      	str	r3, [r2, #8]
    printf("channel1(405-425nm):\r\n");
 80040d2:	48a9      	ldr	r0, [pc, #676]	; (8004378 <My_Getdata_test+0x2d8>)
 80040d4:	f003 feb4 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata1->channel1);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	4619      	mov	r1, r3
 80040e0:	48a6      	ldr	r0, [pc, #664]	; (800437c <My_Getdata_test+0x2dc>)
 80040e2:	f003 fe27 	bl	8007d34 <iprintf>
    printf("channel2(435-455nm):\r\n");
 80040e6:	48a6      	ldr	r0, [pc, #664]	; (8004380 <My_Getdata_test+0x2e0>)
 80040e8:	f003 feaa 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata1->channel2);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	885b      	ldrh	r3, [r3, #2]
 80040f2:	4619      	mov	r1, r3
 80040f4:	48a1      	ldr	r0, [pc, #644]	; (800437c <My_Getdata_test+0x2dc>)
 80040f6:	f003 fe1d 	bl	8007d34 <iprintf>
    printf("channel3(470-490nm):\r\n");
 80040fa:	48a2      	ldr	r0, [pc, #648]	; (8004384 <My_Getdata_test+0x2e4>)
 80040fc:	f003 fea0 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata1->channel3);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	889b      	ldrh	r3, [r3, #4]
 8004106:	4619      	mov	r1, r3
 8004108:	489c      	ldr	r0, [pc, #624]	; (800437c <My_Getdata_test+0x2dc>)
 800410a:	f003 fe13 	bl	8007d34 <iprintf>
    printf("channel4(505-525nm):\r\n");   
 800410e:	489e      	ldr	r0, [pc, #632]	; (8004388 <My_Getdata_test+0x2e8>)
 8004110:	f003 fe96 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata1->channel4);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	88db      	ldrh	r3, [r3, #6]
 800411a:	4619      	mov	r1, r3
 800411c:	4897      	ldr	r0, [pc, #604]	; (800437c <My_Getdata_test+0x2dc>)
 800411e:	f003 fe09 	bl	8007d34 <iprintf>
    AS7341_startMeasure(eF5F8ClearNIR);
 8004122:	2001      	movs	r0, #1
 8004124:	f000 fe7c 	bl	8004e20 <AS7341_startMeasure>
    *(handle->pdata2) =AS7341_ReadSpectralDataTwo();
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	685c      	ldr	r4, [r3, #4]
 800412c:	463b      	mov	r3, r7
 800412e:	4618      	mov	r0, r3
 8004130:	f000 ff39 	bl	8004fa6 <AS7341_ReadSpectralDataTwo>
 8004134:	4622      	mov	r2, r4
 8004136:	463b      	mov	r3, r7
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	6010      	str	r0, [r2, #0]
 8004140:	6051      	str	r1, [r2, #4]
 8004142:	6093      	str	r3, [r2, #8]
    printf("channel5(545-565nm):\r\n");
 8004144:	4891      	ldr	r0, [pc, #580]	; (800438c <My_Getdata_test+0x2ec>)
 8004146:	f003 fe7b 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata2->channel5);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	4619      	mov	r1, r3
 8004152:	488a      	ldr	r0, [pc, #552]	; (800437c <My_Getdata_test+0x2dc>)
 8004154:	f003 fdee 	bl	8007d34 <iprintf>
    printf("channel6(580-600nm):\r\n");
 8004158:	488d      	ldr	r0, [pc, #564]	; (8004390 <My_Getdata_test+0x2f0>)
 800415a:	f003 fe71 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata2->channel6);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	885b      	ldrh	r3, [r3, #2]
 8004164:	4619      	mov	r1, r3
 8004166:	4885      	ldr	r0, [pc, #532]	; (800437c <My_Getdata_test+0x2dc>)
 8004168:	f003 fde4 	bl	8007d34 <iprintf>
    printf("channel7(620-640nm):\r\n");
 800416c:	4889      	ldr	r0, [pc, #548]	; (8004394 <My_Getdata_test+0x2f4>)
 800416e:	f003 fe67 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata2->channel7);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	889b      	ldrh	r3, [r3, #4]
 8004178:	4619      	mov	r1, r3
 800417a:	4880      	ldr	r0, [pc, #512]	; (800437c <My_Getdata_test+0x2dc>)
 800417c:	f003 fdda 	bl	8007d34 <iprintf>
    printf("channel8(670-690nm):\r\n");
 8004180:	4885      	ldr	r0, [pc, #532]	; (8004398 <My_Getdata_test+0x2f8>)
 8004182:	f003 fe5d 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata2->channel8);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	88db      	ldrh	r3, [r3, #6]
 800418c:	4619      	mov	r1, r3
 800418e:	487b      	ldr	r0, [pc, #492]	; (800437c <My_Getdata_test+0x2dc>)
 8004190:	f003 fdd0 	bl	8007d34 <iprintf>
    printf("Clear:\r\n");
 8004194:	4881      	ldr	r0, [pc, #516]	; (800439c <My_Getdata_test+0x2fc>)
 8004196:	f003 fe53 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata2->CLEAR);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	891b      	ldrh	r3, [r3, #8]
 80041a0:	4619      	mov	r1, r3
 80041a2:	4876      	ldr	r0, [pc, #472]	; (800437c <My_Getdata_test+0x2dc>)
 80041a4:	f003 fdc6 	bl	8007d34 <iprintf>
    printf("NIR:\r\n");
 80041a8:	487d      	ldr	r0, [pc, #500]	; (80043a0 <My_Getdata_test+0x300>)
 80041aa:	f003 fe49 	bl	8007e40 <puts>
    printf("%d\r\n",handle->pdata2->NIR);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	895b      	ldrh	r3, [r3, #10]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4871      	ldr	r0, [pc, #452]	; (800437c <My_Getdata_test+0x2dc>)
 80041b8:	f003 fdbc 	bl	8007d34 <iprintf>
    printf("--------------------------\r\n");
 80041bc:	4879      	ldr	r0, [pc, #484]	; (80043a4 <My_Getdata_test+0x304>)
 80041be:	f003 fe3f 	bl	8007e40 <puts>
    DEV_Delay_ms(500);
 80041c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041c6:	f001 f82b 	bl	8005220 <DEV_Delay_ms>
    handle->light_attrs.spectral[0] = (handle->pdata1->channel1) / (ITIME * GAIN);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f97b 	bl	80004cc <__aeabi_i2d>
 80041d6:	a366      	add	r3, pc, #408	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc fb0a 	bl	80007f4 <__aeabi_ddiv>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	f7fc fc8a 	bl	8000b00 <__aeabi_d2f>
 80041ec:	4602      	mov	r2, r0
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	60da      	str	r2, [r3, #12]
    handle->light_attrs.spectral[1] = (handle->pdata1->channel2) / (ITIME * GAIN);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	885b      	ldrh	r3, [r3, #2]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fc f967 	bl	80004cc <__aeabi_i2d>
 80041fe:	a35c      	add	r3, pc, #368	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	f7fc faf6 	bl	80007f4 <__aeabi_ddiv>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f7fc fc76 	bl	8000b00 <__aeabi_d2f>
 8004214:	4602      	mov	r2, r0
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	611a      	str	r2, [r3, #16]
    handle->light_attrs.spectral[2] = (handle->pdata1->channel3) / (ITIME * GAIN);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	889b      	ldrh	r3, [r3, #4]
 8004220:	4618      	mov	r0, r3
 8004222:	f7fc f953 	bl	80004cc <__aeabi_i2d>
 8004226:	a352      	add	r3, pc, #328	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f7fc fae2 	bl	80007f4 <__aeabi_ddiv>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4610      	mov	r0, r2
 8004236:	4619      	mov	r1, r3
 8004238:	f7fc fc62 	bl	8000b00 <__aeabi_d2f>
 800423c:	4602      	mov	r2, r0
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	615a      	str	r2, [r3, #20]
    handle->light_attrs.spectral[3] = (handle->pdata1->channel4) / (ITIME * GAIN);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	88db      	ldrh	r3, [r3, #6]
 8004248:	4618      	mov	r0, r3
 800424a:	f7fc f93f 	bl	80004cc <__aeabi_i2d>
 800424e:	a348      	add	r3, pc, #288	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f7fc face 	bl	80007f4 <__aeabi_ddiv>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	f7fc fc4e 	bl	8000b00 <__aeabi_d2f>
 8004264:	4602      	mov	r2, r0
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	619a      	str	r2, [r3, #24]
    handle->light_attrs.spectral[4] = (handle->pdata2->channel5) / (ITIME * GAIN);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fc f92b 	bl	80004cc <__aeabi_i2d>
 8004276:	a33e      	add	r3, pc, #248	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f7fc faba 	bl	80007f4 <__aeabi_ddiv>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4610      	mov	r0, r2
 8004286:	4619      	mov	r1, r3
 8004288:	f7fc fc3a 	bl	8000b00 <__aeabi_d2f>
 800428c:	4602      	mov	r2, r0
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	61da      	str	r2, [r3, #28]
    handle->light_attrs.spectral[5] = (handle->pdata2->channel6) / (ITIME * GAIN);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	885b      	ldrh	r3, [r3, #2]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc f917 	bl	80004cc <__aeabi_i2d>
 800429e:	a334      	add	r3, pc, #208	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f7fc faa6 	bl	80007f4 <__aeabi_ddiv>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	f7fc fc26 	bl	8000b00 <__aeabi_d2f>
 80042b4:	4602      	mov	r2, r0
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	621a      	str	r2, [r3, #32]
    handle->light_attrs.spectral[6] = (handle->pdata2->channel7) / (ITIME * GAIN);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	889b      	ldrh	r3, [r3, #4]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc f903 	bl	80004cc <__aeabi_i2d>
 80042c6:	a32a      	add	r3, pc, #168	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fc fa92 	bl	80007f4 <__aeabi_ddiv>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4610      	mov	r0, r2
 80042d6:	4619      	mov	r1, r3
 80042d8:	f7fc fc12 	bl	8000b00 <__aeabi_d2f>
 80042dc:	4602      	mov	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
    handle->light_attrs.spectral[7] = (handle->pdata2->channel8) / (ITIME * GAIN);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	88db      	ldrh	r3, [r3, #6]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fc f8ef 	bl	80004cc <__aeabi_i2d>
 80042ee:	a320      	add	r3, pc, #128	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f7fc fa7e 	bl	80007f4 <__aeabi_ddiv>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4610      	mov	r0, r2
 80042fe:	4619      	mov	r1, r3
 8004300:	f7fc fbfe 	bl	8000b00 <__aeabi_d2f>
 8004304:	4602      	mov	r2, r0
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	629a      	str	r2, [r3, #40]	; 0x28
    handle->light_attrs.spectral[8] = (handle->pdata1->CLEAR) / (ITIME * GAIN);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	891b      	ldrh	r3, [r3, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fc f8db 	bl	80004cc <__aeabi_i2d>
 8004316:	a316      	add	r3, pc, #88	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	f7fc fa6a 	bl	80007f4 <__aeabi_ddiv>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	f7fc fbea 	bl	8000b00 <__aeabi_d2f>
 800432c:	4602      	mov	r2, r0
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c
    handle->light_attrs.spectral[9] = (handle->pdata1->NIR) / (ITIME * GAIN);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	895b      	ldrh	r3, [r3, #10]
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc f8c7 	bl	80004cc <__aeabi_i2d>
 800433e:	a30c      	add	r3, pc, #48	; (adr r3, 8004370 <My_Getdata_test+0x2d0>)
 8004340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004344:	f7fc fa56 	bl	80007f4 <__aeabi_ddiv>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f7fc fbd6 	bl	8000b00 <__aeabi_d2f>
 8004354:	4602      	mov	r2, r0
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	631a      	str	r2, [r3, #48]	; 0x30

    Make_Spectral_Standard(&(handle->light_attrs));
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3308      	adds	r3, #8
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc ff12 	bl	8001188 <Make_Spectral_Standard>
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd90      	pop	{r4, r7, pc}
 800436c:	f3af 8000 	nop.w
 8004370:	22a6f3f5 	.word	0x22a6f3f5
 8004374:	3fd6c615 	.word	0x3fd6c615
 8004378:	08009d10 	.word	0x08009d10
 800437c:	08009d28 	.word	0x08009d28
 8004380:	08009d30 	.word	0x08009d30
 8004384:	08009d48 	.word	0x08009d48
 8004388:	08009d60 	.word	0x08009d60
 800438c:	08009d78 	.word	0x08009d78
 8004390:	08009d90 	.word	0x08009d90
 8004394:	08009da8 	.word	0x08009da8
 8004398:	08009dc0 	.word	0x08009dc0
 800439c:	08009dd8 	.word	0x08009dd8
 80043a0:	08009de0 	.word	0x08009de0
 80043a4:	08009de8 	.word	0x08009de8

080043a8 <Device_Init>:

void Device_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
    AS7341_Init(eSpm);
 80043ac:	2000      	movs	r0, #0
 80043ae:	f000 fbdd 	bl	8004b6c <AS7341_Init>
	AS7341_ATIME_config(ATIME);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f000 fe46 	bl	8005044 <AS7341_ATIME_config>
	AS7341_ASTEP_config(ASTEP);
 80043b8:	f240 30e7 	movw	r0, #999	; 0x3e7
 80043bc:	f000 fe50 	bl	8005060 <AS7341_ASTEP_config>
	AS7341_AGAIN_config(AGAIN);
 80043c0:	2007      	movs	r0, #7
 80043c2:	f000 fe66 	bl	8005092 <AS7341_AGAIN_config>
	AS7341_ReadITIME();
 80043c6:	f000 ff03 	bl	80051d0 <AS7341_ReadITIME>
	AS7341_EnableLED(false);// LED Enable
 80043ca:	2000      	movs	r0, #0
 80043cc:	f000 fe74 	bl	80050b8 <AS7341_EnableLED>
    AS7341_ControlLed(true,10);//Turn on or off the LED and set the brightness of the LED
 80043d0:	210a      	movs	r1, #10
 80043d2:	2001      	movs	r0, #1
 80043d4:	f000 fec9 	bl	800516a <AS7341_ControlLed>
	
}
 80043d8:	bf00      	nop
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	0000      	movs	r0, r0
	...

080043e0 <TemCalculate>:

UWORD TemCalculate(light_t *handle)
{
 80043e0:	b5b0      	push	{r4, r5, r7, lr}
 80043e2:	b08a      	sub	sp, #40	; 0x28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	float X = 0,
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
		Y = 0,
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	623b      	str	r3, [r7, #32]
		Z = 0,
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
		x = 0,
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	61bb      	str	r3, [r7, #24]
		y = 0,
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
		n = 0,
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
		cdc = 0;
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]

	X = 0.39814*handle->pdata1->channel1 + 1.29540*handle->pdata1->channel2 + 0.36956*handle->pdata1->channel3 + 0.10902*handle->pdata1->channel4 +
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f7fc f857 	bl	80004cc <__aeabi_i2d>
 800441e:	a3d0      	add	r3, pc, #832	; (adr r3, 8004760 <TemCalculate+0x380>)
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f7fc f8bc 	bl	80005a0 <__aeabi_dmul>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4614      	mov	r4, r2
 800442e:	461d      	mov	r5, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	885b      	ldrh	r3, [r3, #2]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc f848 	bl	80004cc <__aeabi_i2d>
 800443c:	a3ca      	add	r3, pc, #808	; (adr r3, 8004768 <TemCalculate+0x388>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fc f8ad 	bl	80005a0 <__aeabi_dmul>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4620      	mov	r0, r4
 800444c:	4629      	mov	r1, r5
 800444e:	f7fb fef1 	bl	8000234 <__adddf3>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4614      	mov	r4, r2
 8004458:	461d      	mov	r5, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	889b      	ldrh	r3, [r3, #4]
 8004460:	4618      	mov	r0, r3
 8004462:	f7fc f833 	bl	80004cc <__aeabi_i2d>
 8004466:	a3c2      	add	r3, pc, #776	; (adr r3, 8004770 <TemCalculate+0x390>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f7fc f898 	bl	80005a0 <__aeabi_dmul>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4620      	mov	r0, r4
 8004476:	4629      	mov	r1, r5
 8004478:	f7fb fedc 	bl	8000234 <__adddf3>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4614      	mov	r4, r2
 8004482:	461d      	mov	r5, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	88db      	ldrh	r3, [r3, #6]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc f81e 	bl	80004cc <__aeabi_i2d>
 8004490:	a3b9      	add	r3, pc, #740	; (adr r3, 8004778 <TemCalculate+0x398>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f7fc f883 	bl	80005a0 <__aeabi_dmul>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4620      	mov	r0, r4
 80044a0:	4629      	mov	r1, r5
 80044a2:	f7fb fec7 	bl	8000234 <__adddf3>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4614      	mov	r4, r2
 80044ac:	461d      	mov	r5, r3
			0.71942*handle->pdata2->channel5 + 1.78180*handle->pdata2->channel6 + 1.10110*handle->pdata2->channel7 - 0.03991*handle->pdata2->channel8 -
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fc f809 	bl	80004cc <__aeabi_i2d>
 80044ba:	a3b1      	add	r3, pc, #708	; (adr r3, 8004780 <TemCalculate+0x3a0>)
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	f7fc f86e 	bl	80005a0 <__aeabi_dmul>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
	X = 0.39814*handle->pdata1->channel1 + 1.29540*handle->pdata1->channel2 + 0.36956*handle->pdata1->channel3 + 0.10902*handle->pdata1->channel4 +
 80044c8:	4620      	mov	r0, r4
 80044ca:	4629      	mov	r1, r5
 80044cc:	f7fb feb2 	bl	8000234 <__adddf3>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4614      	mov	r4, r2
 80044d6:	461d      	mov	r5, r3
			0.71942*handle->pdata2->channel5 + 1.78180*handle->pdata2->channel6 + 1.10110*handle->pdata2->channel7 - 0.03991*handle->pdata2->channel8 -
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	885b      	ldrh	r3, [r3, #2]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb fff4 	bl	80004cc <__aeabi_i2d>
 80044e4:	a3a8      	add	r3, pc, #672	; (adr r3, 8004788 <TemCalculate+0x3a8>)
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f7fc f859 	bl	80005a0 <__aeabi_dmul>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4620      	mov	r0, r4
 80044f4:	4629      	mov	r1, r5
 80044f6:	f7fb fe9d 	bl	8000234 <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4614      	mov	r4, r2
 8004500:	461d      	mov	r5, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	889b      	ldrh	r3, [r3, #4]
 8004508:	4618      	mov	r0, r3
 800450a:	f7fb ffdf 	bl	80004cc <__aeabi_i2d>
 800450e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004790 <TemCalculate+0x3b0>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fc f844 	bl	80005a0 <__aeabi_dmul>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4620      	mov	r0, r4
 800451e:	4629      	mov	r1, r5
 8004520:	f7fb fe88 	bl	8000234 <__adddf3>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4614      	mov	r4, r2
 800452a:	461d      	mov	r5, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	88db      	ldrh	r3, [r3, #6]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fb ffca 	bl	80004cc <__aeabi_i2d>
 8004538:	a397      	add	r3, pc, #604	; (adr r3, 8004798 <TemCalculate+0x3b8>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f7fc f82f 	bl	80005a0 <__aeabi_dmul>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4620      	mov	r0, r4
 8004548:	4629      	mov	r1, r5
 800454a:	f7fb fe71 	bl	8000230 <__aeabi_dsub>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4614      	mov	r4, r2
 8004554:	461d      	mov	r5, r3
			0.27597*handle->pdata2->CLEAR - 0.02347*handle->pdata2->NIR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	891b      	ldrh	r3, [r3, #8]
 800455c:	4618      	mov	r0, r3
 800455e:	f7fb ffb5 	bl	80004cc <__aeabi_i2d>
 8004562:	a38f      	add	r3, pc, #572	; (adr r3, 80047a0 <TemCalculate+0x3c0>)
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f7fc f81a 	bl	80005a0 <__aeabi_dmul>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
			0.71942*handle->pdata2->channel5 + 1.78180*handle->pdata2->channel6 + 1.10110*handle->pdata2->channel7 - 0.03991*handle->pdata2->channel8 -
 8004570:	4620      	mov	r0, r4
 8004572:	4629      	mov	r1, r5
 8004574:	f7fb fe5c 	bl	8000230 <__aeabi_dsub>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4614      	mov	r4, r2
 800457e:	461d      	mov	r5, r3
			0.27597*handle->pdata2->CLEAR - 0.02347*handle->pdata2->NIR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	895b      	ldrh	r3, [r3, #10]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fb ffa0 	bl	80004cc <__aeabi_i2d>
 800458c:	a386      	add	r3, pc, #536	; (adr r3, 80047a8 <TemCalculate+0x3c8>)
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f7fc f805 	bl	80005a0 <__aeabi_dmul>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4620      	mov	r0, r4
 800459c:	4629      	mov	r1, r5
 800459e:	f7fb fe47 	bl	8000230 <__aeabi_dsub>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
	X = 0.39814*handle->pdata1->channel1 + 1.29540*handle->pdata1->channel2 + 0.36956*handle->pdata1->channel3 + 0.10902*handle->pdata1->channel4 +
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	f7fc faa9 	bl	8000b00 <__aeabi_d2f>
 80045ae:	4603      	mov	r3, r0
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
	Y = 0.01396*handle->pdata1->channel1 + 0.16748*handle->pdata1->channel2 + 0.23538*handle->pdata1->channel3 + 1.42750*handle->pdata1->channel4 +
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fb ff87 	bl	80004cc <__aeabi_i2d>
 80045be:	a37c      	add	r3, pc, #496	; (adr r3, 80047b0 <TemCalculate+0x3d0>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f7fb ffec 	bl	80005a0 <__aeabi_dmul>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	885b      	ldrh	r3, [r3, #2]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb ff78 	bl	80004cc <__aeabi_i2d>
 80045dc:	a376      	add	r3, pc, #472	; (adr r3, 80047b8 <TemCalculate+0x3d8>)
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f7fb ffdd 	bl	80005a0 <__aeabi_dmul>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4620      	mov	r0, r4
 80045ec:	4629      	mov	r1, r5
 80045ee:	f7fb fe21 	bl	8000234 <__adddf3>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4614      	mov	r4, r2
 80045f8:	461d      	mov	r5, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	889b      	ldrh	r3, [r3, #4]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ff63 	bl	80004cc <__aeabi_i2d>
 8004606:	a36e      	add	r3, pc, #440	; (adr r3, 80047c0 <TemCalculate+0x3e0>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	f7fb ffc8 	bl	80005a0 <__aeabi_dmul>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4620      	mov	r0, r4
 8004616:	4629      	mov	r1, r5
 8004618:	f7fb fe0c 	bl	8000234 <__adddf3>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4614      	mov	r4, r2
 8004622:	461d      	mov	r5, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	88db      	ldrh	r3, [r3, #6]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fb ff4e 	bl	80004cc <__aeabi_i2d>
 8004630:	a365      	add	r3, pc, #404	; (adr r3, 80047c8 <TemCalculate+0x3e8>)
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f7fb ffb3 	bl	80005a0 <__aeabi_dmul>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4620      	mov	r0, r4
 8004640:	4629      	mov	r1, r5
 8004642:	f7fb fdf7 	bl	8000234 <__adddf3>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4614      	mov	r4, r2
 800464c:	461d      	mov	r5, r3
				1.88670*handle->pdata2->channel5 + 1.14200*handle->pdata2->channel6 + 0.46497*handle->pdata2->channel7 - 0.02702*handle->pdata2->channel8 -
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7fb ff39 	bl	80004cc <__aeabi_i2d>
 800465a:	a35d      	add	r3, pc, #372	; (adr r3, 80047d0 <TemCalculate+0x3f0>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb ff9e 	bl	80005a0 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
	Y = 0.01396*handle->pdata1->channel1 + 0.16748*handle->pdata1->channel2 + 0.23538*handle->pdata1->channel3 + 1.42750*handle->pdata1->channel4 +
 8004668:	4620      	mov	r0, r4
 800466a:	4629      	mov	r1, r5
 800466c:	f7fb fde2 	bl	8000234 <__adddf3>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4614      	mov	r4, r2
 8004676:	461d      	mov	r5, r3
				1.88670*handle->pdata2->channel5 + 1.14200*handle->pdata2->channel6 + 0.46497*handle->pdata2->channel7 - 0.02702*handle->pdata2->channel8 -
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	885b      	ldrh	r3, [r3, #2]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fb ff24 	bl	80004cc <__aeabi_i2d>
 8004684:	a354      	add	r3, pc, #336	; (adr r3, 80047d8 <TemCalculate+0x3f8>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f7fb ff89 	bl	80005a0 <__aeabi_dmul>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4620      	mov	r0, r4
 8004694:	4629      	mov	r1, r5
 8004696:	f7fb fdcd 	bl	8000234 <__adddf3>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4614      	mov	r4, r2
 80046a0:	461d      	mov	r5, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	889b      	ldrh	r3, [r3, #4]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fb ff0f 	bl	80004cc <__aeabi_i2d>
 80046ae:	a34c      	add	r3, pc, #304	; (adr r3, 80047e0 <TemCalculate+0x400>)
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f7fb ff74 	bl	80005a0 <__aeabi_dmul>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4620      	mov	r0, r4
 80046be:	4629      	mov	r1, r5
 80046c0:	f7fb fdb8 	bl	8000234 <__adddf3>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4614      	mov	r4, r2
 80046ca:	461d      	mov	r5, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	88db      	ldrh	r3, [r3, #6]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb fefa 	bl	80004cc <__aeabi_i2d>
 80046d8:	a343      	add	r3, pc, #268	; (adr r3, 80047e8 <TemCalculate+0x408>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fb ff5f 	bl	80005a0 <__aeabi_dmul>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4620      	mov	r0, r4
 80046e8:	4629      	mov	r1, r5
 80046ea:	f7fb fda1 	bl	8000230 <__aeabi_dsub>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4614      	mov	r4, r2
 80046f4:	461d      	mov	r5, r3
				0.24468*handle->pdata2->CLEAR - 0.01993*handle->pdata2->NIR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	891b      	ldrh	r3, [r3, #8]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fb fee5 	bl	80004cc <__aeabi_i2d>
 8004702:	a33b      	add	r3, pc, #236	; (adr r3, 80047f0 <TemCalculate+0x410>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f7fb ff4a 	bl	80005a0 <__aeabi_dmul>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
				1.88670*handle->pdata2->channel5 + 1.14200*handle->pdata2->channel6 + 0.46497*handle->pdata2->channel7 - 0.02702*handle->pdata2->channel8 -
 8004710:	4620      	mov	r0, r4
 8004712:	4629      	mov	r1, r5
 8004714:	f7fb fd8c 	bl	8000230 <__aeabi_dsub>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4614      	mov	r4, r2
 800471e:	461d      	mov	r5, r3
				0.24468*handle->pdata2->CLEAR - 0.01993*handle->pdata2->NIR;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	895b      	ldrh	r3, [r3, #10]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fb fed0 	bl	80004cc <__aeabi_i2d>
 800472c:	a332      	add	r3, pc, #200	; (adr r3, 80047f8 <TemCalculate+0x418>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb ff35 	bl	80005a0 <__aeabi_dmul>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4620      	mov	r0, r4
 800473c:	4629      	mov	r1, r5
 800473e:	f7fb fd77 	bl	8000230 <__aeabi_dsub>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
	Y = 0.01396*handle->pdata1->channel1 + 0.16748*handle->pdata1->channel2 + 0.23538*handle->pdata1->channel3 + 1.42750*handle->pdata1->channel4 +
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	f7fc f9d9 	bl	8000b00 <__aeabi_d2f>
 800474e:	4603      	mov	r3, r0
 8004750:	623b      	str	r3, [r7, #32]
	Z = 1.95010*handle->pdata1->channel1 + 6.45490*handle->pdata1->channel2 + 2.78010*handle->pdata1->channel3 + 0.18501*handle->pdata1->channel4 +
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb feb7 	bl	80004cc <__aeabi_i2d>
 800475e:	e04f      	b.n	8004800 <TemCalculate+0x420>
 8004760:	31ceaf25 	.word	0x31ceaf25
 8004764:	3fd97b20 	.word	0x3fd97b20
 8004768:	59b3d07d 	.word	0x59b3d07d
 800476c:	3ff4b9f5 	.word	0x3ff4b9f5
 8004770:	fc7a3982 	.word	0xfc7a3982
 8004774:	3fd7a6de 	.word	0x3fd7a6de
 8004778:	169c23b8 	.word	0x169c23b8
 800477c:	3fbbe8bc 	.word	0x3fbbe8bc
 8004780:	1782d384 	.word	0x1782d384
 8004784:	3fe7057d 	.word	0x3fe7057d
 8004788:	b780346e 	.word	0xb780346e
 800478c:	3ffc8240 	.word	0x3ffc8240
 8004790:	089a0275 	.word	0x089a0275
 8004794:	3ff19e1b 	.word	0x3ff19e1b
 8004798:	61911490 	.word	0x61911490
 800479c:	3fa46f15 	.word	0x3fa46f15
 80047a0:	132b55ef 	.word	0x132b55ef
 80047a4:	3fd1a97e 	.word	0x3fd1a97e
 80047a8:	09bf9c63 	.word	0x09bf9c63
 80047ac:	3f980885 	.word	0x3f980885
 80047b0:	7b9e0610 	.word	0x7b9e0610
 80047b4:	3f8c970f 	.word	0x3f8c970f
 80047b8:	115df655 	.word	0x115df655
 80047bc:	3fc56ffc 	.word	0x3fc56ffc
 80047c0:	8d10f51b 	.word	0x8d10f51b
 80047c4:	3fce20ee 	.word	0x3fce20ee
 80047c8:	3d70a3d7 	.word	0x3d70a3d7
 80047cc:	3ff6d70a 	.word	0x3ff6d70a
 80047d0:	56d5cfab 	.word	0x56d5cfab
 80047d4:	3ffe2fec 	.word	0x3ffe2fec
 80047d8:	cac08312 	.word	0xcac08312
 80047dc:	3ff245a1 	.word	0x3ff245a1
 80047e0:	87e7c06e 	.word	0x87e7c06e
 80047e4:	3fddc211 	.word	0x3fddc211
 80047e8:	815a07b3 	.word	0x815a07b3
 80047ec:	3f9bab21 	.word	0x3f9bab21
 80047f0:	9afe1da8 	.word	0x9afe1da8
 80047f4:	3fcf51ac 	.word	0x3fcf51ac
 80047f8:	a8d64d7f 	.word	0xa8d64d7f
 80047fc:	3f946887 	.word	0x3f946887
 8004800:	a3ad      	add	r3, pc, #692	; (adr r3, 8004ab8 <TemCalculate+0x6d8>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f7fb fecb 	bl	80005a0 <__aeabi_dmul>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4614      	mov	r4, r2
 8004810:	461d      	mov	r5, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	885b      	ldrh	r3, [r3, #2]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fb fe57 	bl	80004cc <__aeabi_i2d>
 800481e:	a3a8      	add	r3, pc, #672	; (adr r3, 8004ac0 <TemCalculate+0x6e0>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f7fb febc 	bl	80005a0 <__aeabi_dmul>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4620      	mov	r0, r4
 800482e:	4629      	mov	r1, r5
 8004830:	f7fb fd00 	bl	8000234 <__adddf3>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4614      	mov	r4, r2
 800483a:	461d      	mov	r5, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	889b      	ldrh	r3, [r3, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fb fe42 	bl	80004cc <__aeabi_i2d>
 8004848:	a39f      	add	r3, pc, #636	; (adr r3, 8004ac8 <TemCalculate+0x6e8>)
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f7fb fea7 	bl	80005a0 <__aeabi_dmul>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fb fceb 	bl	8000234 <__adddf3>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4614      	mov	r4, r2
 8004864:	461d      	mov	r5, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	88db      	ldrh	r3, [r3, #6]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fb fe2d 	bl	80004cc <__aeabi_i2d>
 8004872:	a397      	add	r3, pc, #604	; (adr r3, 8004ad0 <TemCalculate+0x6f0>)
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f7fb fe92 	bl	80005a0 <__aeabi_dmul>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4620      	mov	r0, r4
 8004882:	4629      	mov	r1, r5
 8004884:	f7fb fcd6 	bl	8000234 <__adddf3>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4614      	mov	r4, r2
 800488e:	461d      	mov	r5, r3
				0.15325*handle->pdata2->channel5 + 0.09539*handle->pdata2->channel6 + 0.10563*handle->pdata2->channel7 + 0.08866*handle->pdata2->channel8 -
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fb fe18 	bl	80004cc <__aeabi_i2d>
 800489c:	a38e      	add	r3, pc, #568	; (adr r3, 8004ad8 <TemCalculate+0x6f8>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fe7d 	bl	80005a0 <__aeabi_dmul>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
	Z = 1.95010*handle->pdata1->channel1 + 6.45490*handle->pdata1->channel2 + 2.78010*handle->pdata1->channel3 + 0.18501*handle->pdata1->channel4 +
 80048aa:	4620      	mov	r0, r4
 80048ac:	4629      	mov	r1, r5
 80048ae:	f7fb fcc1 	bl	8000234 <__adddf3>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4614      	mov	r4, r2
 80048b8:	461d      	mov	r5, r3
				0.15325*handle->pdata2->channel5 + 0.09539*handle->pdata2->channel6 + 0.10563*handle->pdata2->channel7 + 0.08866*handle->pdata2->channel8 -
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	885b      	ldrh	r3, [r3, #2]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fb fe03 	bl	80004cc <__aeabi_i2d>
 80048c6:	a386      	add	r3, pc, #536	; (adr r3, 8004ae0 <TemCalculate+0x700>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb fe68 	bl	80005a0 <__aeabi_dmul>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4620      	mov	r0, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	f7fb fcac 	bl	8000234 <__adddf3>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	889b      	ldrh	r3, [r3, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fb fdee 	bl	80004cc <__aeabi_i2d>
 80048f0:	a37d      	add	r3, pc, #500	; (adr r3, 8004ae8 <TemCalculate+0x708>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb fe53 	bl	80005a0 <__aeabi_dmul>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4620      	mov	r0, r4
 8004900:	4629      	mov	r1, r5
 8004902:	f7fb fc97 	bl	8000234 <__adddf3>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4614      	mov	r4, r2
 800490c:	461d      	mov	r5, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	88db      	ldrh	r3, [r3, #6]
 8004914:	4618      	mov	r0, r3
 8004916:	f7fb fdd9 	bl	80004cc <__aeabi_i2d>
 800491a:	a375      	add	r3, pc, #468	; (adr r3, 8004af0 <TemCalculate+0x710>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f7fb fe3e 	bl	80005a0 <__aeabi_dmul>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4620      	mov	r0, r4
 800492a:	4629      	mov	r1, r5
 800492c:	f7fb fc82 	bl	8000234 <__adddf3>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4614      	mov	r4, r2
 8004936:	461d      	mov	r5, r3
				0.61140*handle->pdata2->CLEAR - 0.00938*handle->pdata2->NIR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	891b      	ldrh	r3, [r3, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fb fdc4 	bl	80004cc <__aeabi_i2d>
 8004944:	a36c      	add	r3, pc, #432	; (adr r3, 8004af8 <TemCalculate+0x718>)
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	f7fb fe29 	bl	80005a0 <__aeabi_dmul>
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
				0.15325*handle->pdata2->channel5 + 0.09539*handle->pdata2->channel6 + 0.10563*handle->pdata2->channel7 + 0.08866*handle->pdata2->channel8 -
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fb fc6b 	bl	8000230 <__aeabi_dsub>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4614      	mov	r4, r2
 8004960:	461d      	mov	r5, r3
				0.61140*handle->pdata2->CLEAR - 0.00938*handle->pdata2->NIR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	895b      	ldrh	r3, [r3, #10]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fb fdaf 	bl	80004cc <__aeabi_i2d>
 800496e:	a364      	add	r3, pc, #400	; (adr r3, 8004b00 <TemCalculate+0x720>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f7fb fe14 	bl	80005a0 <__aeabi_dmul>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4620      	mov	r0, r4
 800497e:	4629      	mov	r1, r5
 8004980:	f7fb fc56 	bl	8000230 <__aeabi_dsub>
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
	Z = 1.95010*handle->pdata1->channel1 + 6.45490*handle->pdata1->channel2 + 2.78010*handle->pdata1->channel3 + 0.18501*handle->pdata1->channel4 +
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	f7fc f8b8 	bl	8000b00 <__aeabi_d2f>
 8004990:	4603      	mov	r3, r0
 8004992:	61fb      	str	r3, [r7, #28]

	if ((X+Y+Z) != 0)
 8004994:	6a39      	ldr	r1, [r7, #32]
 8004996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004998:	f7fc f908 	bl	8000bac <__addsf3>
 800499c:	4603      	mov	r3, r0
 800499e:	69f9      	ldr	r1, [r7, #28]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fc f903 	bl	8000bac <__addsf3>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f04f 0100 	mov.w	r1, #0
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fc fb99 	bl	80010e4 <__aeabi_fcmpeq>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d179      	bne.n	8004aac <TemCalculate+0x6cc>
	{
		x = X/(X+Y+Z);
 80049b8:	6a39      	ldr	r1, [r7, #32]
 80049ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049bc:	f7fc f8f6 	bl	8000bac <__addsf3>
 80049c0:	4603      	mov	r3, r0
 80049c2:	69f9      	ldr	r1, [r7, #28]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fc f8f1 	bl	8000bac <__addsf3>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4619      	mov	r1, r3
 80049ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049d0:	f7fc faa8 	bl	8000f24 <__aeabi_fdiv>
 80049d4:	4603      	mov	r3, r0
 80049d6:	61bb      	str	r3, [r7, #24]
		y = Y/(X+Y+Z);
 80049d8:	6a39      	ldr	r1, [r7, #32]
 80049da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049dc:	f7fc f8e6 	bl	8000bac <__addsf3>
 80049e0:	4603      	mov	r3, r0
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fc f8e1 	bl	8000bac <__addsf3>
 80049ea:	4603      	mov	r3, r0
 80049ec:	4619      	mov	r1, r3
 80049ee:	6a38      	ldr	r0, [r7, #32]
 80049f0:	f7fc fa98 	bl	8000f24 <__aeabi_fdiv>
 80049f4:	4603      	mov	r3, r0
 80049f6:	617b      	str	r3, [r7, #20]
	}
	else
		return 0;


	n = (x-0.3320)/(0.1858-y);
 80049f8:	69b8      	ldr	r0, [r7, #24]
 80049fa:	f7fb fd79 	bl	80004f0 <__aeabi_f2d>
 80049fe:	a342      	add	r3, pc, #264	; (adr r3, 8004b08 <TemCalculate+0x728>)
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f7fb fc14 	bl	8000230 <__aeabi_dsub>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	461d      	mov	r5, r3
 8004a10:	6978      	ldr	r0, [r7, #20]
 8004a12:	f7fb fd6d 	bl	80004f0 <__aeabi_f2d>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	a13d      	add	r1, pc, #244	; (adr r1, 8004b10 <TemCalculate+0x730>)
 8004a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a20:	f7fb fc06 	bl	8000230 <__aeabi_dsub>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4620      	mov	r0, r4
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f7fb fee2 	bl	80007f4 <__aeabi_ddiv>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f7fc f862 	bl	8000b00 <__aeabi_d2f>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	613b      	str	r3, [r7, #16]
	cdc = 437*n*n*n + 3601*n*n + 6831*n + 5517;
 8004a40:	4935      	ldr	r1, [pc, #212]	; (8004b18 <TemCalculate+0x738>)
 8004a42:	6938      	ldr	r0, [r7, #16]
 8004a44:	f7fc f9ba 	bl	8000dbc <__aeabi_fmul>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	6939      	ldr	r1, [r7, #16]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fc f9b5 	bl	8000dbc <__aeabi_fmul>
 8004a52:	4603      	mov	r3, r0
 8004a54:	6939      	ldr	r1, [r7, #16]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fc f9b0 	bl	8000dbc <__aeabi_fmul>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	461c      	mov	r4, r3
 8004a60:	492e      	ldr	r1, [pc, #184]	; (8004b1c <TemCalculate+0x73c>)
 8004a62:	6938      	ldr	r0, [r7, #16]
 8004a64:	f7fc f9aa 	bl	8000dbc <__aeabi_fmul>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	6939      	ldr	r1, [r7, #16]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fc f9a5 	bl	8000dbc <__aeabi_fmul>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4619      	mov	r1, r3
 8004a76:	4620      	mov	r0, r4
 8004a78:	f7fc f898 	bl	8000bac <__addsf3>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	461c      	mov	r4, r3
 8004a80:	4927      	ldr	r1, [pc, #156]	; (8004b20 <TemCalculate+0x740>)
 8004a82:	6938      	ldr	r0, [r7, #16]
 8004a84:	f7fc f99a 	bl	8000dbc <__aeabi_fmul>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7fc f88d 	bl	8000bac <__addsf3>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4923      	ldr	r1, [pc, #140]	; (8004b24 <TemCalculate+0x744>)
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc f888 	bl	8000bac <__addsf3>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	60fb      	str	r3, [r7, #12]

	return (UWORD)cdc;
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7fc fb51 	bl	8001148 <__aeabi_f2uiz>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	e000      	b.n	8004aae <TemCalculate+0x6ce>
		return 0;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3728      	adds	r7, #40	; 0x28
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	0ebedfa4 	.word	0x0ebedfa4
 8004abc:	3fff339c 	.word	0x3fff339c
 8004ac0:	4e3bcd36 	.word	0x4e3bcd36
 8004ac4:	4019d1d1 	.word	0x4019d1d1
 8004ac8:	119ce076 	.word	0x119ce076
 8004acc:	40063da5 	.word	0x40063da5
 8004ad0:	5db76b3c 	.word	0x5db76b3c
 8004ad4:	3fc7ae68 	.word	0x3fc7ae68
 8004ad8:	2d0e5604 	.word	0x2d0e5604
 8004adc:	3fc39db2 	.word	0x3fc39db2
 8004ae0:	a25d8d7a 	.word	0xa25d8d7a
 8004ae4:	3fb86b7a 	.word	0x3fb86b7a
 8004ae8:	5379fa98 	.word	0x5379fa98
 8004aec:	3fbb0a91 	.word	0x3fbb0a91
 8004af0:	f8769ec3 	.word	0xf8769ec3
 8004af4:	3fb6b26b 	.word	0x3fb6b26b
 8004af8:	bb98c7e3 	.word	0xbb98c7e3
 8004afc:	3fe39096 	.word	0x3fe39096
 8004b00:	49e44fa0 	.word	0x49e44fa0
 8004b04:	3f8335d2 	.word	0x3f8335d2
 8004b08:	ed916873 	.word	0xed916873
 8004b0c:	3fd53f7c 	.word	0x3fd53f7c
 8004b10:	5dcc63f1 	.word	0x5dcc63f1
 8004b14:	3fc7c84b 	.word	0x3fc7c84b
 8004b18:	43da8000 	.word	0x43da8000
 8004b1c:	45611000 	.word	0x45611000
 8004b20:	45d57800 	.word	0x45d57800
 8004b24:	45ac6800 	.word	0x45ac6800

08004b28 <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fbbd 	bl	80052b4 <I2C_Read_Byte>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	b2db      	uxtb	r3, r3
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	460a      	mov	r2, r1
 8004b50:	71fb      	strb	r3, [r7, #7]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 8004b56:	79ba      	ldrb	r2, [r7, #6]
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fb85 	bl	800526c <I2C_Write_Byte>
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 8004b76:	2072      	movs	r0, #114	; 0x72
 8004b78:	f000 fb64 	bl	8005244 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	f000 f80b 	bl	8004b98 <AS7341_Enable>
	measureMode=mode;
 8004b82:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <AS7341_Init+0x28>)
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	7013      	strb	r3, [r2, #0]
	return 0;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000164 	.word	0x20000164

08004b98 <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8004ba0:	2080      	movs	r0, #128	; 0x80
 8004ba2:	f7ff ffc1 	bl	8004b28 <AS7341_Read_Byte>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d104      	bne.n	8004bba <AS7341_Enable+0x22>
    data = data | (1<<0);
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e003      	b.n	8004bc2 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	2080      	movs	r0, #128	; 0x80
 8004bc8:	f7ff ffbd 	bl	8004b46 <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8004bcc:	4805      	ldr	r0, [pc, #20]	; (8004be4 <AS7341_Enable+0x4c>)
 8004bce:	f003 f937 	bl	8007e40 <puts>
    AS7341_Write_Byte(0x00, 0x30);
 8004bd2:	2130      	movs	r1, #48	; 0x30
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f7ff ffb6 	bl	8004b46 <AS7341_Write_Byte>
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	08009e04 	.word	0x08009e04

08004be8 <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8004bf0:	2080      	movs	r0, #128	; 0x80
 8004bf2:	f7ff ff99 	bl	8004b28 <AS7341_Read_Byte>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d104      	bne.n	8004c0a <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	f043 0302 	orr.w	r3, r3, #2
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e003      	b.n	8004c12 <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	f023 0302 	bic.w	r3, r3, #2
 8004c10:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	4619      	mov	r1, r3
 8004c16:	2080      	movs	r0, #128	; 0x80
 8004c18:	f7ff ff95 	bl	8004b46 <AS7341_Write_Byte>
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8004c2c:	2080      	movs	r0, #128	; 0x80
 8004c2e:	f7ff ff7b 	bl	8004b28 <AS7341_Read_Byte>
 8004c32:	4603      	mov	r3, r0
 8004c34:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d104      	bne.n	8004c46 <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	f043 0310 	orr.w	r3, r3, #16
 8004c42:	73fb      	strb	r3, [r7, #15]
 8004c44:	e003      	b.n	8004c4e <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	f023 0310 	bic.w	r3, r3, #16
 8004c4c:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	4619      	mov	r1, r3
 8004c52:	2080      	movs	r0, #128	; 0x80
 8004c54:	f7ff ff77 	bl	8004b46 <AS7341_Write_Byte>
}
 8004c58:	bf00      	nop
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f000 fa5a 	bl	8005124 <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 8004c70:	2070      	movs	r0, #112	; 0x70
 8004c72:	f7ff ff59 	bl	8004b28 <AS7341_Read_Byte>
 8004c76:	4603      	mov	r3, r0
 8004c78:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d015      	beq.n	8004cac <AS7341_Config+0x4c>
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	dc18      	bgt.n	8004cb6 <AS7341_Config+0x56>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <AS7341_Config+0x2e>
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d005      	beq.n	8004c98 <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 8004c8c:	e013      	b.n	8004cb6 <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	f023 0303 	bic.w	r3, r3, #3
 8004c94:	73fb      	strb	r3, [r7, #15]
	break;
 8004c96:	e00f      	b.n	8004cb8 <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 8004c98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c9c:	f023 0303 	bic.w	r3, r3, #3
 8004ca0:	b25b      	sxtb	r3, r3
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	73fb      	strb	r3, [r7, #15]
	break;
 8004caa:	e005      	b.n	8004cb8 <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	f043 0303 	orr.w	r3, r3, #3
 8004cb2:	73fb      	strb	r3, [r7, #15]
	break;
 8004cb4:	e000      	b.n	8004cb8 <AS7341_Config+0x58>
    default : break;
 8004cb6:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	2070      	movs	r0, #112	; 0x70
 8004cbe:	f7ff ff42 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	f000 fa2e 	bl	8005124 <AS7341_SetBank>
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 8004cd4:	2130      	movs	r1, #48	; 0x30
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f7ff ff35 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 8004cdc:	2101      	movs	r1, #1
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f7ff ff31 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	2002      	movs	r0, #2
 8004ce8:	f7ff ff2d 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 8004cec:	2100      	movs	r1, #0
 8004cee:	2003      	movs	r0, #3
 8004cf0:	f7ff ff29 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	2004      	movs	r0, #4
 8004cf8:	f7ff ff25 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 8004cfc:	2142      	movs	r1, #66	; 0x42
 8004cfe:	2005      	movs	r0, #5
 8004d00:	f7ff ff21 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 8004d04:	2100      	movs	r1, #0
 8004d06:	2006      	movs	r0, #6
 8004d08:	f7ff ff1d 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2007      	movs	r0, #7
 8004d10:	f7ff ff19 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8004d14:	2150      	movs	r1, #80	; 0x50
 8004d16:	2008      	movs	r0, #8
 8004d18:	f7ff ff15 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2009      	movs	r0, #9
 8004d20:	f7ff ff11 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 8004d24:	2100      	movs	r1, #0
 8004d26:	200a      	movs	r0, #10
 8004d28:	f7ff ff0d 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	200b      	movs	r0, #11
 8004d30:	f7ff ff09 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 8004d34:	2120      	movs	r1, #32
 8004d36:	200c      	movs	r0, #12
 8004d38:	f7ff ff05 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 8004d3c:	2104      	movs	r1, #4
 8004d3e:	200d      	movs	r0, #13
 8004d40:	f7ff ff01 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 8004d44:	2100      	movs	r1, #0
 8004d46:	200e      	movs	r0, #14
 8004d48:	f7ff fefd 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 8004d4c:	2130      	movs	r1, #48	; 0x30
 8004d4e:	200f      	movs	r0, #15
 8004d50:	f7ff fef9 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 8004d54:	2101      	movs	r1, #1
 8004d56:	2010      	movs	r0, #16
 8004d58:	f7ff fef5 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8004d5c:	2150      	movs	r1, #80	; 0x50
 8004d5e:	2011      	movs	r0, #17
 8004d60:	f7ff fef1 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8004d64:	2100      	movs	r1, #0
 8004d66:	2012      	movs	r0, #18
 8004d68:	f7ff feed 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8004d6c:	2106      	movs	r1, #6
 8004d6e:	2013      	movs	r0, #19
 8004d70:	f7ff fee9 	bl	8004b46 <AS7341_Write_Byte>
}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f7ff fee1 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 8004d84:	2100      	movs	r1, #0
 8004d86:	2001      	movs	r0, #1
 8004d88:	f7ff fedd 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	2002      	movs	r0, #2
 8004d90:	f7ff fed9 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 8004d94:	2140      	movs	r1, #64	; 0x40
 8004d96:	2003      	movs	r0, #3
 8004d98:	f7ff fed5 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	2004      	movs	r0, #4
 8004da0:	f7ff fed1 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 8004da4:	2100      	movs	r1, #0
 8004da6:	2005      	movs	r0, #5
 8004da8:	f7ff fecd 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 8004dac:	2110      	movs	r1, #16
 8004dae:	2006      	movs	r0, #6
 8004db0:	f7ff fec9 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 8004db4:	2103      	movs	r1, #3
 8004db6:	2007      	movs	r0, #7
 8004db8:	f7ff fec5 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8004dbc:	2150      	movs	r1, #80	; 0x50
 8004dbe:	2008      	movs	r0, #8
 8004dc0:	f7ff fec1 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 8004dc4:	2110      	movs	r1, #16
 8004dc6:	2009      	movs	r0, #9
 8004dc8:	f7ff febd 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 8004dcc:	2103      	movs	r1, #3
 8004dce:	200a      	movs	r0, #10
 8004dd0:	f7ff feb9 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	200b      	movs	r0, #11
 8004dd8:	f7ff feb5 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 8004ddc:	2100      	movs	r1, #0
 8004dde:	200c      	movs	r0, #12
 8004de0:	f7ff feb1 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 8004de4:	2100      	movs	r1, #0
 8004de6:	200d      	movs	r0, #13
 8004de8:	f7ff fead 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 8004dec:	2124      	movs	r1, #36	; 0x24
 8004dee:	200e      	movs	r0, #14
 8004df0:	f7ff fea9 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 8004df4:	2100      	movs	r1, #0
 8004df6:	200f      	movs	r0, #15
 8004df8:	f7ff fea5 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	2010      	movs	r0, #16
 8004e00:	f7ff fea1 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8004e04:	2150      	movs	r1, #80	; 0x50
 8004e06:	2011      	movs	r0, #17
 8004e08:	f7ff fe9d 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	2012      	movs	r0, #18
 8004e10:	f7ff fe99 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8004e14:	2106      	movs	r1, #6
 8004e16:	2013      	movs	r0, #19
 8004e18:	f7ff fe95 	bl	8004b46 <AS7341_Write_Byte>
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 8004e2e:	20a9      	movs	r0, #169	; 0xa9
 8004e30:	f7ff fe7a 	bl	8004b28 <AS7341_Read_Byte>
 8004e34:	4603      	mov	r3, r0
 8004e36:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	f023 0310 	bic.w	r3, r3, #16
 8004e3e:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	4619      	mov	r1, r3
 8004e44:	20a9      	movs	r0, #169	; 0xa9
 8004e46:	f7ff fe7e 	bl	8004b46 <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f7ff fecc 	bl	8004be8 <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8004e50:	2110      	movs	r1, #16
 8004e52:	20af      	movs	r0, #175	; 0xaf
 8004e54:	f7ff fe77 	bl	8004b46 <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8004e5e:	f7ff ff37 	bl	8004cd0 <F1F4_Clear_NIR>
 8004e62:	e004      	b.n	8004e6e <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 8004e6a:	f7ff ff85 	bl	8004d78 <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 8004e6e:	2001      	movs	r0, #1
 8004e70:	f7ff fed8 	bl	8004c24 <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 8004e74:	4b12      	ldr	r3, [pc, #72]	; (8004ec0 <AS7341_startMeasure+0xa0>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d106      	bne.n	8004e8a <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	f000 f8c0 	bl	8005002 <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8004e82:	2001      	movs	r0, #1
 8004e84:	f7ff feec 	bl	8004c60 <AS7341_Config>
 8004e88:	e006      	b.n	8004e98 <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <AS7341_startMeasure+0xa0>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d102      	bne.n	8004e98 <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7ff fee4 	bl	8004c60 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f7ff fea5 	bl	8004be8 <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8004e9e:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <AS7341_startMeasure+0xa0>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d108      	bne.n	8004eb8 <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 8004ea6:	e002      	b.n	8004eae <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f000 f9b9 	bl	8005220 <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 8004eae:	f000 f809 	bl	8004ec4 <AS7341_MeasureComplete>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f7      	beq.n	8004ea8 <AS7341_startMeasure+0x88>
        }
      }
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	20000164 	.word	0x20000164

08004ec4 <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 8004eca:	20a3      	movs	r0, #163	; 0xa3
 8004ecc:	f7ff fe2c 	bl	8004b28 <AS7341_Read_Byte>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <AS7341_MeasureComplete+0x1e>
		return true;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8004ee2:	2300      	movs	r3, #0
	}
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	3b6b      	subs	r3, #107	; 0x6b
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fe0f 	bl	8004b28 <AS7341_Read_Byte>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	334b      	adds	r3, #75	; 0x4b
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff fe04 	bl	8004b28 <AS7341_Read_Byte>
 8004f20:	4603      	mov	r3, r0
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 8004f26:	897b      	ldrh	r3, [r7, #10]
 8004f28:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 8004f2a:	89fb      	ldrh	r3, [r7, #14]
 8004f2c:	021b      	lsls	r3, r3, #8
 8004f2e:	b21a      	sxth	r2, r3
 8004f30:	893b      	ldrh	r3, [r7, #8]
 8004f32:	b21b      	sxth	r3, r3
 8004f34:	4313      	orrs	r3, r2
 8004f36:	b21b      	sxth	r3, r3
 8004f38:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 8004f3a:	2032      	movs	r0, #50	; 0x32
 8004f3c:	f000 f970 	bl	8005220 <DEV_Delay_ms>
  return channelData;
 8004f40:	89fb      	ldrh	r3, [r7, #14]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 8004f4a:	b590      	push	{r4, r7, lr}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8004f52:	2000      	movs	r0, #0
 8004f54:	f7ff ffca 	bl	8004eec <AS7341_GetChannelData>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	f7ff ffc5 	bl	8004eec <AS7341_GetChannelData>
 8004f62:	4603      	mov	r3, r0
 8004f64:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 8004f66:	2002      	movs	r0, #2
 8004f68:	f7ff ffc0 	bl	8004eec <AS7341_GetChannelData>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8004f70:	2003      	movs	r0, #3
 8004f72:	f7ff ffbb 	bl	8004eec <AS7341_GetChannelData>
 8004f76:	4603      	mov	r3, r0
 8004f78:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8004f7a:	2004      	movs	r0, #4
 8004f7c:	f7ff ffb6 	bl	8004eec <AS7341_GetChannelData>
 8004f80:	4603      	mov	r3, r0
 8004f82:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8004f84:	2005      	movs	r0, #5
 8004f86:	f7ff ffb1 	bl	8004eec <AS7341_GetChannelData>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	82fb      	strh	r3, [r7, #22]
  return data;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	461c      	mov	r4, r3
 8004f92:	f107 030c 	add.w	r3, r7, #12
 8004f96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f98:	6020      	str	r0, [r4, #0]
 8004f9a:	6061      	str	r1, [r4, #4]
 8004f9c:	60a2      	str	r2, [r4, #8]
}
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd90      	pop	{r4, r7, pc}

08004fa6 <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8004fa6:	b590      	push	{r4, r7, lr}
 8004fa8:	b087      	sub	sp, #28
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8004fae:	2000      	movs	r0, #0
 8004fb0:	f7ff ff9c 	bl	8004eec <AS7341_GetChannelData>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f7ff ff97 	bl	8004eec <AS7341_GetChannelData>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8004fc2:	2002      	movs	r0, #2
 8004fc4:	f7ff ff92 	bl	8004eec <AS7341_GetChannelData>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8004fcc:	2003      	movs	r0, #3
 8004fce:	f7ff ff8d 	bl	8004eec <AS7341_GetChannelData>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8004fd6:	2004      	movs	r0, #4
 8004fd8:	f7ff ff88 	bl	8004eec <AS7341_GetChannelData>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8004fe0:	2005      	movs	r0, #5
 8004fe2:	f7ff ff83 	bl	8004eec <AS7341_GetChannelData>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	82fb      	strh	r3, [r7, #22]
  return data;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	461c      	mov	r4, r3
 8004fee:	f107 030c 	add.w	r3, r7, #12
 8004ff2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ff4:	6020      	str	r0, [r4, #0]
 8004ff6:	6061      	str	r1, [r4, #4]
 8004ff8:	60a2      	str	r2, [r4, #8]
}
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	371c      	adds	r7, #28
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd90      	pop	{r4, r7, pc}

08005002 <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	4603      	mov	r3, r0
 800500a:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 800500c:	20be      	movs	r0, #190	; 0xbe
 800500e:	f7ff fd8b 	bl	8004b28 <AS7341_Read_Byte>
 8005012:	4603      	mov	r3, r0
 8005014:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d103      	bne.n	8005024 <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	f043 0304 	orr.w	r3, r3, #4
 8005022:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d103      	bne.n	8005032 <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	f023 0304 	bic.w	r3, r3, #4
 8005030:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	4619      	mov	r1, r3
 8005036:	20be      	movs	r0, #190	; 0xbe
 8005038:	f7ff fd85 	bl	8004b46 <AS7341_Write_Byte>
}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	4619      	mov	r1, r3
 8005052:	2081      	movs	r0, #129	; 0x81
 8005054:	f7ff fd77 	bl	8004b46 <AS7341_Write_Byte>
}
 8005058:	bf00      	nop
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 800506a:	88fb      	ldrh	r3, [r7, #6]
 800506c:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	0a1b      	lsrs	r3, r3, #8
 8005072:	b29b      	uxth	r3, r3
 8005074:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	4619      	mov	r1, r3
 800507a:	20ca      	movs	r0, #202	; 0xca
 800507c:	f7ff fd63 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	4619      	mov	r1, r3
 8005084:	20cb      	movs	r0, #203	; 0xcb
 8005086:	f7ff fd5e 	bl	8004b46 <AS7341_Write_Byte>
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	4603      	mov	r3, r0
 800509a:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	2b0a      	cmp	r3, #10
 80050a0:	d901      	bls.n	80050a6 <AS7341_AGAIN_config+0x14>
 80050a2:	230a      	movs	r3, #10
 80050a4:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	4619      	mov	r1, r3
 80050aa:	20aa      	movs	r0, #170	; 0xaa
 80050ac:	f7ff fd4b 	bl	8004b46 <AS7341_Write_Byte>
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f000 f82b 	bl	8005124 <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 80050ce:	2070      	movs	r0, #112	; 0x70
 80050d0:	f7ff fd2a 	bl	8004b28 <AS7341_Read_Byte>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 80050d8:	2074      	movs	r0, #116	; 0x74
 80050da:	f7ff fd25 	bl	8004b28 <AS7341_Read_Byte>
 80050de:	4603      	mov	r3, r0
 80050e0:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d104      	bne.n	80050f2 <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	f043 0308 	orr.w	r3, r3, #8
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e00c      	b.n	800510c <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	f023 0308 	bic.w	r3, r3, #8
 80050f8:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
 80050fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005100:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 8005102:	7bbb      	ldrb	r3, [r7, #14]
 8005104:	4619      	mov	r1, r3
 8005106:	2074      	movs	r0, #116	; 0x74
 8005108:	f7ff fd1d 	bl	8004b46 <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	4619      	mov	r1, r3
 8005110:	2070      	movs	r0, #112	; 0x70
 8005112:	f7ff fd18 	bl	8004b46 <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8005116:	2000      	movs	r0, #0
 8005118:	f000 f804 	bl	8005124 <AS7341_SetBank>
}
 800511c:	bf00      	nop
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	4603      	mov	r3, r0
 800512c:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8005132:	20a9      	movs	r0, #169	; 0xa9
 8005134:	f7ff fcf8 	bl	8004b28 <AS7341_Read_Byte>
 8005138:	4603      	mov	r3, r0
 800513a:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d103      	bne.n	800514a <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	f043 0310 	orr.w	r3, r3, #16
 8005148:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	f023 0310 	bic.w	r3, r3, #16
 8005156:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	4619      	mov	r1, r3
 800515c:	20a9      	movs	r0, #169	; 0xa9
 800515e:	f7ff fcf2 	bl	8004b46 <AS7341_Write_Byte>
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <AS7341_ControlLed>:
info：   LED 			 :   true  : LED ON
											 false : LED OFF
         current   :  intensity control
******************************************************************************/
void AS7341_ControlLed(UBYTE LED,UBYTE current)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	4603      	mov	r3, r0
 8005172:	460a      	mov	r2, r1
 8005174:	71fb      	strb	r3, [r7, #7]
 8005176:	4613      	mov	r3, r2
 8005178:	71bb      	strb	r3, [r7, #6]
  UBYTE data=0;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
  if(current < 1) current = 1;
 800517e:	79bb      	ldrb	r3, [r7, #6]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <AS7341_ControlLed+0x1e>
 8005184:	2301      	movs	r3, #1
 8005186:	71bb      	strb	r3, [r7, #6]
    current--;
 8005188:	79bb      	ldrb	r3, [r7, #6]
 800518a:	3b01      	subs	r3, #1
 800518c:	71bb      	strb	r3, [r7, #6]
  if(current > 19) current = 19;
 800518e:	79bb      	ldrb	r3, [r7, #6]
 8005190:	2b13      	cmp	r3, #19
 8005192:	d901      	bls.n	8005198 <AS7341_ControlLed+0x2e>
 8005194:	2313      	movs	r3, #19
 8005196:	71bb      	strb	r3, [r7, #6]
  AS7341_SetBank(1); 
 8005198:	2001      	movs	r0, #1
 800519a:	f7ff ffc3 	bl	8005124 <AS7341_SetBank>
	if(LED == true)	
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d104      	bne.n	80051ae <AS7341_ControlLed+0x44>
		data = 0x80 | current;
 80051a4:	79bb      	ldrb	r3, [r7, #6]
 80051a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051aa:	73fb      	strb	r3, [r7, #15]
 80051ac:	e001      	b.n	80051b2 <AS7341_ControlLed+0x48>
	else	
		data = current;
 80051ae:	79bb      	ldrb	r3, [r7, #6]
 80051b0:	73fb      	strb	r3, [r7, #15]
  AS7341_Write_Byte(AS7341_LED,data);
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	4619      	mov	r1, r3
 80051b6:	2074      	movs	r0, #116	; 0x74
 80051b8:	f7ff fcc5 	bl	8004b46 <AS7341_Write_Byte>
  DEV_Delay_ms(100);
 80051bc:	2064      	movs	r0, #100	; 0x64
 80051be:	f000 f82f 	bl	8005220 <DEV_Delay_ms>
  AS7341_SetBank(0);
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7ff ffae 	bl	8005124 <AS7341_SetBank>
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <AS7341_ReadITIME>:
/******************************************************************************
function:	read ITIME
info：
******************************************************************************/
uint32_t AS7341_ReadITIME(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
	ret |= AS7341_Read_Byte(AS7341_ITIMEH);
 80051da:	2065      	movs	r0, #101	; 0x65
 80051dc:	f7ff fca4 	bl	8004b28 <AS7341_Read_Byte>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	607b      	str	r3, [r7, #4]
	ret <<= 8;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	607b      	str	r3, [r7, #4]
	ret |= AS7341_Read_Byte(AS7341_ITIMEM);
 80051f0:	2064      	movs	r0, #100	; 0x64
 80051f2:	f7ff fc99 	bl	8004b28 <AS7341_Read_Byte>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	607b      	str	r3, [r7, #4]
	ret <<= 8;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	607b      	str	r3, [r7, #4]
	ret |= AS7341_Read_Byte(AS7341_ITIMEL);
 8005206:	2063      	movs	r0, #99	; 0x63
 8005208:	f7ff fc8e 	bl	8004b28 <AS7341_Read_Byte>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4313      	orrs	r3, r2
 8005214:	607b      	str	r3, [r7, #4]

	return ret;
 8005216:	687b      	ldr	r3, [r7, #4]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fc41 	bl	8005ab0 <HAL_Delay>
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <GPIO_Config>:


void GPIO_Config(void)
{
 8005236:	b480      	push	{r7}
 8005238:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 800523a:	bf00      	nop
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr
	...

08005244 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <DEV_I2C_Init+0x20>)
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8005254:	4a04      	ldr	r2, [pc, #16]	; (8005268 <DEV_I2C_Init+0x24>)
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	7013      	strb	r3, [r2, #0]
#endif
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	20000165 	.word	0x20000165
 8005268:	20000166 	.word	0x20000166

0800526c <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af04      	add	r7, sp, #16
 8005272:	4603      	mov	r3, r0
 8005274:	460a      	mov	r2, r1
 8005276:	71fb      	strb	r3, [r7, #7]
 8005278:	4613      	mov	r3, r2
 800527a:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 800527c:	2300      	movs	r3, #0
 800527e:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8005280:	79bb      	ldrb	r3, [r7, #6]
 8005282:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8005284:	4b09      	ldr	r3, [pc, #36]	; (80052ac <I2C_Write_Byte+0x40>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b299      	uxth	r1, r3
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	b29a      	uxth	r2, r3
 800528e:	2320      	movs	r3, #32
 8005290:	9302      	str	r3, [sp, #8]
 8005292:	2301      	movs	r3, #1
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2301      	movs	r3, #1
 800529e:	4804      	ldr	r0, [pc, #16]	; (80052b0 <I2C_Write_Byte+0x44>)
 80052a0:	f000 ffe6 	bl	8006270 <HAL_I2C_Mem_Write>
#endif
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000166 	.word	0x20000166
 80052b0:	20000168 	.word	0x20000168

080052b4 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af04      	add	r7, sp, #16
 80052ba:	4603      	mov	r3, r0
 80052bc:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 80052be:	2300      	movs	r3, #0
 80052c0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <I2C_Read_Byte+0x3c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3301      	adds	r3, #1
 80052ca:	b299      	uxth	r1, r3
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	2320      	movs	r3, #32
 80052d2:	9302      	str	r3, [sp, #8]
 80052d4:	2301      	movs	r3, #1
 80052d6:	9301      	str	r3, [sp, #4]
 80052d8:	f107 030c 	add.w	r3, r7, #12
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	2301      	movs	r3, #1
 80052e0:	4804      	ldr	r0, [pc, #16]	; (80052f4 <I2C_Read_Byte+0x40>)
 80052e2:	f001 f8bf 	bl	8006464 <HAL_I2C_Mem_Read>
	return Buf[0];
 80052e6:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000166 	.word	0x20000166
 80052f4:	20000168 	.word	0x20000168

080052f8 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
		GPIO_Config();
 80052fc:	f7ff ff9b 	bl	8005236 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8005300:	2072      	movs	r0, #114	; 0x72
 8005302:	f7ff ff9f 	bl	8005244 <DEV_I2C_Init>
    return 0;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}

0800530c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005312:	4b0e      	ldr	r3, [pc, #56]	; (800534c <MX_GPIO_Init+0x40>)
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	4a0d      	ldr	r2, [pc, #52]	; (800534c <MX_GPIO_Init+0x40>)
 8005318:	f043 0308 	orr.w	r3, r3, #8
 800531c:	6193      	str	r3, [r2, #24]
 800531e:	4b0b      	ldr	r3, [pc, #44]	; (800534c <MX_GPIO_Init+0x40>)
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <MX_GPIO_Init+0x40>)
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	4a07      	ldr	r2, [pc, #28]	; (800534c <MX_GPIO_Init+0x40>)
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	6193      	str	r3, [r2, #24]
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <MX_GPIO_Init+0x40>)
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	683b      	ldr	r3, [r7, #0]

}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr
 800534c:	40021000 	.word	0x40021000

08005350 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005354:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <MX_I2C1_Init+0x50>)
 8005356:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <MX_I2C1_Init+0x54>)
 8005358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800535a:	4b11      	ldr	r3, [pc, #68]	; (80053a0 <MX_I2C1_Init+0x50>)
 800535c:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <MX_I2C1_Init+0x58>)
 800535e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <MX_I2C1_Init+0x50>)
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005366:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <MX_I2C1_Init+0x50>)
 8005368:	2200      	movs	r2, #0
 800536a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <MX_I2C1_Init+0x50>)
 800536e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005374:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <MX_I2C1_Init+0x50>)
 8005376:	2200      	movs	r2, #0
 8005378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <MX_I2C1_Init+0x50>)
 800537c:	2200      	movs	r2, #0
 800537e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005380:	4b07      	ldr	r3, [pc, #28]	; (80053a0 <MX_I2C1_Init+0x50>)
 8005382:	2200      	movs	r2, #0
 8005384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <MX_I2C1_Init+0x50>)
 8005388:	2200      	movs	r2, #0
 800538a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800538c:	4804      	ldr	r0, [pc, #16]	; (80053a0 <MX_I2C1_Init+0x50>)
 800538e:	f000 fe2b 	bl	8005fe8 <HAL_I2C_Init>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005398:	f000 f92b 	bl	80055f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800539c:	bf00      	nop
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000168 	.word	0x20000168
 80053a4:	40005400 	.word	0x40005400
 80053a8:	000186a0 	.word	0x000186a0

080053ac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80053b0:	4b12      	ldr	r3, [pc, #72]	; (80053fc <MX_I2C2_Init+0x50>)
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <MX_I2C2_Init+0x54>)
 80053b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80053b6:	4b11      	ldr	r3, [pc, #68]	; (80053fc <MX_I2C2_Init+0x50>)
 80053b8:	4a12      	ldr	r2, [pc, #72]	; (8005404 <MX_I2C2_Init+0x58>)
 80053ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80053bc:	4b0f      	ldr	r3, [pc, #60]	; (80053fc <MX_I2C2_Init+0x50>)
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80053c2:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <MX_I2C2_Init+0x50>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <MX_I2C2_Init+0x50>)
 80053ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053ce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80053d0:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <MX_I2C2_Init+0x50>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <MX_I2C2_Init+0x50>)
 80053d8:	2200      	movs	r2, #0
 80053da:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <MX_I2C2_Init+0x50>)
 80053de:	2200      	movs	r2, #0
 80053e0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <MX_I2C2_Init+0x50>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80053e8:	4804      	ldr	r0, [pc, #16]	; (80053fc <MX_I2C2_Init+0x50>)
 80053ea:	f000 fdfd 	bl	8005fe8 <HAL_I2C_Init>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80053f4:	f000 f8fd 	bl	80055f2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80053f8:	bf00      	nop
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	200001bc 	.word	0x200001bc
 8005400:	40005800 	.word	0x40005800
 8005404:	000186a0 	.word	0x000186a0

08005408 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005410:	f107 0318 	add.w	r3, r7, #24
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	605a      	str	r2, [r3, #4]
 800541a:	609a      	str	r2, [r3, #8]
 800541c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2b      	ldr	r2, [pc, #172]	; (80054d0 <HAL_I2C_MspInit+0xc8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d124      	bne.n	8005472 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005428:	4b2a      	ldr	r3, [pc, #168]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 800542e:	f043 0308 	orr.w	r3, r3, #8
 8005432:	6193      	str	r3, [r2, #24]
 8005434:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005440:	23c0      	movs	r3, #192	; 0xc0
 8005442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005444:	2312      	movs	r3, #18
 8005446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005448:	2303      	movs	r3, #3
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800544c:	f107 0318 	add.w	r3, r7, #24
 8005450:	4619      	mov	r1, r3
 8005452:	4821      	ldr	r0, [pc, #132]	; (80054d8 <HAL_I2C_MspInit+0xd0>)
 8005454:	f000 fc34 	bl	8005cc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005458:	4b1e      	ldr	r3, [pc, #120]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 800545e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005462:	61d3      	str	r3, [r2, #28]
 8005464:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005470:	e029      	b.n	80054c6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a19      	ldr	r2, [pc, #100]	; (80054dc <HAL_I2C_MspInit+0xd4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d124      	bne.n	80054c6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800547c:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 8005482:	f043 0308 	orr.w	r3, r3, #8
 8005486:	6193      	str	r3, [r2, #24]
 8005488:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005494:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800549a:	2312      	movs	r3, #18
 800549c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800549e:	2303      	movs	r3, #3
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054a2:	f107 0318 	add.w	r3, r7, #24
 80054a6:	4619      	mov	r1, r3
 80054a8:	480b      	ldr	r0, [pc, #44]	; (80054d8 <HAL_I2C_MspInit+0xd0>)
 80054aa:	f000 fc09 	bl	8005cc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 80054b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054b8:	61d3      	str	r3, [r2, #28]
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_I2C_MspInit+0xcc>)
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
}
 80054c6:	bf00      	nop
 80054c8:	3728      	adds	r7, #40	; 0x28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40005400 	.word	0x40005400
 80054d4:	40021000 	.word	0x40021000
 80054d8:	40010c00 	.word	0x40010c00
 80054dc:	40005800 	.word	0x40005800

080054e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b0e6      	sub	sp, #408	; 0x198
 80054e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  light_t test = {0};
 80054e6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80054ea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80054ee:	4618      	mov	r0, r3
 80054f0:	f44f 73cc 	mov.w	r3, #408	; 0x198
 80054f4:	461a      	mov	r2, r3
 80054f6:	2100      	movs	r1, #0
 80054f8:	f002 fc14 	bl	8007d24 <memset>
	  test.pdata1 = &data1;
 80054fc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005500:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005504:	4a17      	ldr	r2, [pc, #92]	; (8005564 <main+0x84>)
 8005506:	601a      	str	r2, [r3, #0]
	  test.pdata2 = &data2;
 8005508:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800550c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <main+0x88>)
 8005512:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005514:	f000 fa6a 	bl	80059ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005518:	f000 f82a 	bl	8005570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800551c:	f7ff fef6 	bl	800530c <MX_GPIO_Init>
  MX_I2C1_Init();
 8005520:	f7ff ff16 	bl	8005350 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005524:	f7ff ff42 	bl	80053ac <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8005528:	f000 f9c4 	bl	80058b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 800552c:	480f      	ldr	r0, [pc, #60]	; (800556c <main+0x8c>)
 800552e:	f000 f865 	bl	80055fc <RetargetInit>
  DEV_ModuleInit();
 8005532:	f7ff fee1 	bl	80052f8 <DEV_ModuleInit>
  Device_Init();
 8005536:	f7fe ff37 	bl	80043a8 <Device_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  TemCalculate(data1,data2);
	  My_Getdata_test(&test);
 800553a:	463b      	mov	r3, r7
 800553c:	4618      	mov	r0, r3
 800553e:	f7fe fdaf 	bl	80040a0 <My_Getdata_test>
	  test.light_attrs.cdc = TemCalculate(&test);
 8005542:	463b      	mov	r3, r7
 8005544:	4618      	mov	r0, r3
 8005546:	f7fe ff4b 	bl	80043e0 <TemCalculate>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005552:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005556:	811a      	strh	r2, [r3, #8]
	  Calcute_Ra(&test);
 8005558:	463b      	mov	r3, r7
 800555a:	4618      	mov	r0, r3
 800555c:	f7fc f808 	bl	8001570 <Calcute_Ra>
	  My_Getdata_test(&test);
 8005560:	e7eb      	b.n	800553a <main+0x5a>
 8005562:	bf00      	nop
 8005564:	2000008c 	.word	0x2000008c
 8005568:	20000098 	.word	0x20000098
 800556c:	20000218 	.word	0x20000218

08005570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b090      	sub	sp, #64	; 0x40
 8005574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005576:	f107 0318 	add.w	r3, r7, #24
 800557a:	2228      	movs	r2, #40	; 0x28
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f002 fbd0 	bl	8007d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005584:	1d3b      	adds	r3, r7, #4
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	609a      	str	r2, [r3, #8]
 800558e:	60da      	str	r2, [r3, #12]
 8005590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005592:	2302      	movs	r3, #2
 8005594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005596:	2301      	movs	r3, #1
 8005598:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800559a:	2310      	movs	r3, #16
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800559e:	2302      	movs	r3, #2
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80055a2:	2300      	movs	r3, #0
 80055a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80055a6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055ac:	f107 0318 	add.w	r3, r7, #24
 80055b0:	4618      	mov	r0, r3
 80055b2:	f001 fd19 	bl	8006fe8 <HAL_RCC_OscConfig>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80055bc:	f000 f819 	bl	80055f2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055c0:	230f      	movs	r3, #15
 80055c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055c4:	2302      	movs	r3, #2
 80055c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80055cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055d6:	1d3b      	adds	r3, r7, #4
 80055d8:	2102      	movs	r1, #2
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 ff86 	bl	80074ec <HAL_RCC_ClockConfig>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80055e6:	f000 f804 	bl	80055f2 <Error_Handler>
  }
}
 80055ea:	bf00      	nop
 80055ec:	3740      	adds	r7, #64	; 0x40
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055f2:	b480      	push	{r7}
 80055f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055f6:	b672      	cpsid	i
}
 80055f8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80055fa:	e7fe      	b.n	80055fa <Error_Handler+0x8>

080055fc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8005604:	4a07      	ldr	r2, [pc, #28]	; (8005624 <RetargetInit+0x28>)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <RetargetInit+0x2c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6898      	ldr	r0, [r3, #8]
 8005610:	2300      	movs	r3, #0
 8005612:	2202      	movs	r2, #2
 8005614:	2100      	movs	r1, #0
 8005616:	f002 fc1b 	bl	8007e50 <setvbuf>
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000210 	.word	0x20000210
 8005628:	2000000c 	.word	0x2000000c

0800562c <_isatty>:

int _isatty(int fd) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	db04      	blt.n	8005644 <_isatty+0x18>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b02      	cmp	r3, #2
 800563e:	dc01      	bgt.n	8005644 <_isatty+0x18>
    return 1;
 8005640:	2301      	movs	r3, #1
 8005642:	e005      	b.n	8005650 <_isatty+0x24>

  errno = EBADF;
 8005644:	f002 fb44 	bl	8007cd0 <__errno>
 8005648:	4603      	mov	r3, r0
 800564a:	2209      	movs	r2, #9
 800564c:	601a      	str	r2, [r3, #0]
  return 0;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <_write>:

int _write(int fd, char* ptr, int len) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d002      	beq.n	8005670 <_write+0x18>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d111      	bne.n	8005694 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8005670:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <_write+0x54>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	b29a      	uxth	r2, r3
 8005678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	f002 f91a 	bl	80078b6 <HAL_UART_Transmit>
 8005682:	4603      	mov	r3, r0
 8005684:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <_write+0x38>
      return len;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	e008      	b.n	80056a2 <_write+0x4a>
    else
      return EIO;
 8005690:	2305      	movs	r3, #5
 8005692:	e006      	b.n	80056a2 <_write+0x4a>
  }
  errno = EBADF;
 8005694:	f002 fb1c 	bl	8007cd0 <__errno>
 8005698:	4603      	mov	r3, r0
 800569a:	2209      	movs	r2, #9
 800569c:	601a      	str	r2, [r3, #0]
  return -1;
 800569e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000210 	.word	0x20000210

080056b0 <_close>:

int _close(int fd) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	db04      	blt.n	80056c8 <_close+0x18>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	dc01      	bgt.n	80056c8 <_close+0x18>
    return 0;
 80056c4:	2300      	movs	r3, #0
 80056c6:	e006      	b.n	80056d6 <_close+0x26>

  errno = EBADF;
 80056c8:	f002 fb02 	bl	8007cd0 <__errno>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2209      	movs	r2, #9
 80056d0:	601a      	str	r2, [r3, #0]
  return -1;
 80056d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80056ea:	f002 faf1 	bl	8007cd0 <__errno>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2209      	movs	r2, #9
 80056f2:	601a      	str	r2, [r3, #0]
  return -1;
 80056f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <_read>:

int _read(int fd, char* ptr, int len) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d110      	bne.n	8005734 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8005712:	4b0e      	ldr	r3, [pc, #56]	; (800574c <_read+0x4c>)
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800571a:	2201      	movs	r2, #1
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	f002 f95c 	bl	80079da <HAL_UART_Receive>
 8005722:	4603      	mov	r3, r0
 8005724:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <_read+0x30>
      return 1;
 800572c:	2301      	movs	r3, #1
 800572e:	e008      	b.n	8005742 <_read+0x42>
    else
      return EIO;
 8005730:	2305      	movs	r3, #5
 8005732:	e006      	b.n	8005742 <_read+0x42>
  }
  errno = EBADF;
 8005734:	f002 facc 	bl	8007cd0 <__errno>
 8005738:	4603      	mov	r3, r0
 800573a:	2209      	movs	r2, #9
 800573c:	601a      	str	r2, [r3, #0]
  return -1;
 800573e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000210 	.word	0x20000210

08005750 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	db08      	blt.n	8005772 <_fstat+0x22>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b02      	cmp	r3, #2
 8005764:	dc05      	bgt.n	8005772 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800576c:	605a      	str	r2, [r3, #4]
    return 0;
 800576e:	2300      	movs	r3, #0
 8005770:	e005      	b.n	800577e <_fstat+0x2e>
  }

  errno = EBADF;
 8005772:	f002 faad 	bl	8007cd0 <__errno>
 8005776:	4603      	mov	r3, r0
 8005778:	2209      	movs	r2, #9
 800577a:	601a      	str	r2, [r3, #0]
  return 0;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800578e:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <HAL_MspInit+0x5c>)
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <HAL_MspInit+0x5c>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	6193      	str	r3, [r2, #24]
 800579a:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <HAL_MspInit+0x5c>)
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_MspInit+0x5c>)
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4a0e      	ldr	r2, [pc, #56]	; (80057e4 <HAL_MspInit+0x5c>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b0:	61d3      	str	r3, [r2, #28]
 80057b2:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <HAL_MspInit+0x5c>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HAL_MspInit+0x60>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	4a04      	ldr	r2, [pc, #16]	; (80057e8 <HAL_MspInit+0x60>)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40010000 	.word	0x40010000

080057ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057f0:	e7fe      	b.n	80057f0 <NMI_Handler+0x4>

080057f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057f2:	b480      	push	{r7}
 80057f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057f6:	e7fe      	b.n	80057f6 <HardFault_Handler+0x4>

080057f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057fc:	e7fe      	b.n	80057fc <MemManage_Handler+0x4>

080057fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057fe:	b480      	push	{r7}
 8005800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005802:	e7fe      	b.n	8005802 <BusFault_Handler+0x4>

08005804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005808:	e7fe      	b.n	8005808 <UsageFault_Handler+0x4>

0800580a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800580a:	b480      	push	{r7}
 800580c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800580e:	bf00      	nop
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr

08005816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005816:	b480      	push	{r7}
 8005818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800581a:	bf00      	nop
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005822:	b480      	push	{r7}
 8005824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005832:	f000 f921 	bl	8005a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005844:	4a14      	ldr	r2, [pc, #80]	; (8005898 <_sbrk+0x5c>)
 8005846:	4b15      	ldr	r3, [pc, #84]	; (800589c <_sbrk+0x60>)
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005850:	4b13      	ldr	r3, [pc, #76]	; (80058a0 <_sbrk+0x64>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005858:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <_sbrk+0x64>)
 800585a:	4a12      	ldr	r2, [pc, #72]	; (80058a4 <_sbrk+0x68>)
 800585c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800585e:	4b10      	ldr	r3, [pc, #64]	; (80058a0 <_sbrk+0x64>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4413      	add	r3, r2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	429a      	cmp	r2, r3
 800586a:	d207      	bcs.n	800587c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800586c:	f002 fa30 	bl	8007cd0 <__errno>
 8005870:	4603      	mov	r3, r0
 8005872:	220c      	movs	r2, #12
 8005874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800587a:	e009      	b.n	8005890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800587c:	4b08      	ldr	r3, [pc, #32]	; (80058a0 <_sbrk+0x64>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005882:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <_sbrk+0x64>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4413      	add	r3, r2
 800588a:	4a05      	ldr	r2, [pc, #20]	; (80058a0 <_sbrk+0x64>)
 800588c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800588e:	68fb      	ldr	r3, [r7, #12]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20010000 	.word	0x20010000
 800589c:	00000400 	.word	0x00000400
 80058a0:	20000214 	.word	0x20000214
 80058a4:	20000270 	.word	0x20000270

080058a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058ac:	bf00      	nop
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr

080058b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80058b8:	4b11      	ldr	r3, [pc, #68]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058ba:	4a12      	ldr	r2, [pc, #72]	; (8005904 <MX_USART1_UART_Init+0x50>)
 80058bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058c6:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058da:	220c      	movs	r2, #12
 80058dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058de:	4b08      	ldr	r3, [pc, #32]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80058ea:	4805      	ldr	r0, [pc, #20]	; (8005900 <MX_USART1_UART_Init+0x4c>)
 80058ec:	f001 ff96 	bl	800781c <HAL_UART_Init>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80058f6:	f7ff fe7c 	bl	80055f2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80058fa:	bf00      	nop
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000218 	.word	0x20000218
 8005904:	40013800 	.word	0x40013800

08005908 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005910:	f107 0310 	add.w	r3, r7, #16
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	609a      	str	r2, [r3, #8]
 800591c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1c      	ldr	r2, [pc, #112]	; (8005994 <HAL_UART_MspInit+0x8c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d131      	bne.n	800598c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <HAL_UART_MspInit+0x90>)
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	4a1a      	ldr	r2, [pc, #104]	; (8005998 <HAL_UART_MspInit+0x90>)
 800592e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005932:	6193      	str	r3, [r2, #24]
 8005934:	4b18      	ldr	r3, [pc, #96]	; (8005998 <HAL_UART_MspInit+0x90>)
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <HAL_UART_MspInit+0x90>)
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <HAL_UART_MspInit+0x90>)
 8005946:	f043 0304 	orr.w	r3, r3, #4
 800594a:	6193      	str	r3, [r2, #24]
 800594c:	4b12      	ldr	r3, [pc, #72]	; (8005998 <HAL_UART_MspInit+0x90>)
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	60bb      	str	r3, [r7, #8]
 8005956:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800595c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595e:	2302      	movs	r3, #2
 8005960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005962:	2303      	movs	r3, #3
 8005964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005966:	f107 0310 	add.w	r3, r7, #16
 800596a:	4619      	mov	r1, r3
 800596c:	480b      	ldr	r0, [pc, #44]	; (800599c <HAL_UART_MspInit+0x94>)
 800596e:	f000 f9a7 	bl	8005cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800597c:	2300      	movs	r3, #0
 800597e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005980:	f107 0310 	add.w	r3, r7, #16
 8005984:	4619      	mov	r1, r3
 8005986:	4805      	ldr	r0, [pc, #20]	; (800599c <HAL_UART_MspInit+0x94>)
 8005988:	f000 f99a 	bl	8005cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800598c:	bf00      	nop
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40013800 	.word	0x40013800
 8005998:	40021000 	.word	0x40021000
 800599c:	40010800 	.word	0x40010800

080059a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059a0:	480c      	ldr	r0, [pc, #48]	; (80059d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059a2:	490d      	ldr	r1, [pc, #52]	; (80059d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059a4:	4a0d      	ldr	r2, [pc, #52]	; (80059dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059a8:	e002      	b.n	80059b0 <LoopCopyDataInit>

080059aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059ae:	3304      	adds	r3, #4

080059b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059b4:	d3f9      	bcc.n	80059aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059b6:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059b8:	4c0a      	ldr	r4, [pc, #40]	; (80059e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059bc:	e001      	b.n	80059c2 <LoopFillZerobss>

080059be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059c0:	3204      	adds	r2, #4

080059c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059c4:	d3fb      	bcc.n	80059be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80059c6:	f7ff ff6f 	bl	80058a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059ca:	f002 f987 	bl	8007cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80059ce:	f7ff fd87 	bl	80054e0 <main>
  bx lr
 80059d2:	4770      	bx	lr
  ldr r0, =_sdata
 80059d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80059dc:	0800ab08 	.word	0x0800ab08
  ldr r2, =_sbss
 80059e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80059e4:	20000270 	.word	0x20000270

080059e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80059e8:	e7fe      	b.n	80059e8 <ADC1_2_IRQHandler>
	...

080059ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059f0:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <HAL_Init+0x28>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a07      	ldr	r2, [pc, #28]	; (8005a14 <HAL_Init+0x28>)
 80059f6:	f043 0310 	orr.w	r3, r3, #16
 80059fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059fc:	2003      	movs	r0, #3
 80059fe:	f000 f92b 	bl	8005c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a02:	200f      	movs	r0, #15
 8005a04:	f000 f808 	bl	8005a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a08:	f7ff febe 	bl	8005788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40022000 	.word	0x40022000

08005a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <HAL_InitTick+0x54>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_InitTick+0x58>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f935 	bl	8005ca6 <HAL_SYSTICK_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e00e      	b.n	8005a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b0f      	cmp	r3, #15
 8005a4a:	d80a      	bhi.n	8005a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a54:	f000 f90b 	bl	8005c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a58:	4a06      	ldr	r2, [pc, #24]	; (8005a74 <HAL_InitTick+0x5c>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000000 	.word	0x20000000
 8005a70:	20000008 	.word	0x20000008
 8005a74:	20000004 	.word	0x20000004

08005a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a7c:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_IncTick+0x1c>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_IncTick+0x20>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4413      	add	r3, r2
 8005a88:	4a03      	ldr	r2, [pc, #12]	; (8005a98 <HAL_IncTick+0x20>)
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	20000008 	.word	0x20000008
 8005a98:	2000025c 	.word	0x2000025c

08005a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8005aa0:	4b02      	ldr	r3, [pc, #8]	; (8005aac <HAL_GetTick+0x10>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	2000025c 	.word	0x2000025c

08005ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ab8:	f7ff fff0 	bl	8005a9c <HAL_GetTick>
 8005abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac8:	d005      	beq.n	8005ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005aca:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <HAL_Delay+0x44>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ad6:	bf00      	nop
 8005ad8:	f7ff ffe0 	bl	8005a9c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d8f7      	bhi.n	8005ad8 <HAL_Delay+0x28>
  {
  }
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000008 	.word	0x20000008

08005af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <__NVIC_SetPriorityGrouping+0x44>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b14:	4013      	ands	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b2a:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <__NVIC_SetPriorityGrouping+0x44>)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	60d3      	str	r3, [r2, #12]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	e000ed00 	.word	0xe000ed00

08005b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b44:	4b04      	ldr	r3, [pc, #16]	; (8005b58 <__NVIC_GetPriorityGrouping+0x18>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	0a1b      	lsrs	r3, r3, #8
 8005b4a:	f003 0307 	and.w	r3, r3, #7
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	e000ed00 	.word	0xe000ed00

08005b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	db0a      	blt.n	8005b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	490c      	ldr	r1, [pc, #48]	; (8005ba8 <__NVIC_SetPriority+0x4c>)
 8005b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7a:	0112      	lsls	r2, r2, #4
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	440b      	add	r3, r1
 8005b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b84:	e00a      	b.n	8005b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	4908      	ldr	r1, [pc, #32]	; (8005bac <__NVIC_SetPriority+0x50>)
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	3b04      	subs	r3, #4
 8005b94:	0112      	lsls	r2, r2, #4
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	440b      	add	r3, r1
 8005b9a:	761a      	strb	r2, [r3, #24]
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	e000e100 	.word	0xe000e100
 8005bac:	e000ed00 	.word	0xe000ed00

08005bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b089      	sub	sp, #36	; 0x24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f1c3 0307 	rsb	r3, r3, #7
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	bf28      	it	cs
 8005bce:	2304      	movcs	r3, #4
 8005bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d902      	bls.n	8005be0 <NVIC_EncodePriority+0x30>
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	3b03      	subs	r3, #3
 8005bde:	e000      	b.n	8005be2 <NVIC_EncodePriority+0x32>
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	43da      	mvns	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	43d9      	mvns	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c08:	4313      	orrs	r3, r2
         );
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3724      	adds	r7, #36	; 0x24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr

08005c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c24:	d301      	bcc.n	8005c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c26:	2301      	movs	r3, #1
 8005c28:	e00f      	b.n	8005c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c2a:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <SysTick_Config+0x40>)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c32:	210f      	movs	r1, #15
 8005c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c38:	f7ff ff90 	bl	8005b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c3c:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <SysTick_Config+0x40>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <SysTick_Config+0x40>)
 8005c44:	2207      	movs	r2, #7
 8005c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	e000e010 	.word	0xe000e010

08005c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff ff49 	bl	8005af8 <__NVIC_SetPriorityGrouping>
}
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	4603      	mov	r3, r0
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c80:	f7ff ff5e 	bl	8005b40 <__NVIC_GetPriorityGrouping>
 8005c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	6978      	ldr	r0, [r7, #20]
 8005c8c:	f7ff ff90 	bl	8005bb0 <NVIC_EncodePriority>
 8005c90:	4602      	mov	r2, r0
 8005c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff ff5f 	bl	8005b5c <__NVIC_SetPriority>
}
 8005c9e:	bf00      	nop
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff ffb0 	bl	8005c14 <SysTick_Config>
 8005cb4:	4603      	mov	r3, r0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b08b      	sub	sp, #44	; 0x2c
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cd2:	e179      	b.n	8005fc8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	f040 8168 	bne.w	8005fc2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	4a96      	ldr	r2, [pc, #600]	; (8005f50 <HAL_GPIO_Init+0x290>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d05e      	beq.n	8005dba <HAL_GPIO_Init+0xfa>
 8005cfc:	4a94      	ldr	r2, [pc, #592]	; (8005f50 <HAL_GPIO_Init+0x290>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d875      	bhi.n	8005dee <HAL_GPIO_Init+0x12e>
 8005d02:	4a94      	ldr	r2, [pc, #592]	; (8005f54 <HAL_GPIO_Init+0x294>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d058      	beq.n	8005dba <HAL_GPIO_Init+0xfa>
 8005d08:	4a92      	ldr	r2, [pc, #584]	; (8005f54 <HAL_GPIO_Init+0x294>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d86f      	bhi.n	8005dee <HAL_GPIO_Init+0x12e>
 8005d0e:	4a92      	ldr	r2, [pc, #584]	; (8005f58 <HAL_GPIO_Init+0x298>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d052      	beq.n	8005dba <HAL_GPIO_Init+0xfa>
 8005d14:	4a90      	ldr	r2, [pc, #576]	; (8005f58 <HAL_GPIO_Init+0x298>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d869      	bhi.n	8005dee <HAL_GPIO_Init+0x12e>
 8005d1a:	4a90      	ldr	r2, [pc, #576]	; (8005f5c <HAL_GPIO_Init+0x29c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d04c      	beq.n	8005dba <HAL_GPIO_Init+0xfa>
 8005d20:	4a8e      	ldr	r2, [pc, #568]	; (8005f5c <HAL_GPIO_Init+0x29c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d863      	bhi.n	8005dee <HAL_GPIO_Init+0x12e>
 8005d26:	4a8e      	ldr	r2, [pc, #568]	; (8005f60 <HAL_GPIO_Init+0x2a0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d046      	beq.n	8005dba <HAL_GPIO_Init+0xfa>
 8005d2c:	4a8c      	ldr	r2, [pc, #560]	; (8005f60 <HAL_GPIO_Init+0x2a0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d85d      	bhi.n	8005dee <HAL_GPIO_Init+0x12e>
 8005d32:	2b12      	cmp	r3, #18
 8005d34:	d82a      	bhi.n	8005d8c <HAL_GPIO_Init+0xcc>
 8005d36:	2b12      	cmp	r3, #18
 8005d38:	d859      	bhi.n	8005dee <HAL_GPIO_Init+0x12e>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <HAL_GPIO_Init+0x80>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005dbb 	.word	0x08005dbb
 8005d44:	08005d95 	.word	0x08005d95
 8005d48:	08005da7 	.word	0x08005da7
 8005d4c:	08005de9 	.word	0x08005de9
 8005d50:	08005def 	.word	0x08005def
 8005d54:	08005def 	.word	0x08005def
 8005d58:	08005def 	.word	0x08005def
 8005d5c:	08005def 	.word	0x08005def
 8005d60:	08005def 	.word	0x08005def
 8005d64:	08005def 	.word	0x08005def
 8005d68:	08005def 	.word	0x08005def
 8005d6c:	08005def 	.word	0x08005def
 8005d70:	08005def 	.word	0x08005def
 8005d74:	08005def 	.word	0x08005def
 8005d78:	08005def 	.word	0x08005def
 8005d7c:	08005def 	.word	0x08005def
 8005d80:	08005def 	.word	0x08005def
 8005d84:	08005d9d 	.word	0x08005d9d
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	4a75      	ldr	r2, [pc, #468]	; (8005f64 <HAL_GPIO_Init+0x2a4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005d92:	e02c      	b.n	8005dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	623b      	str	r3, [r7, #32]
          break;
 8005d9a:	e029      	b.n	8005df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	3304      	adds	r3, #4
 8005da2:	623b      	str	r3, [r7, #32]
          break;
 8005da4:	e024      	b.n	8005df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	3308      	adds	r3, #8
 8005dac:	623b      	str	r3, [r7, #32]
          break;
 8005dae:	e01f      	b.n	8005df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	330c      	adds	r3, #12
 8005db6:	623b      	str	r3, [r7, #32]
          break;
 8005db8:	e01a      	b.n	8005df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d102      	bne.n	8005dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005dc2:	2304      	movs	r3, #4
 8005dc4:	623b      	str	r3, [r7, #32]
          break;
 8005dc6:	e013      	b.n	8005df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d105      	bne.n	8005ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	611a      	str	r2, [r3, #16]
          break;
 8005dda:	e009      	b.n	8005df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ddc:	2308      	movs	r3, #8
 8005dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	615a      	str	r2, [r3, #20]
          break;
 8005de6:	e003      	b.n	8005df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005de8:	2300      	movs	r3, #0
 8005dea:	623b      	str	r3, [r7, #32]
          break;
 8005dec:	e000      	b.n	8005df0 <HAL_GPIO_Init+0x130>
          break;
 8005dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2bff      	cmp	r3, #255	; 0xff
 8005df4:	d801      	bhi.n	8005dfa <HAL_GPIO_Init+0x13a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	e001      	b.n	8005dfe <HAL_GPIO_Init+0x13e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2bff      	cmp	r3, #255	; 0xff
 8005e04:	d802      	bhi.n	8005e0c <HAL_GPIO_Init+0x14c>
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	e002      	b.n	8005e12 <HAL_GPIO_Init+0x152>
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	3b08      	subs	r3, #8
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	210f      	movs	r1, #15
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	401a      	ands	r2, r3
 8005e24:	6a39      	ldr	r1, [r7, #32]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 80c1 	beq.w	8005fc2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005e40:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <HAL_GPIO_Init+0x2a8>)
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	4a48      	ldr	r2, [pc, #288]	; (8005f68 <HAL_GPIO_Init+0x2a8>)
 8005e46:	f043 0301 	orr.w	r3, r3, #1
 8005e4a:	6193      	str	r3, [r2, #24]
 8005e4c:	4b46      	ldr	r3, [pc, #280]	; (8005f68 <HAL_GPIO_Init+0x2a8>)
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005e58:	4a44      	ldr	r2, [pc, #272]	; (8005f6c <HAL_GPIO_Init+0x2ac>)
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	089b      	lsrs	r3, r3, #2
 8005e5e:	3302      	adds	r3, #2
 8005e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	220f      	movs	r2, #15
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	43db      	mvns	r3, r3
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a3c      	ldr	r2, [pc, #240]	; (8005f70 <HAL_GPIO_Init+0x2b0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d01f      	beq.n	8005ec4 <HAL_GPIO_Init+0x204>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a3b      	ldr	r2, [pc, #236]	; (8005f74 <HAL_GPIO_Init+0x2b4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d019      	beq.n	8005ec0 <HAL_GPIO_Init+0x200>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a3a      	ldr	r2, [pc, #232]	; (8005f78 <HAL_GPIO_Init+0x2b8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <HAL_GPIO_Init+0x1fc>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a39      	ldr	r2, [pc, #228]	; (8005f7c <HAL_GPIO_Init+0x2bc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00d      	beq.n	8005eb8 <HAL_GPIO_Init+0x1f8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a38      	ldr	r2, [pc, #224]	; (8005f80 <HAL_GPIO_Init+0x2c0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <HAL_GPIO_Init+0x1f4>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a37      	ldr	r2, [pc, #220]	; (8005f84 <HAL_GPIO_Init+0x2c4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d101      	bne.n	8005eb0 <HAL_GPIO_Init+0x1f0>
 8005eac:	2305      	movs	r3, #5
 8005eae:	e00a      	b.n	8005ec6 <HAL_GPIO_Init+0x206>
 8005eb0:	2306      	movs	r3, #6
 8005eb2:	e008      	b.n	8005ec6 <HAL_GPIO_Init+0x206>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	e006      	b.n	8005ec6 <HAL_GPIO_Init+0x206>
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e004      	b.n	8005ec6 <HAL_GPIO_Init+0x206>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e002      	b.n	8005ec6 <HAL_GPIO_Init+0x206>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <HAL_GPIO_Init+0x206>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	f002 0203 	and.w	r2, r2, #3
 8005ecc:	0092      	lsls	r2, r2, #2
 8005ece:	4093      	lsls	r3, r2
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ed6:	4925      	ldr	r1, [pc, #148]	; (8005f6c <HAL_GPIO_Init+0x2ac>)
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	089b      	lsrs	r3, r3, #2
 8005edc:	3302      	adds	r3, #2
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ef0:	4b25      	ldr	r3, [pc, #148]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4924      	ldr	r1, [pc, #144]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	600b      	str	r3, [r1, #0]
 8005efc:	e006      	b.n	8005f0c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005efe:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	43db      	mvns	r3, r3
 8005f06:	4920      	ldr	r1, [pc, #128]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d006      	beq.n	8005f26 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005f18:	4b1b      	ldr	r3, [pc, #108]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	491a      	ldr	r1, [pc, #104]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	604b      	str	r3, [r1, #4]
 8005f24:	e006      	b.n	8005f34 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005f26:	4b18      	ldr	r3, [pc, #96]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	4916      	ldr	r1, [pc, #88]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d025      	beq.n	8005f8c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	4910      	ldr	r1, [pc, #64]	; (8005f88 <HAL_GPIO_Init+0x2c8>)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	608b      	str	r3, [r1, #8]
 8005f4c:	e025      	b.n	8005f9a <HAL_GPIO_Init+0x2da>
 8005f4e:	bf00      	nop
 8005f50:	10320000 	.word	0x10320000
 8005f54:	10310000 	.word	0x10310000
 8005f58:	10220000 	.word	0x10220000
 8005f5c:	10210000 	.word	0x10210000
 8005f60:	10120000 	.word	0x10120000
 8005f64:	10110000 	.word	0x10110000
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40010800 	.word	0x40010800
 8005f74:	40010c00 	.word	0x40010c00
 8005f78:	40011000 	.word	0x40011000
 8005f7c:	40011400 	.word	0x40011400
 8005f80:	40011800 	.word	0x40011800
 8005f84:	40011c00 	.word	0x40011c00
 8005f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005f8c:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <HAL_GPIO_Init+0x324>)
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	4913      	ldr	r1, [pc, #76]	; (8005fe4 <HAL_GPIO_Init+0x324>)
 8005f96:	4013      	ands	r3, r2
 8005f98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d006      	beq.n	8005fb4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <HAL_GPIO_Init+0x324>)
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	490e      	ldr	r1, [pc, #56]	; (8005fe4 <HAL_GPIO_Init+0x324>)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60cb      	str	r3, [r1, #12]
 8005fb2:	e006      	b.n	8005fc2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_GPIO_Init+0x324>)
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	4909      	ldr	r1, [pc, #36]	; (8005fe4 <HAL_GPIO_Init+0x324>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f47f ae7e 	bne.w	8005cd4 <HAL_GPIO_Init+0x14>
  }
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	372c      	adds	r7, #44	; 0x2c
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e12b      	b.n	8006252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff f9fa 	bl	8005408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	; 0x24
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0201 	bic.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800603a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800604a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800604c:	f001 fba0 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 8006050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4a81      	ldr	r2, [pc, #516]	; (800625c <HAL_I2C_Init+0x274>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d807      	bhi.n	800606c <HAL_I2C_Init+0x84>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4a80      	ldr	r2, [pc, #512]	; (8006260 <HAL_I2C_Init+0x278>)
 8006060:	4293      	cmp	r3, r2
 8006062:	bf94      	ite	ls
 8006064:	2301      	movls	r3, #1
 8006066:	2300      	movhi	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e006      	b.n	800607a <HAL_I2C_Init+0x92>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4a7d      	ldr	r2, [pc, #500]	; (8006264 <HAL_I2C_Init+0x27c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	bf94      	ite	ls
 8006074:	2301      	movls	r3, #1
 8006076:	2300      	movhi	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e0e7      	b.n	8006252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4a78      	ldr	r2, [pc, #480]	; (8006268 <HAL_I2C_Init+0x280>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	0c9b      	lsrs	r3, r3, #18
 800608c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4a6a      	ldr	r2, [pc, #424]	; (800625c <HAL_I2C_Init+0x274>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d802      	bhi.n	80060bc <HAL_I2C_Init+0xd4>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3301      	adds	r3, #1
 80060ba:	e009      	b.n	80060d0 <HAL_I2C_Init+0xe8>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	4a69      	ldr	r2, [pc, #420]	; (800626c <HAL_I2C_Init+0x284>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	099b      	lsrs	r3, r3, #6
 80060ce:	3301      	adds	r3, #1
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	495c      	ldr	r1, [pc, #368]	; (800625c <HAL_I2C_Init+0x274>)
 80060ec:	428b      	cmp	r3, r1
 80060ee:	d819      	bhi.n	8006124 <HAL_I2C_Init+0x13c>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	1e59      	subs	r1, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006104:	400b      	ands	r3, r1
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <HAL_I2C_Init+0x138>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1e59      	subs	r1, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	fbb1 f3f3 	udiv	r3, r1, r3
 8006118:	3301      	adds	r3, #1
 800611a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611e:	e051      	b.n	80061c4 <HAL_I2C_Init+0x1dc>
 8006120:	2304      	movs	r3, #4
 8006122:	e04f      	b.n	80061c4 <HAL_I2C_Init+0x1dc>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d111      	bne.n	8006150 <HAL_I2C_Init+0x168>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	1e58      	subs	r0, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	440b      	add	r3, r1
 800613a:	fbb0 f3f3 	udiv	r3, r0, r3
 800613e:	3301      	adds	r3, #1
 8006140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	e012      	b.n	8006176 <HAL_I2C_Init+0x18e>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	1e58      	subs	r0, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6859      	ldr	r1, [r3, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	0099      	lsls	r1, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	fbb0 f3f3 	udiv	r3, r0, r3
 8006166:	3301      	adds	r3, #1
 8006168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_I2C_Init+0x196>
 800617a:	2301      	movs	r3, #1
 800617c:	e022      	b.n	80061c4 <HAL_I2C_Init+0x1dc>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10e      	bne.n	80061a4 <HAL_I2C_Init+0x1bc>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1e58      	subs	r0, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6859      	ldr	r1, [r3, #4]
 800618e:	460b      	mov	r3, r1
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	440b      	add	r3, r1
 8006194:	fbb0 f3f3 	udiv	r3, r0, r3
 8006198:	3301      	adds	r3, #1
 800619a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	e00f      	b.n	80061c4 <HAL_I2C_Init+0x1dc>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1e58      	subs	r0, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6859      	ldr	r1, [r3, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	0099      	lsls	r1, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ba:	3301      	adds	r3, #1
 80061bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	6809      	ldr	r1, [r1, #0]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	69da      	ldr	r2, [r3, #28]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6911      	ldr	r1, [r2, #16]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68d2      	ldr	r2, [r2, #12]
 80061fe:	4311      	orrs	r1, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	430b      	orrs	r3, r1
 8006206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695a      	ldr	r2, [r3, #20]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	000186a0 	.word	0x000186a0
 8006260:	001e847f 	.word	0x001e847f
 8006264:	003d08ff 	.word	0x003d08ff
 8006268:	431bde83 	.word	0x431bde83
 800626c:	10624dd3 	.word	0x10624dd3

08006270 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	4608      	mov	r0, r1
 800627a:	4611      	mov	r1, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4603      	mov	r3, r0
 8006280:	817b      	strh	r3, [r7, #10]
 8006282:	460b      	mov	r3, r1
 8006284:	813b      	strh	r3, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800628a:	f7ff fc07 	bl	8005a9c <HAL_GetTick>
 800628e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b20      	cmp	r3, #32
 800629a:	f040 80d9 	bne.w	8006450 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	2319      	movs	r3, #25
 80062a4:	2201      	movs	r2, #1
 80062a6:	496d      	ldr	r1, [pc, #436]	; (800645c <HAL_I2C_Mem_Write+0x1ec>)
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fcc1 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062b4:	2302      	movs	r3, #2
 80062b6:	e0cc      	b.n	8006452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_I2C_Mem_Write+0x56>
 80062c2:	2302      	movs	r3, #2
 80062c4:	e0c5      	b.n	8006452 <HAL_I2C_Mem_Write+0x1e2>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d007      	beq.n	80062ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2221      	movs	r2, #33	; 0x21
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2240      	movs	r2, #64	; 0x40
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a3a      	ldr	r2, [r7, #32]
 8006316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800631c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4a4d      	ldr	r2, [pc, #308]	; (8006460 <HAL_I2C_Mem_Write+0x1f0>)
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800632e:	88f8      	ldrh	r0, [r7, #6]
 8006330:	893a      	ldrh	r2, [r7, #8]
 8006332:	8979      	ldrh	r1, [r7, #10]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	4603      	mov	r3, r0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 faf8 	bl	8006934 <I2C_RequestMemoryWrite>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d052      	beq.n	80063f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e081      	b.n	8006452 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 fd42 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b04      	cmp	r3, #4
 8006364:	d107      	bne.n	8006376 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e06b      	b.n	8006452 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	781a      	ldrb	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d11b      	bne.n	80063f0 <HAL_I2C_Mem_Write+0x180>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d017      	beq.n	80063f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1aa      	bne.n	800634e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063f8:	697a      	ldr	r2, [r7, #20]
 80063fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fd2e 	bl	8006e5e <I2C_WaitOnBTFFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	2b04      	cmp	r3, #4
 800640e:	d107      	bne.n	8006420 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e016      	b.n	8006452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e000      	b.n	8006452 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006450:	2302      	movs	r3, #2
  }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3718      	adds	r7, #24
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	00100002 	.word	0x00100002
 8006460:	ffff0000 	.word	0xffff0000

08006464 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08c      	sub	sp, #48	; 0x30
 8006468:	af02      	add	r7, sp, #8
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	4608      	mov	r0, r1
 800646e:	4611      	mov	r1, r2
 8006470:	461a      	mov	r2, r3
 8006472:	4603      	mov	r3, r0
 8006474:	817b      	strh	r3, [r7, #10]
 8006476:	460b      	mov	r3, r1
 8006478:	813b      	strh	r3, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006482:	f7ff fb0b 	bl	8005a9c <HAL_GetTick>
 8006486:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b20      	cmp	r3, #32
 8006492:	f040 8244 	bne.w	800691e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	2319      	movs	r3, #25
 800649c:	2201      	movs	r2, #1
 800649e:	4982      	ldr	r1, [pc, #520]	; (80066a8 <HAL_I2C_Mem_Read+0x244>)
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 fbc5 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80064ac:	2302      	movs	r3, #2
 80064ae:	e237      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_I2C_Mem_Read+0x5a>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e230      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d007      	beq.n	80064e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2222      	movs	r2, #34	; 0x22
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a62      	ldr	r2, [pc, #392]	; (80066ac <HAL_I2C_Mem_Read+0x248>)
 8006524:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006526:	88f8      	ldrh	r0, [r7, #6]
 8006528:	893a      	ldrh	r2, [r7, #8]
 800652a:	8979      	ldrh	r1, [r7, #10]
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	4603      	mov	r3, r0
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fa92 	bl	8006a60 <I2C_RequestMemoryRead>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e1ec      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d113      	bne.n	8006576 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654e:	2300      	movs	r3, #0
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e1c0      	b.n	80068f8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657a:	2b01      	cmp	r3, #1
 800657c:	d11e      	bne.n	80065bc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800658e:	b672      	cpsid	i
}
 8006590:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	61bb      	str	r3, [r7, #24]
 80065a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80065b8:	b662      	cpsie	i
}
 80065ba:	e035      	b.n	8006628 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d11e      	bne.n	8006602 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80065d4:	b672      	cpsid	i
}
 80065d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80065fe:	b662      	cpsie	i
}
 8006600:	e012      	b.n	8006628 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006610:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006628:	e166      	b.n	80068f8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662e:	2b03      	cmp	r3, #3
 8006630:	f200 811f 	bhi.w	8006872 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	2b01      	cmp	r3, #1
 800663a:	d123      	bne.n	8006684 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800663c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fc4d 	bl	8006ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e167      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666c:	3b01      	subs	r3, #1
 800666e:	b29a      	uxth	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006678:	b29b      	uxth	r3, r3
 800667a:	3b01      	subs	r3, #1
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006682:	e139      	b.n	80068f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006688:	2b02      	cmp	r3, #2
 800668a:	d152      	bne.n	8006732 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	2200      	movs	r2, #0
 8006694:	4906      	ldr	r1, [pc, #24]	; (80066b0 <HAL_I2C_Mem_Read+0x24c>)
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 faca 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d008      	beq.n	80066b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e13c      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
 80066a6:	bf00      	nop
 80066a8:	00100002 	.word	0x00100002
 80066ac:	ffff0000 	.word	0xffff0000
 80066b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80066b4:	b672      	cpsid	i
}
 80066b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691a      	ldr	r2, [r3, #16]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	b2d2      	uxtb	r2, r2
 80066d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80066fa:	b662      	cpsie	i
}
 80066fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006726:	b29b      	uxth	r3, r3
 8006728:	3b01      	subs	r3, #1
 800672a:	b29a      	uxth	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006730:	e0e2      	b.n	80068f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	2200      	movs	r2, #0
 800673a:	497b      	ldr	r1, [pc, #492]	; (8006928 <HAL_I2C_Mem_Read+0x4c4>)
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fa77 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0e9      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800675c:	b672      	cpsid	i
}
 800675e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006792:	4b66      	ldr	r3, [pc, #408]	; (800692c <HAL_I2C_Mem_Read+0x4c8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	4a65      	ldr	r2, [pc, #404]	; (8006930 <HAL_I2C_Mem_Read+0x4cc>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	0a1a      	lsrs	r2, r3, #8
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	00da      	lsls	r2, r3, #3
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d118      	bne.n	80067ea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f043 0220 	orr.w	r2, r3, #32
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80067da:	b662      	cpsie	i
}
 80067dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e09a      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b04      	cmp	r3, #4
 80067f6:	d1d9      	bne.n	80067ac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800683a:	b662      	cpsie	i
}
 800683c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006870:	e042      	b.n	80068f8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fb32 	bl	8006ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e04c      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d118      	bne.n	80068f8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f47f ae94 	bne.w	800662a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	e000      	b.n	8006920 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800691e:	2302      	movs	r3, #2
  }
}
 8006920:	4618      	mov	r0, r3
 8006922:	3728      	adds	r7, #40	; 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	00010004 	.word	0x00010004
 800692c:	20000000 	.word	0x20000000
 8006930:	14f8b589 	.word	0x14f8b589

08006934 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af02      	add	r7, sp, #8
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	4608      	mov	r0, r1
 800693e:	4611      	mov	r1, r2
 8006940:	461a      	mov	r2, r3
 8006942:	4603      	mov	r3, r0
 8006944:	817b      	strh	r3, [r7, #10]
 8006946:	460b      	mov	r3, r1
 8006948:	813b      	strh	r3, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800695c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	2200      	movs	r2, #0
 8006966:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f960 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00d      	beq.n	8006992 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006984:	d103      	bne.n	800698e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800698c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e05f      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006992:	897b      	ldrh	r3, [r7, #10]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	461a      	mov	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	492d      	ldr	r1, [pc, #180]	; (8006a5c <I2C_RequestMemoryWrite+0x128>)
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f998 	bl	8006cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e04c      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b8:	2300      	movs	r3, #0
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d0:	6a39      	ldr	r1, [r7, #32]
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fa02 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d107      	bne.n	80069f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e02b      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d105      	bne.n	8006a0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a00:	893b      	ldrh	r3, [r7, #8]
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	611a      	str	r2, [r3, #16]
 8006a0a:	e021      	b.n	8006a50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a0c:	893b      	ldrh	r3, [r7, #8]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1c:	6a39      	ldr	r1, [r7, #32]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f9dc 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00d      	beq.n	8006a46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d107      	bne.n	8006a42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e005      	b.n	8006a52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a46:	893b      	ldrh	r3, [r7, #8]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	00010002 	.word	0x00010002

08006a60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	817b      	strh	r3, [r7, #10]
 8006a72:	460b      	mov	r3, r1
 8006a74:	813b      	strh	r3, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f8c2 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac0:	d103      	bne.n	8006aca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e0aa      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ace:	897b      	ldrh	r3, [r7, #10]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006adc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	4952      	ldr	r1, [pc, #328]	; (8006c2c <I2C_RequestMemoryRead+0x1cc>)
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f8fa 	bl	8006cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e097      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0c:	6a39      	ldr	r1, [r7, #32]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f964 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d107      	bne.n	8006b32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e076      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d105      	bne.n	8006b48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b3c:	893b      	ldrh	r3, [r7, #8]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	611a      	str	r2, [r3, #16]
 8006b46:	e021      	b.n	8006b8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b48:	893b      	ldrh	r3, [r7, #8]
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b2da      	uxtb	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b58:	6a39      	ldr	r1, [r7, #32]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 f93e 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00d      	beq.n	8006b82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d107      	bne.n	8006b7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e050      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b82:	893b      	ldrh	r3, [r7, #8]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8e:	6a39      	ldr	r1, [r7, #32]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f923 	bl	8006ddc <I2C_WaitOnTXEFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00d      	beq.n	8006bb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d107      	bne.n	8006bb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e035      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f000 f82b 	bl	8006c30 <I2C_WaitOnFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00d      	beq.n	8006bfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bee:	d103      	bne.n	8006bf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e013      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bfc:	897b      	ldrh	r3, [r7, #10]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	6a3a      	ldr	r2, [r7, #32]
 8006c10:	4906      	ldr	r1, [pc, #24]	; (8006c2c <I2C_RequestMemoryRead+0x1cc>)
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f863 	bl	8006cde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	00010002 	.word	0x00010002

08006c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c40:	e025      	b.n	8006c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c48:	d021      	beq.n	8006c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c4a:	f7fe ff27 	bl	8005a9c <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d302      	bcc.n	8006c60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d116      	bne.n	8006c8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e023      	b.n	8006cd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	0c1b      	lsrs	r3, r3, #16
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d10d      	bne.n	8006cb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	43da      	mvns	r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf0c      	ite	eq
 8006caa:	2301      	moveq	r3, #1
 8006cac:	2300      	movne	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	e00c      	b.n	8006cce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	43da      	mvns	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bf0c      	ite	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	2300      	movne	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	461a      	mov	r2, r3
 8006cce:	79fb      	ldrb	r3, [r7, #7]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d0b6      	beq.n	8006c42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	607a      	str	r2, [r7, #4]
 8006cea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cec:	e051      	b.n	8006d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cfc:	d123      	bne.n	8006d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f043 0204 	orr.w	r2, r3, #4
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e046      	b.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d4c:	d021      	beq.n	8006d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4e:	f7fe fea5 	bl	8005a9c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d302      	bcc.n	8006d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d116      	bne.n	8006d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f043 0220 	orr.w	r2, r3, #32
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e020      	b.n	8006dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d10c      	bne.n	8006db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	43da      	mvns	r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4013      	ands	r3, r2
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bf14      	ite	ne
 8006dae:	2301      	movne	r3, #1
 8006db0:	2300      	moveq	r3, #0
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	e00b      	b.n	8006dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	43da      	mvns	r2, r3
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	bf14      	ite	ne
 8006dc8:	2301      	movne	r3, #1
 8006dca:	2300      	moveq	r3, #0
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d18d      	bne.n	8006cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006de8:	e02d      	b.n	8006e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 f8ce 	bl	8006f8c <I2C_IsAcknowledgeFailed>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e02d      	b.n	8006e56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e00:	d021      	beq.n	8006e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e02:	f7fe fe4b 	bl	8005a9c <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d302      	bcc.n	8006e18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d116      	bne.n	8006e46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	f043 0220 	orr.w	r2, r3, #32
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e007      	b.n	8006e56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b80      	cmp	r3, #128	; 0x80
 8006e52:	d1ca      	bne.n	8006dea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e6a:	e02d      	b.n	8006ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 f88d 	bl	8006f8c <I2C_IsAcknowledgeFailed>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e02d      	b.n	8006ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e82:	d021      	beq.n	8006ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e84:	f7fe fe0a 	bl	8005a9c <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d302      	bcc.n	8006e9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d116      	bne.n	8006ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	f043 0220 	orr.w	r2, r3, #32
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e007      	b.n	8006ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d1ca      	bne.n	8006e6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006eec:	e042      	b.n	8006f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d119      	bne.n	8006f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0210 	mvn.w	r2, #16
 8006f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e029      	b.n	8006f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f30:	f7fe fdb4 	bl	8005a9c <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d302      	bcc.n	8006f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d116      	bne.n	8006f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f043 0220 	orr.w	r2, r3, #32
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e007      	b.n	8006f84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7e:	2b40      	cmp	r3, #64	; 0x40
 8006f80:	d1b5      	bne.n	8006eee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa2:	d11b      	bne.n	8006fdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	f043 0204 	orr.w	r2, r3, #4
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e000      	b.n	8006fde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e272      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8087 	beq.w	8007116 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007008:	4b92      	ldr	r3, [pc, #584]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f003 030c 	and.w	r3, r3, #12
 8007010:	2b04      	cmp	r3, #4
 8007012:	d00c      	beq.n	800702e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007014:	4b8f      	ldr	r3, [pc, #572]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f003 030c 	and.w	r3, r3, #12
 800701c:	2b08      	cmp	r3, #8
 800701e:	d112      	bne.n	8007046 <HAL_RCC_OscConfig+0x5e>
 8007020:	4b8c      	ldr	r3, [pc, #560]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800702c:	d10b      	bne.n	8007046 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702e:	4b89      	ldr	r3, [pc, #548]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d06c      	beq.n	8007114 <HAL_RCC_OscConfig+0x12c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d168      	bne.n	8007114 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e24c      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704e:	d106      	bne.n	800705e <HAL_RCC_OscConfig+0x76>
 8007050:	4b80      	ldr	r3, [pc, #512]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a7f      	ldr	r2, [pc, #508]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	e02e      	b.n	80070bc <HAL_RCC_OscConfig+0xd4>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0x98>
 8007066:	4b7b      	ldr	r3, [pc, #492]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a7a      	ldr	r2, [pc, #488]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 800706c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4b78      	ldr	r3, [pc, #480]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a77      	ldr	r2, [pc, #476]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007078:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e01d      	b.n	80070bc <HAL_RCC_OscConfig+0xd4>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007088:	d10c      	bne.n	80070a4 <HAL_RCC_OscConfig+0xbc>
 800708a:	4b72      	ldr	r3, [pc, #456]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a71      	ldr	r2, [pc, #452]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	4b6f      	ldr	r3, [pc, #444]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a6e      	ldr	r2, [pc, #440]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 800709c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	e00b      	b.n	80070bc <HAL_RCC_OscConfig+0xd4>
 80070a4:	4b6b      	ldr	r3, [pc, #428]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a6a      	ldr	r2, [pc, #424]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 80070aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	4b68      	ldr	r3, [pc, #416]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a67      	ldr	r2, [pc, #412]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 80070b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d013      	beq.n	80070ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c4:	f7fe fcea 	bl	8005a9c <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070cc:	f7fe fce6 	bl	8005a9c <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b64      	cmp	r3, #100	; 0x64
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e200      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070de:	4b5d      	ldr	r3, [pc, #372]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f0      	beq.n	80070cc <HAL_RCC_OscConfig+0xe4>
 80070ea:	e014      	b.n	8007116 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ec:	f7fe fcd6 	bl	8005a9c <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070f4:	f7fe fcd2 	bl	8005a9c <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b64      	cmp	r3, #100	; 0x64
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e1ec      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007106:	4b53      	ldr	r3, [pc, #332]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x10c>
 8007112:	e000      	b.n	8007116 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d063      	beq.n	80071ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007122:	4b4c      	ldr	r3, [pc, #304]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f003 030c 	and.w	r3, r3, #12
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00b      	beq.n	8007146 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800712e:	4b49      	ldr	r3, [pc, #292]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f003 030c 	and.w	r3, r3, #12
 8007136:	2b08      	cmp	r3, #8
 8007138:	d11c      	bne.n	8007174 <HAL_RCC_OscConfig+0x18c>
 800713a:	4b46      	ldr	r3, [pc, #280]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d116      	bne.n	8007174 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007146:	4b43      	ldr	r3, [pc, #268]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <HAL_RCC_OscConfig+0x176>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d001      	beq.n	800715e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e1c0      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800715e:	4b3d      	ldr	r3, [pc, #244]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	4939      	ldr	r1, [pc, #228]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 800716e:	4313      	orrs	r3, r2
 8007170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007172:	e03a      	b.n	80071ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d020      	beq.n	80071be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800717c:	4b36      	ldr	r3, [pc, #216]	; (8007258 <HAL_RCC_OscConfig+0x270>)
 800717e:	2201      	movs	r2, #1
 8007180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007182:	f7fe fc8b 	bl	8005a9c <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800718a:	f7fe fc87 	bl	8005a9c <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e1a1      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800719c:	4b2d      	ldr	r3, [pc, #180]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f0      	beq.n	800718a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071a8:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	4927      	ldr	r1, [pc, #156]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	600b      	str	r3, [r1, #0]
 80071bc:	e015      	b.n	80071ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071be:	4b26      	ldr	r3, [pc, #152]	; (8007258 <HAL_RCC_OscConfig+0x270>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c4:	f7fe fc6a 	bl	8005a9c <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071cc:	f7fe fc66 	bl	8005a9c <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e180      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071de:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f0      	bne.n	80071cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d03a      	beq.n	800726c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d019      	beq.n	8007232 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071fe:	4b17      	ldr	r3, [pc, #92]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007200:	2201      	movs	r2, #1
 8007202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007204:	f7fe fc4a 	bl	8005a9c <HAL_GetTick>
 8007208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800720c:	f7fe fc46 	bl	8005a9c <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e160      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <HAL_RCC_OscConfig+0x26c>)
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f0      	beq.n	800720c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800722a:	2001      	movs	r0, #1
 800722c:	f000 fad8 	bl	80077e0 <RCC_Delay>
 8007230:	e01c      	b.n	800726c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007232:	4b0a      	ldr	r3, [pc, #40]	; (800725c <HAL_RCC_OscConfig+0x274>)
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007238:	f7fe fc30 	bl	8005a9c <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800723e:	e00f      	b.n	8007260 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007240:	f7fe fc2c 	bl	8005a9c <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d908      	bls.n	8007260 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e146      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
 8007252:	bf00      	nop
 8007254:	40021000 	.word	0x40021000
 8007258:	42420000 	.word	0x42420000
 800725c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007260:	4b92      	ldr	r3, [pc, #584]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e9      	bne.n	8007240 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80a6 	beq.w	80073c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800727a:	2300      	movs	r3, #0
 800727c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800727e:	4b8b      	ldr	r3, [pc, #556]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728a:	4b88      	ldr	r3, [pc, #544]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	4a87      	ldr	r2, [pc, #540]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007294:	61d3      	str	r3, [r2, #28]
 8007296:	4b85      	ldr	r3, [pc, #532]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a2:	2301      	movs	r3, #1
 80072a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a6:	4b82      	ldr	r3, [pc, #520]	; (80074b0 <HAL_RCC_OscConfig+0x4c8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d118      	bne.n	80072e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072b2:	4b7f      	ldr	r3, [pc, #508]	; (80074b0 <HAL_RCC_OscConfig+0x4c8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a7e      	ldr	r2, [pc, #504]	; (80074b0 <HAL_RCC_OscConfig+0x4c8>)
 80072b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072be:	f7fe fbed 	bl	8005a9c <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c4:	e008      	b.n	80072d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c6:	f7fe fbe9 	bl	8005a9c <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b64      	cmp	r3, #100	; 0x64
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e103      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d8:	4b75      	ldr	r3, [pc, #468]	; (80074b0 <HAL_RCC_OscConfig+0x4c8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f0      	beq.n	80072c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d106      	bne.n	80072fa <HAL_RCC_OscConfig+0x312>
 80072ec:	4b6f      	ldr	r3, [pc, #444]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	4a6e      	ldr	r2, [pc, #440]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6213      	str	r3, [r2, #32]
 80072f8:	e02d      	b.n	8007356 <HAL_RCC_OscConfig+0x36e>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <HAL_RCC_OscConfig+0x334>
 8007302:	4b6a      	ldr	r3, [pc, #424]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	4a69      	ldr	r2, [pc, #420]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007308:	f023 0301 	bic.w	r3, r3, #1
 800730c:	6213      	str	r3, [r2, #32]
 800730e:	4b67      	ldr	r3, [pc, #412]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	4a66      	ldr	r2, [pc, #408]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007314:	f023 0304 	bic.w	r3, r3, #4
 8007318:	6213      	str	r3, [r2, #32]
 800731a:	e01c      	b.n	8007356 <HAL_RCC_OscConfig+0x36e>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	2b05      	cmp	r3, #5
 8007322:	d10c      	bne.n	800733e <HAL_RCC_OscConfig+0x356>
 8007324:	4b61      	ldr	r3, [pc, #388]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	4a60      	ldr	r2, [pc, #384]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800732a:	f043 0304 	orr.w	r3, r3, #4
 800732e:	6213      	str	r3, [r2, #32]
 8007330:	4b5e      	ldr	r3, [pc, #376]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	4a5d      	ldr	r2, [pc, #372]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6213      	str	r3, [r2, #32]
 800733c:	e00b      	b.n	8007356 <HAL_RCC_OscConfig+0x36e>
 800733e:	4b5b      	ldr	r3, [pc, #364]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	4a5a      	ldr	r2, [pc, #360]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6213      	str	r3, [r2, #32]
 800734a:	4b58      	ldr	r3, [pc, #352]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	4a57      	ldr	r2, [pc, #348]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007350:	f023 0304 	bic.w	r3, r3, #4
 8007354:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d015      	beq.n	800738a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800735e:	f7fe fb9d 	bl	8005a9c <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007364:	e00a      	b.n	800737c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007366:	f7fe fb99 	bl	8005a9c <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	f241 3288 	movw	r2, #5000	; 0x1388
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e0b1      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800737c:	4b4b      	ldr	r3, [pc, #300]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0ee      	beq.n	8007366 <HAL_RCC_OscConfig+0x37e>
 8007388:	e014      	b.n	80073b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800738a:	f7fe fb87 	bl	8005a9c <HAL_GetTick>
 800738e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007390:	e00a      	b.n	80073a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007392:	f7fe fb83 	bl	8005a9c <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d901      	bls.n	80073a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e09b      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073a8:	4b40      	ldr	r3, [pc, #256]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1ee      	bne.n	8007392 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d105      	bne.n	80073c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073ba:	4b3c      	ldr	r3, [pc, #240]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	4a3b      	ldr	r2, [pc, #236]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80073c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8087 	beq.w	80074de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073d0:	4b36      	ldr	r3, [pc, #216]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f003 030c 	and.w	r3, r3, #12
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d061      	beq.n	80074a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d146      	bne.n	8007472 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e4:	4b33      	ldr	r3, [pc, #204]	; (80074b4 <HAL_RCC_OscConfig+0x4cc>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ea:	f7fe fb57 	bl	8005a9c <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073f0:	e008      	b.n	8007404 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f2:	f7fe fb53 	bl	8005a9c <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e06d      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007404:	4b29      	ldr	r3, [pc, #164]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1f0      	bne.n	80073f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007418:	d108      	bne.n	800742c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800741a:	4b24      	ldr	r3, [pc, #144]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	4921      	ldr	r1, [pc, #132]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007428:	4313      	orrs	r3, r2
 800742a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800742c:	4b1f      	ldr	r3, [pc, #124]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a19      	ldr	r1, [r3, #32]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	430b      	orrs	r3, r1
 800743e:	491b      	ldr	r1, [pc, #108]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007440:	4313      	orrs	r3, r2
 8007442:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <HAL_RCC_OscConfig+0x4cc>)
 8007446:	2201      	movs	r2, #1
 8007448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744a:	f7fe fb27 	bl	8005a9c <HAL_GetTick>
 800744e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007450:	e008      	b.n	8007464 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007452:	f7fe fb23 	bl	8005a9c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e03d      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0f0      	beq.n	8007452 <HAL_RCC_OscConfig+0x46a>
 8007470:	e035      	b.n	80074de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007472:	4b10      	ldr	r3, [pc, #64]	; (80074b4 <HAL_RCC_OscConfig+0x4cc>)
 8007474:	2200      	movs	r2, #0
 8007476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007478:	f7fe fb10 	bl	8005a9c <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007480:	f7fe fb0c 	bl	8005a9c <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e026      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007492:	4b06      	ldr	r3, [pc, #24]	; (80074ac <HAL_RCC_OscConfig+0x4c4>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1f0      	bne.n	8007480 <HAL_RCC_OscConfig+0x498>
 800749e:	e01e      	b.n	80074de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d107      	bne.n	80074b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e019      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
 80074ac:	40021000 	.word	0x40021000
 80074b0:	40007000 	.word	0x40007000
 80074b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <HAL_RCC_OscConfig+0x500>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d106      	bne.n	80074da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d001      	beq.n	80074de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e000      	b.n	80074e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	40021000 	.word	0x40021000

080074ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0d0      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007500:	4b6a      	ldr	r3, [pc, #424]	; (80076ac <HAL_RCC_ClockConfig+0x1c0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d910      	bls.n	8007530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800750e:	4b67      	ldr	r3, [pc, #412]	; (80076ac <HAL_RCC_ClockConfig+0x1c0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f023 0207 	bic.w	r2, r3, #7
 8007516:	4965      	ldr	r1, [pc, #404]	; (80076ac <HAL_RCC_ClockConfig+0x1c0>)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	4313      	orrs	r3, r2
 800751c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800751e:	4b63      	ldr	r3, [pc, #396]	; (80076ac <HAL_RCC_ClockConfig+0x1c0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d001      	beq.n	8007530 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e0b8      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d020      	beq.n	800757e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007548:	4b59      	ldr	r3, [pc, #356]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a58      	ldr	r2, [pc, #352]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 800754e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007552:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0308 	and.w	r3, r3, #8
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007560:	4b53      	ldr	r3, [pc, #332]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4a52      	ldr	r2, [pc, #328]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007566:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800756a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800756c:	4b50      	ldr	r3, [pc, #320]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	494d      	ldr	r1, [pc, #308]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 800757a:	4313      	orrs	r3, r2
 800757c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d040      	beq.n	800760c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d107      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007592:	4b47      	ldr	r3, [pc, #284]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d115      	bne.n	80075ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e07f      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d107      	bne.n	80075ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075aa:	4b41      	ldr	r3, [pc, #260]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e073      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ba:	4b3d      	ldr	r3, [pc, #244]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e06b      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ca:	4b39      	ldr	r3, [pc, #228]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f023 0203 	bic.w	r2, r3, #3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	4936      	ldr	r1, [pc, #216]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075dc:	f7fe fa5e 	bl	8005a9c <HAL_GetTick>
 80075e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e2:	e00a      	b.n	80075fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075e4:	f7fe fa5a 	bl	8005a9c <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e053      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075fa:	4b2d      	ldr	r3, [pc, #180]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f003 020c 	and.w	r2, r3, #12
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	429a      	cmp	r2, r3
 800760a:	d1eb      	bne.n	80075e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800760c:	4b27      	ldr	r3, [pc, #156]	; (80076ac <HAL_RCC_ClockConfig+0x1c0>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d210      	bcs.n	800763c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800761a:	4b24      	ldr	r3, [pc, #144]	; (80076ac <HAL_RCC_ClockConfig+0x1c0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f023 0207 	bic.w	r2, r3, #7
 8007622:	4922      	ldr	r1, [pc, #136]	; (80076ac <HAL_RCC_ClockConfig+0x1c0>)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	4313      	orrs	r3, r2
 8007628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <HAL_RCC_ClockConfig+0x1c0>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0307 	and.w	r3, r3, #7
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e032      	b.n	80076a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007648:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4916      	ldr	r1, [pc, #88]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007656:	4313      	orrs	r3, r2
 8007658:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007666:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	490e      	ldr	r1, [pc, #56]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007676:	4313      	orrs	r3, r2
 8007678:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800767a:	f000 f821 	bl	80076c0 <HAL_RCC_GetSysClockFreq>
 800767e:	4602      	mov	r2, r0
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_RCC_ClockConfig+0x1c4>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	091b      	lsrs	r3, r3, #4
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	490a      	ldr	r1, [pc, #40]	; (80076b4 <HAL_RCC_ClockConfig+0x1c8>)
 800768c:	5ccb      	ldrb	r3, [r1, r3]
 800768e:	fa22 f303 	lsr.w	r3, r2, r3
 8007692:	4a09      	ldr	r2, [pc, #36]	; (80076b8 <HAL_RCC_ClockConfig+0x1cc>)
 8007694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007696:	4b09      	ldr	r3, [pc, #36]	; (80076bc <HAL_RCC_ClockConfig+0x1d0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe f9bc 	bl	8005a18 <HAL_InitTick>

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40022000 	.word	0x40022000
 80076b0:	40021000 	.word	0x40021000
 80076b4:	0800aa20 	.word	0x0800aa20
 80076b8:	20000000 	.word	0x20000000
 80076bc:	20000004 	.word	0x20000004

080076c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c0:	b490      	push	{r4, r7}
 80076c2:	b08a      	sub	sp, #40	; 0x28
 80076c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80076c6:	4b29      	ldr	r3, [pc, #164]	; (800776c <HAL_RCC_GetSysClockFreq+0xac>)
 80076c8:	1d3c      	adds	r4, r7, #4
 80076ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80076cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80076d0:	f240 2301 	movw	r3, #513	; 0x201
 80076d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61fb      	str	r3, [r7, #28]
 80076da:	2300      	movs	r3, #0
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	2300      	movs	r3, #0
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
 80076e2:	2300      	movs	r3, #0
 80076e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_RCC_GetSysClockFreq+0xb0>)
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	f003 030c 	and.w	r3, r3, #12
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d002      	beq.n	8007700 <HAL_RCC_GetSysClockFreq+0x40>
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d003      	beq.n	8007706 <HAL_RCC_GetSysClockFreq+0x46>
 80076fe:	e02b      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007700:	4b1c      	ldr	r3, [pc, #112]	; (8007774 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007702:	623b      	str	r3, [r7, #32]
      break;
 8007704:	e02b      	b.n	800775e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	0c9b      	lsrs	r3, r3, #18
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	3328      	adds	r3, #40	; 0x28
 8007710:	443b      	add	r3, r7
 8007712:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007716:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d012      	beq.n	8007748 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	0c5b      	lsrs	r3, r3, #17
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	3328      	adds	r3, #40	; 0x28
 800772e:	443b      	add	r3, r7
 8007730:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007734:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	4a0e      	ldr	r2, [pc, #56]	; (8007774 <HAL_RCC_GetSysClockFreq+0xb4>)
 800773a:	fb03 f202 	mul.w	r2, r3, r2
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	fbb2 f3f3 	udiv	r3, r2, r3
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
 8007746:	e004      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	4a0b      	ldr	r2, [pc, #44]	; (8007778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800774c:	fb02 f303 	mul.w	r3, r2, r3
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	623b      	str	r3, [r7, #32]
      break;
 8007756:	e002      	b.n	800775e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <HAL_RCC_GetSysClockFreq+0xb4>)
 800775a:	623b      	str	r3, [r7, #32]
      break;
 800775c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800775e:	6a3b      	ldr	r3, [r7, #32]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3728      	adds	r7, #40	; 0x28
 8007764:	46bd      	mov	sp, r7
 8007766:	bc90      	pop	{r4, r7}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	08009e6c 	.word	0x08009e6c
 8007770:	40021000 	.word	0x40021000
 8007774:	007a1200 	.word	0x007a1200
 8007778:	003d0900 	.word	0x003d0900

0800777c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007780:	4b02      	ldr	r3, [pc, #8]	; (800778c <HAL_RCC_GetHCLKFreq+0x10>)
 8007782:	681b      	ldr	r3, [r3, #0]
}
 8007784:	4618      	mov	r0, r3
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr
 800778c:	20000000 	.word	0x20000000

08007790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007794:	f7ff fff2 	bl	800777c <HAL_RCC_GetHCLKFreq>
 8007798:	4602      	mov	r2, r0
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	f003 0307 	and.w	r3, r3, #7
 80077a4:	4903      	ldr	r1, [pc, #12]	; (80077b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077a6:	5ccb      	ldrb	r3, [r1, r3]
 80077a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40021000 	.word	0x40021000
 80077b4:	0800aa30 	.word	0x0800aa30

080077b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077bc:	f7ff ffde 	bl	800777c <HAL_RCC_GetHCLKFreq>
 80077c0:	4602      	mov	r2, r0
 80077c2:	4b05      	ldr	r3, [pc, #20]	; (80077d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	0adb      	lsrs	r3, r3, #11
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	4903      	ldr	r1, [pc, #12]	; (80077dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80077ce:	5ccb      	ldrb	r3, [r1, r3]
 80077d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40021000 	.word	0x40021000
 80077dc:	0800aa30 	.word	0x0800aa30

080077e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <RCC_Delay+0x34>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a0a      	ldr	r2, [pc, #40]	; (8007818 <RCC_Delay+0x38>)
 80077ee:	fba2 2303 	umull	r2, r3, r2, r3
 80077f2:	0a5b      	lsrs	r3, r3, #9
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077fc:	bf00      	nop
  }
  while (Delay --);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	1e5a      	subs	r2, r3, #1
 8007802:	60fa      	str	r2, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f9      	bne.n	80077fc <RCC_Delay+0x1c>
}
 8007808:	bf00      	nop
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr
 8007814:	20000000 	.word	0x20000000
 8007818:	10624dd3 	.word	0x10624dd3

0800781c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e03f      	b.n	80078ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fe f860 	bl	8005908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2224      	movs	r2, #36	; 0x24
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800785e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9a7 	bl	8007bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b08a      	sub	sp, #40	; 0x28
 80078ba:	af02      	add	r7, sp, #8
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d17c      	bne.n	80079d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_UART_Transmit+0x2c>
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e075      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_UART_Transmit+0x3e>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e06e      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2221      	movs	r2, #33	; 0x21
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800790a:	f7fe f8c7 	bl	8005a9c <HAL_GetTick>
 800790e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007924:	d108      	bne.n	8007938 <HAL_UART_Transmit+0x82>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	61bb      	str	r3, [r7, #24]
 8007936:	e003      	b.n	8007940 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007948:	e02a      	b.n	80079a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2200      	movs	r2, #0
 8007952:	2180      	movs	r1, #128	; 0x80
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f8e2 	bl	8007b1e <UART_WaitOnFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e036      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	3302      	adds	r3, #2
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	e007      	b.n	8007992 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3301      	adds	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1cf      	bne.n	800794a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2200      	movs	r2, #0
 80079b2:	2140      	movs	r1, #64	; 0x40
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f8b2 	bl	8007b1e <UART_WaitOnFlagUntilTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e006      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b08a      	sub	sp, #40	; 0x28
 80079de:	af02      	add	r7, sp, #8
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	f040 808c 	bne.w	8007b14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <HAL_UART_Receive+0x2e>
 8007a02:	88fb      	ldrh	r3, [r7, #6]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e084      	b.n	8007b16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d101      	bne.n	8007a1a <HAL_UART_Receive+0x40>
 8007a16:	2302      	movs	r3, #2
 8007a18:	e07d      	b.n	8007b16 <HAL_UART_Receive+0x13c>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2222      	movs	r2, #34	; 0x22
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a36:	f7fe f831 	bl	8005a9c <HAL_GetTick>
 8007a3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	88fa      	ldrh	r2, [r7, #6]
 8007a40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	88fa      	ldrh	r2, [r7, #6]
 8007a46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a50:	d108      	bne.n	8007a64 <HAL_UART_Receive+0x8a>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	e003      	b.n	8007a6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007a74:	e043      	b.n	8007afe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2120      	movs	r1, #32
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f84c 	bl	8007b1e <UART_WaitOnFlagUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e042      	b.n	8007b16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10c      	bne.n	8007ab0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	3302      	adds	r3, #2
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e01f      	b.n	8007af0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ab8:	d007      	beq.n	8007aca <HAL_UART_Receive+0xf0>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <HAL_UART_Receive+0xfe>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	e008      	b.n	8007aea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	3301      	adds	r3, #1
 8007aee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1b6      	bne.n	8007a76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007b10:	2300      	movs	r3, #0
 8007b12:	e000      	b.n	8007b16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007b14:	2302      	movs	r3, #2
  }
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2e:	e02c      	b.n	8007b8a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b36:	d028      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8007b3e:	f7fd ffad 	bl	8005a9c <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d21d      	bcs.n	8007b8a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b5c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695a      	ldr	r2, [r3, #20]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e00f      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4013      	ands	r3, r2
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d0c3      	beq.n	8007b30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007bee:	f023 030c 	bic.w	r3, r3, #12
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a2c      	ldr	r2, [pc, #176]	; (8007cc8 <UART_SetConfig+0x114>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d103      	bne.n	8007c24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c1c:	f7ff fdcc 	bl	80077b8 <HAL_RCC_GetPCLK2Freq>
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	e002      	b.n	8007c2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c24:	f7ff fdb4 	bl	8007790 <HAL_RCC_GetPCLK1Freq>
 8007c28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	009a      	lsls	r2, r3, #2
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c40:	4a22      	ldr	r2, [pc, #136]	; (8007ccc <UART_SetConfig+0x118>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	0119      	lsls	r1, r3, #4
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009a      	lsls	r2, r3, #2
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c60:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <UART_SetConfig+0x118>)
 8007c62:	fba3 0302 	umull	r0, r3, r3, r2
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	2064      	movs	r0, #100	; 0x64
 8007c6a:	fb00 f303 	mul.w	r3, r0, r3
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	3332      	adds	r3, #50	; 0x32
 8007c74:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <UART_SetConfig+0x118>)
 8007c76:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7a:	095b      	lsrs	r3, r3, #5
 8007c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c80:	4419      	add	r1, r3
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009a      	lsls	r2, r3, #2
 8007c8c:	441a      	add	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <UART_SetConfig+0x118>)
 8007c9a:	fba3 0302 	umull	r0, r3, r3, r2
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	2064      	movs	r0, #100	; 0x64
 8007ca2:	fb00 f303 	mul.w	r3, r0, r3
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	011b      	lsls	r3, r3, #4
 8007caa:	3332      	adds	r3, #50	; 0x32
 8007cac:	4a07      	ldr	r2, [pc, #28]	; (8007ccc <UART_SetConfig+0x118>)
 8007cae:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	f003 020f 	and.w	r2, r3, #15
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	440a      	add	r2, r1
 8007cbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007cc0:	bf00      	nop
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	40013800 	.word	0x40013800
 8007ccc:	51eb851f 	.word	0x51eb851f

08007cd0 <__errno>:
 8007cd0:	4b01      	ldr	r3, [pc, #4]	; (8007cd8 <__errno+0x8>)
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	2000000c 	.word	0x2000000c

08007cdc <__libc_init_array>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	2600      	movs	r6, #0
 8007ce0:	4d0c      	ldr	r5, [pc, #48]	; (8007d14 <__libc_init_array+0x38>)
 8007ce2:	4c0d      	ldr	r4, [pc, #52]	; (8007d18 <__libc_init_array+0x3c>)
 8007ce4:	1b64      	subs	r4, r4, r5
 8007ce6:	10a4      	asrs	r4, r4, #2
 8007ce8:	42a6      	cmp	r6, r4
 8007cea:	d109      	bne.n	8007d00 <__libc_init_array+0x24>
 8007cec:	f002 f802 	bl	8009cf4 <_init>
 8007cf0:	2600      	movs	r6, #0
 8007cf2:	4d0a      	ldr	r5, [pc, #40]	; (8007d1c <__libc_init_array+0x40>)
 8007cf4:	4c0a      	ldr	r4, [pc, #40]	; (8007d20 <__libc_init_array+0x44>)
 8007cf6:	1b64      	subs	r4, r4, r5
 8007cf8:	10a4      	asrs	r4, r4, #2
 8007cfa:	42a6      	cmp	r6, r4
 8007cfc:	d105      	bne.n	8007d0a <__libc_init_array+0x2e>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d04:	4798      	blx	r3
 8007d06:	3601      	adds	r6, #1
 8007d08:	e7ee      	b.n	8007ce8 <__libc_init_array+0xc>
 8007d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0e:	4798      	blx	r3
 8007d10:	3601      	adds	r6, #1
 8007d12:	e7f2      	b.n	8007cfa <__libc_init_array+0x1e>
 8007d14:	0800ab00 	.word	0x0800ab00
 8007d18:	0800ab00 	.word	0x0800ab00
 8007d1c:	0800ab00 	.word	0x0800ab00
 8007d20:	0800ab04 	.word	0x0800ab04

08007d24 <memset>:
 8007d24:	4603      	mov	r3, r0
 8007d26:	4402      	add	r2, r0
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d100      	bne.n	8007d2e <memset+0xa>
 8007d2c:	4770      	bx	lr
 8007d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d32:	e7f9      	b.n	8007d28 <memset+0x4>

08007d34 <iprintf>:
 8007d34:	b40f      	push	{r0, r1, r2, r3}
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <iprintf+0x2c>)
 8007d38:	b513      	push	{r0, r1, r4, lr}
 8007d3a:	681c      	ldr	r4, [r3, #0]
 8007d3c:	b124      	cbz	r4, 8007d48 <iprintf+0x14>
 8007d3e:	69a3      	ldr	r3, [r4, #24]
 8007d40:	b913      	cbnz	r3, 8007d48 <iprintf+0x14>
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 fb20 	bl	8008388 <__sinit>
 8007d48:	ab05      	add	r3, sp, #20
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	68a1      	ldr	r1, [r4, #8]
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	f000 fd2b 	bl	80087ac <_vfiprintf_r>
 8007d56:	b002      	add	sp, #8
 8007d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d5c:	b004      	add	sp, #16
 8007d5e:	4770      	bx	lr
 8007d60:	2000000c 	.word	0x2000000c

08007d64 <_puts_r>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	460e      	mov	r6, r1
 8007d68:	4605      	mov	r5, r0
 8007d6a:	b118      	cbz	r0, 8007d74 <_puts_r+0x10>
 8007d6c:	6983      	ldr	r3, [r0, #24]
 8007d6e:	b90b      	cbnz	r3, 8007d74 <_puts_r+0x10>
 8007d70:	f000 fb0a 	bl	8008388 <__sinit>
 8007d74:	69ab      	ldr	r3, [r5, #24]
 8007d76:	68ac      	ldr	r4, [r5, #8]
 8007d78:	b913      	cbnz	r3, 8007d80 <_puts_r+0x1c>
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f000 fb04 	bl	8008388 <__sinit>
 8007d80:	4b2c      	ldr	r3, [pc, #176]	; (8007e34 <_puts_r+0xd0>)
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d120      	bne.n	8007dc8 <_puts_r+0x64>
 8007d86:	686c      	ldr	r4, [r5, #4]
 8007d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d8a:	07db      	lsls	r3, r3, #31
 8007d8c:	d405      	bmi.n	8007d9a <_puts_r+0x36>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	0598      	lsls	r0, r3, #22
 8007d92:	d402      	bmi.n	8007d9a <_puts_r+0x36>
 8007d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d96:	f000 fb95 	bl	80084c4 <__retarget_lock_acquire_recursive>
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	0719      	lsls	r1, r3, #28
 8007d9e:	d51d      	bpl.n	8007ddc <_puts_r+0x78>
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	b1db      	cbz	r3, 8007ddc <_puts_r+0x78>
 8007da4:	3e01      	subs	r6, #1
 8007da6:	68a3      	ldr	r3, [r4, #8]
 8007da8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007dac:	3b01      	subs	r3, #1
 8007dae:	60a3      	str	r3, [r4, #8]
 8007db0:	bb39      	cbnz	r1, 8007e02 <_puts_r+0x9e>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da38      	bge.n	8007e28 <_puts_r+0xc4>
 8007db6:	4622      	mov	r2, r4
 8007db8:	210a      	movs	r1, #10
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 f90e 	bl	8007fdc <__swbuf_r>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d011      	beq.n	8007de8 <_puts_r+0x84>
 8007dc4:	250a      	movs	r5, #10
 8007dc6:	e011      	b.n	8007dec <_puts_r+0x88>
 8007dc8:	4b1b      	ldr	r3, [pc, #108]	; (8007e38 <_puts_r+0xd4>)
 8007dca:	429c      	cmp	r4, r3
 8007dcc:	d101      	bne.n	8007dd2 <_puts_r+0x6e>
 8007dce:	68ac      	ldr	r4, [r5, #8]
 8007dd0:	e7da      	b.n	8007d88 <_puts_r+0x24>
 8007dd2:	4b1a      	ldr	r3, [pc, #104]	; (8007e3c <_puts_r+0xd8>)
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	bf08      	it	eq
 8007dd8:	68ec      	ldreq	r4, [r5, #12]
 8007dda:	e7d5      	b.n	8007d88 <_puts_r+0x24>
 8007ddc:	4621      	mov	r1, r4
 8007dde:	4628      	mov	r0, r5
 8007de0:	f000 f94e 	bl	8008080 <__swsetup_r>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d0dd      	beq.n	8007da4 <_puts_r+0x40>
 8007de8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dee:	07da      	lsls	r2, r3, #31
 8007df0:	d405      	bmi.n	8007dfe <_puts_r+0x9a>
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	059b      	lsls	r3, r3, #22
 8007df6:	d402      	bmi.n	8007dfe <_puts_r+0x9a>
 8007df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dfa:	f000 fb64 	bl	80084c6 <__retarget_lock_release_recursive>
 8007dfe:	4628      	mov	r0, r5
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	da04      	bge.n	8007e10 <_puts_r+0xac>
 8007e06:	69a2      	ldr	r2, [r4, #24]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	dc06      	bgt.n	8007e1a <_puts_r+0xb6>
 8007e0c:	290a      	cmp	r1, #10
 8007e0e:	d004      	beq.n	8007e1a <_puts_r+0xb6>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	6022      	str	r2, [r4, #0]
 8007e16:	7019      	strb	r1, [r3, #0]
 8007e18:	e7c5      	b.n	8007da6 <_puts_r+0x42>
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 f8dd 	bl	8007fdc <__swbuf_r>
 8007e22:	3001      	adds	r0, #1
 8007e24:	d1bf      	bne.n	8007da6 <_puts_r+0x42>
 8007e26:	e7df      	b.n	8007de8 <_puts_r+0x84>
 8007e28:	250a      	movs	r5, #10
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	1c5a      	adds	r2, r3, #1
 8007e2e:	6022      	str	r2, [r4, #0]
 8007e30:	701d      	strb	r5, [r3, #0]
 8007e32:	e7db      	b.n	8007dec <_puts_r+0x88>
 8007e34:	0800aa5c 	.word	0x0800aa5c
 8007e38:	0800aa7c 	.word	0x0800aa7c
 8007e3c:	0800aa3c 	.word	0x0800aa3c

08007e40 <puts>:
 8007e40:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <puts+0xc>)
 8007e42:	4601      	mov	r1, r0
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	f7ff bf8d 	b.w	8007d64 <_puts_r>
 8007e4a:	bf00      	nop
 8007e4c:	2000000c 	.word	0x2000000c

08007e50 <setvbuf>:
 8007e50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	461d      	mov	r5, r3
 8007e56:	4b5d      	ldr	r3, [pc, #372]	; (8007fcc <setvbuf+0x17c>)
 8007e58:	4604      	mov	r4, r0
 8007e5a:	681f      	ldr	r7, [r3, #0]
 8007e5c:	460e      	mov	r6, r1
 8007e5e:	4690      	mov	r8, r2
 8007e60:	b127      	cbz	r7, 8007e6c <setvbuf+0x1c>
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	b913      	cbnz	r3, 8007e6c <setvbuf+0x1c>
 8007e66:	4638      	mov	r0, r7
 8007e68:	f000 fa8e 	bl	8008388 <__sinit>
 8007e6c:	4b58      	ldr	r3, [pc, #352]	; (8007fd0 <setvbuf+0x180>)
 8007e6e:	429c      	cmp	r4, r3
 8007e70:	d167      	bne.n	8007f42 <setvbuf+0xf2>
 8007e72:	687c      	ldr	r4, [r7, #4]
 8007e74:	f1b8 0f02 	cmp.w	r8, #2
 8007e78:	d006      	beq.n	8007e88 <setvbuf+0x38>
 8007e7a:	f1b8 0f01 	cmp.w	r8, #1
 8007e7e:	f200 809f 	bhi.w	8007fc0 <setvbuf+0x170>
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	f2c0 809c 	blt.w	8007fc0 <setvbuf+0x170>
 8007e88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e8a:	07db      	lsls	r3, r3, #31
 8007e8c:	d405      	bmi.n	8007e9a <setvbuf+0x4a>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	0598      	lsls	r0, r3, #22
 8007e92:	d402      	bmi.n	8007e9a <setvbuf+0x4a>
 8007e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e96:	f000 fb15 	bl	80084c4 <__retarget_lock_acquire_recursive>
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f000 f9df 	bl	8008260 <_fflush_r>
 8007ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea4:	b141      	cbz	r1, 8007eb8 <setvbuf+0x68>
 8007ea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eaa:	4299      	cmp	r1, r3
 8007eac:	d002      	beq.n	8007eb4 <setvbuf+0x64>
 8007eae:	4638      	mov	r0, r7
 8007eb0:	f000 fb78 	bl	80085a4 <_free_r>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	6363      	str	r3, [r4, #52]	; 0x34
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61a3      	str	r3, [r4, #24]
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	0619      	lsls	r1, r3, #24
 8007ec2:	d503      	bpl.n	8007ecc <setvbuf+0x7c>
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	6921      	ldr	r1, [r4, #16]
 8007ec8:	f000 fb6c 	bl	80085a4 <_free_r>
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	f1b8 0f02 	cmp.w	r8, #2
 8007ed2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	81a3      	strh	r3, [r4, #12]
 8007edc:	d06c      	beq.n	8007fb8 <setvbuf+0x168>
 8007ede:	ab01      	add	r3, sp, #4
 8007ee0:	466a      	mov	r2, sp
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f000 faef 	bl	80084c8 <__swhatbuf_r>
 8007eea:	89a3      	ldrh	r3, [r4, #12]
 8007eec:	4318      	orrs	r0, r3
 8007eee:	81a0      	strh	r0, [r4, #12]
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	d130      	bne.n	8007f56 <setvbuf+0x106>
 8007ef4:	9d00      	ldr	r5, [sp, #0]
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f000 fb4c 	bl	8008594 <malloc>
 8007efc:	4606      	mov	r6, r0
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d155      	bne.n	8007fae <setvbuf+0x15e>
 8007f02:	f8dd 9000 	ldr.w	r9, [sp]
 8007f06:	45a9      	cmp	r9, r5
 8007f08:	d14a      	bne.n	8007fa0 <setvbuf+0x150>
 8007f0a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007f0e:	2200      	movs	r2, #0
 8007f10:	60a2      	str	r2, [r4, #8]
 8007f12:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007f16:	6022      	str	r2, [r4, #0]
 8007f18:	6122      	str	r2, [r4, #16]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f20:	6162      	str	r2, [r4, #20]
 8007f22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f24:	f043 0302 	orr.w	r3, r3, #2
 8007f28:	07d2      	lsls	r2, r2, #31
 8007f2a:	81a3      	strh	r3, [r4, #12]
 8007f2c:	d405      	bmi.n	8007f3a <setvbuf+0xea>
 8007f2e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007f32:	d102      	bne.n	8007f3a <setvbuf+0xea>
 8007f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f36:	f000 fac6 	bl	80084c6 <__retarget_lock_release_recursive>
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	b003      	add	sp, #12
 8007f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f42:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <setvbuf+0x184>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	d101      	bne.n	8007f4c <setvbuf+0xfc>
 8007f48:	68bc      	ldr	r4, [r7, #8]
 8007f4a:	e793      	b.n	8007e74 <setvbuf+0x24>
 8007f4c:	4b22      	ldr	r3, [pc, #136]	; (8007fd8 <setvbuf+0x188>)
 8007f4e:	429c      	cmp	r4, r3
 8007f50:	bf08      	it	eq
 8007f52:	68fc      	ldreq	r4, [r7, #12]
 8007f54:	e78e      	b.n	8007e74 <setvbuf+0x24>
 8007f56:	2e00      	cmp	r6, #0
 8007f58:	d0cd      	beq.n	8007ef6 <setvbuf+0xa6>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	b913      	cbnz	r3, 8007f64 <setvbuf+0x114>
 8007f5e:	4638      	mov	r0, r7
 8007f60:	f000 fa12 	bl	8008388 <__sinit>
 8007f64:	f1b8 0f01 	cmp.w	r8, #1
 8007f68:	bf08      	it	eq
 8007f6a:	89a3      	ldrheq	r3, [r4, #12]
 8007f6c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007f70:	bf04      	itt	eq
 8007f72:	f043 0301 	orreq.w	r3, r3, #1
 8007f76:	81a3      	strheq	r3, [r4, #12]
 8007f78:	89a2      	ldrh	r2, [r4, #12]
 8007f7a:	6026      	str	r6, [r4, #0]
 8007f7c:	f012 0308 	ands.w	r3, r2, #8
 8007f80:	d01c      	beq.n	8007fbc <setvbuf+0x16c>
 8007f82:	07d3      	lsls	r3, r2, #31
 8007f84:	bf41      	itttt	mi
 8007f86:	2300      	movmi	r3, #0
 8007f88:	426d      	negmi	r5, r5
 8007f8a:	60a3      	strmi	r3, [r4, #8]
 8007f8c:	61a5      	strmi	r5, [r4, #24]
 8007f8e:	bf58      	it	pl
 8007f90:	60a5      	strpl	r5, [r4, #8]
 8007f92:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007f94:	f015 0501 	ands.w	r5, r5, #1
 8007f98:	d115      	bne.n	8007fc6 <setvbuf+0x176>
 8007f9a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007f9e:	e7c8      	b.n	8007f32 <setvbuf+0xe2>
 8007fa0:	4648      	mov	r0, r9
 8007fa2:	f000 faf7 	bl	8008594 <malloc>
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d0ae      	beq.n	8007f0a <setvbuf+0xba>
 8007fac:	464d      	mov	r5, r9
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb4:	81a3      	strh	r3, [r4, #12]
 8007fb6:	e7d0      	b.n	8007f5a <setvbuf+0x10a>
 8007fb8:	2500      	movs	r5, #0
 8007fba:	e7a8      	b.n	8007f0e <setvbuf+0xbe>
 8007fbc:	60a3      	str	r3, [r4, #8]
 8007fbe:	e7e8      	b.n	8007f92 <setvbuf+0x142>
 8007fc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007fc4:	e7b9      	b.n	8007f3a <setvbuf+0xea>
 8007fc6:	2500      	movs	r5, #0
 8007fc8:	e7b7      	b.n	8007f3a <setvbuf+0xea>
 8007fca:	bf00      	nop
 8007fcc:	2000000c 	.word	0x2000000c
 8007fd0:	0800aa5c 	.word	0x0800aa5c
 8007fd4:	0800aa7c 	.word	0x0800aa7c
 8007fd8:	0800aa3c 	.word	0x0800aa3c

08007fdc <__swbuf_r>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	460e      	mov	r6, r1
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	b118      	cbz	r0, 8007fee <__swbuf_r+0x12>
 8007fe6:	6983      	ldr	r3, [r0, #24]
 8007fe8:	b90b      	cbnz	r3, 8007fee <__swbuf_r+0x12>
 8007fea:	f000 f9cd 	bl	8008388 <__sinit>
 8007fee:	4b21      	ldr	r3, [pc, #132]	; (8008074 <__swbuf_r+0x98>)
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	d12b      	bne.n	800804c <__swbuf_r+0x70>
 8007ff4:	686c      	ldr	r4, [r5, #4]
 8007ff6:	69a3      	ldr	r3, [r4, #24]
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	071a      	lsls	r2, r3, #28
 8007ffe:	d52f      	bpl.n	8008060 <__swbuf_r+0x84>
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	b36b      	cbz	r3, 8008060 <__swbuf_r+0x84>
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	6820      	ldr	r0, [r4, #0]
 8008008:	b2f6      	uxtb	r6, r6
 800800a:	1ac0      	subs	r0, r0, r3
 800800c:	6963      	ldr	r3, [r4, #20]
 800800e:	4637      	mov	r7, r6
 8008010:	4283      	cmp	r3, r0
 8008012:	dc04      	bgt.n	800801e <__swbuf_r+0x42>
 8008014:	4621      	mov	r1, r4
 8008016:	4628      	mov	r0, r5
 8008018:	f000 f922 	bl	8008260 <_fflush_r>
 800801c:	bb30      	cbnz	r0, 800806c <__swbuf_r+0x90>
 800801e:	68a3      	ldr	r3, [r4, #8]
 8008020:	3001      	adds	r0, #1
 8008022:	3b01      	subs	r3, #1
 8008024:	60a3      	str	r3, [r4, #8]
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	6022      	str	r2, [r4, #0]
 800802c:	701e      	strb	r6, [r3, #0]
 800802e:	6963      	ldr	r3, [r4, #20]
 8008030:	4283      	cmp	r3, r0
 8008032:	d004      	beq.n	800803e <__swbuf_r+0x62>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	07db      	lsls	r3, r3, #31
 8008038:	d506      	bpl.n	8008048 <__swbuf_r+0x6c>
 800803a:	2e0a      	cmp	r6, #10
 800803c:	d104      	bne.n	8008048 <__swbuf_r+0x6c>
 800803e:	4621      	mov	r1, r4
 8008040:	4628      	mov	r0, r5
 8008042:	f000 f90d 	bl	8008260 <_fflush_r>
 8008046:	b988      	cbnz	r0, 800806c <__swbuf_r+0x90>
 8008048:	4638      	mov	r0, r7
 800804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <__swbuf_r+0x9c>)
 800804e:	429c      	cmp	r4, r3
 8008050:	d101      	bne.n	8008056 <__swbuf_r+0x7a>
 8008052:	68ac      	ldr	r4, [r5, #8]
 8008054:	e7cf      	b.n	8007ff6 <__swbuf_r+0x1a>
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <__swbuf_r+0xa0>)
 8008058:	429c      	cmp	r4, r3
 800805a:	bf08      	it	eq
 800805c:	68ec      	ldreq	r4, [r5, #12]
 800805e:	e7ca      	b.n	8007ff6 <__swbuf_r+0x1a>
 8008060:	4621      	mov	r1, r4
 8008062:	4628      	mov	r0, r5
 8008064:	f000 f80c 	bl	8008080 <__swsetup_r>
 8008068:	2800      	cmp	r0, #0
 800806a:	d0cb      	beq.n	8008004 <__swbuf_r+0x28>
 800806c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008070:	e7ea      	b.n	8008048 <__swbuf_r+0x6c>
 8008072:	bf00      	nop
 8008074:	0800aa5c 	.word	0x0800aa5c
 8008078:	0800aa7c 	.word	0x0800aa7c
 800807c:	0800aa3c 	.word	0x0800aa3c

08008080 <__swsetup_r>:
 8008080:	4b32      	ldr	r3, [pc, #200]	; (800814c <__swsetup_r+0xcc>)
 8008082:	b570      	push	{r4, r5, r6, lr}
 8008084:	681d      	ldr	r5, [r3, #0]
 8008086:	4606      	mov	r6, r0
 8008088:	460c      	mov	r4, r1
 800808a:	b125      	cbz	r5, 8008096 <__swsetup_r+0x16>
 800808c:	69ab      	ldr	r3, [r5, #24]
 800808e:	b913      	cbnz	r3, 8008096 <__swsetup_r+0x16>
 8008090:	4628      	mov	r0, r5
 8008092:	f000 f979 	bl	8008388 <__sinit>
 8008096:	4b2e      	ldr	r3, [pc, #184]	; (8008150 <__swsetup_r+0xd0>)
 8008098:	429c      	cmp	r4, r3
 800809a:	d10f      	bne.n	80080bc <__swsetup_r+0x3c>
 800809c:	686c      	ldr	r4, [r5, #4]
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080a4:	0719      	lsls	r1, r3, #28
 80080a6:	d42c      	bmi.n	8008102 <__swsetup_r+0x82>
 80080a8:	06dd      	lsls	r5, r3, #27
 80080aa:	d411      	bmi.n	80080d0 <__swsetup_r+0x50>
 80080ac:	2309      	movs	r3, #9
 80080ae:	6033      	str	r3, [r6, #0]
 80080b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080b8:	81a3      	strh	r3, [r4, #12]
 80080ba:	e03e      	b.n	800813a <__swsetup_r+0xba>
 80080bc:	4b25      	ldr	r3, [pc, #148]	; (8008154 <__swsetup_r+0xd4>)
 80080be:	429c      	cmp	r4, r3
 80080c0:	d101      	bne.n	80080c6 <__swsetup_r+0x46>
 80080c2:	68ac      	ldr	r4, [r5, #8]
 80080c4:	e7eb      	b.n	800809e <__swsetup_r+0x1e>
 80080c6:	4b24      	ldr	r3, [pc, #144]	; (8008158 <__swsetup_r+0xd8>)
 80080c8:	429c      	cmp	r4, r3
 80080ca:	bf08      	it	eq
 80080cc:	68ec      	ldreq	r4, [r5, #12]
 80080ce:	e7e6      	b.n	800809e <__swsetup_r+0x1e>
 80080d0:	0758      	lsls	r0, r3, #29
 80080d2:	d512      	bpl.n	80080fa <__swsetup_r+0x7a>
 80080d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080d6:	b141      	cbz	r1, 80080ea <__swsetup_r+0x6a>
 80080d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080dc:	4299      	cmp	r1, r3
 80080de:	d002      	beq.n	80080e6 <__swsetup_r+0x66>
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 fa5f 	bl	80085a4 <_free_r>
 80080e6:	2300      	movs	r3, #0
 80080e8:	6363      	str	r3, [r4, #52]	; 0x34
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080f0:	81a3      	strh	r3, [r4, #12]
 80080f2:	2300      	movs	r3, #0
 80080f4:	6063      	str	r3, [r4, #4]
 80080f6:	6923      	ldr	r3, [r4, #16]
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	f043 0308 	orr.w	r3, r3, #8
 8008100:	81a3      	strh	r3, [r4, #12]
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	b94b      	cbnz	r3, 800811a <__swsetup_r+0x9a>
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800810c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008110:	d003      	beq.n	800811a <__swsetup_r+0x9a>
 8008112:	4621      	mov	r1, r4
 8008114:	4630      	mov	r0, r6
 8008116:	f000 f9fd 	bl	8008514 <__smakebuf_r>
 800811a:	89a0      	ldrh	r0, [r4, #12]
 800811c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008120:	f010 0301 	ands.w	r3, r0, #1
 8008124:	d00a      	beq.n	800813c <__swsetup_r+0xbc>
 8008126:	2300      	movs	r3, #0
 8008128:	60a3      	str	r3, [r4, #8]
 800812a:	6963      	ldr	r3, [r4, #20]
 800812c:	425b      	negs	r3, r3
 800812e:	61a3      	str	r3, [r4, #24]
 8008130:	6923      	ldr	r3, [r4, #16]
 8008132:	b943      	cbnz	r3, 8008146 <__swsetup_r+0xc6>
 8008134:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008138:	d1ba      	bne.n	80080b0 <__swsetup_r+0x30>
 800813a:	bd70      	pop	{r4, r5, r6, pc}
 800813c:	0781      	lsls	r1, r0, #30
 800813e:	bf58      	it	pl
 8008140:	6963      	ldrpl	r3, [r4, #20]
 8008142:	60a3      	str	r3, [r4, #8]
 8008144:	e7f4      	b.n	8008130 <__swsetup_r+0xb0>
 8008146:	2000      	movs	r0, #0
 8008148:	e7f7      	b.n	800813a <__swsetup_r+0xba>
 800814a:	bf00      	nop
 800814c:	2000000c 	.word	0x2000000c
 8008150:	0800aa5c 	.word	0x0800aa5c
 8008154:	0800aa7c 	.word	0x0800aa7c
 8008158:	0800aa3c 	.word	0x0800aa3c

0800815c <__sflush_r>:
 800815c:	898a      	ldrh	r2, [r1, #12]
 800815e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008160:	4605      	mov	r5, r0
 8008162:	0710      	lsls	r0, r2, #28
 8008164:	460c      	mov	r4, r1
 8008166:	d457      	bmi.n	8008218 <__sflush_r+0xbc>
 8008168:	684b      	ldr	r3, [r1, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	dc04      	bgt.n	8008178 <__sflush_r+0x1c>
 800816e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	dc01      	bgt.n	8008178 <__sflush_r+0x1c>
 8008174:	2000      	movs	r0, #0
 8008176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800817a:	2e00      	cmp	r6, #0
 800817c:	d0fa      	beq.n	8008174 <__sflush_r+0x18>
 800817e:	2300      	movs	r3, #0
 8008180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008184:	682f      	ldr	r7, [r5, #0]
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	d032      	beq.n	80081f0 <__sflush_r+0x94>
 800818a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	075a      	lsls	r2, r3, #29
 8008190:	d505      	bpl.n	800819e <__sflush_r+0x42>
 8008192:	6863      	ldr	r3, [r4, #4]
 8008194:	1ac0      	subs	r0, r0, r3
 8008196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008198:	b10b      	cbz	r3, 800819e <__sflush_r+0x42>
 800819a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	2300      	movs	r3, #0
 80081a0:	4602      	mov	r2, r0
 80081a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a4:	4628      	mov	r0, r5
 80081a6:	6a21      	ldr	r1, [r4, #32]
 80081a8:	47b0      	blx	r6
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	d106      	bne.n	80081be <__sflush_r+0x62>
 80081b0:	6829      	ldr	r1, [r5, #0]
 80081b2:	291d      	cmp	r1, #29
 80081b4:	d82c      	bhi.n	8008210 <__sflush_r+0xb4>
 80081b6:	4a29      	ldr	r2, [pc, #164]	; (800825c <__sflush_r+0x100>)
 80081b8:	40ca      	lsrs	r2, r1
 80081ba:	07d6      	lsls	r6, r2, #31
 80081bc:	d528      	bpl.n	8008210 <__sflush_r+0xb4>
 80081be:	2200      	movs	r2, #0
 80081c0:	6062      	str	r2, [r4, #4]
 80081c2:	6922      	ldr	r2, [r4, #16]
 80081c4:	04d9      	lsls	r1, r3, #19
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	d504      	bpl.n	80081d4 <__sflush_r+0x78>
 80081ca:	1c42      	adds	r2, r0, #1
 80081cc:	d101      	bne.n	80081d2 <__sflush_r+0x76>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	b903      	cbnz	r3, 80081d4 <__sflush_r+0x78>
 80081d2:	6560      	str	r0, [r4, #84]	; 0x54
 80081d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081d6:	602f      	str	r7, [r5, #0]
 80081d8:	2900      	cmp	r1, #0
 80081da:	d0cb      	beq.n	8008174 <__sflush_r+0x18>
 80081dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e0:	4299      	cmp	r1, r3
 80081e2:	d002      	beq.n	80081ea <__sflush_r+0x8e>
 80081e4:	4628      	mov	r0, r5
 80081e6:	f000 f9dd 	bl	80085a4 <_free_r>
 80081ea:	2000      	movs	r0, #0
 80081ec:	6360      	str	r0, [r4, #52]	; 0x34
 80081ee:	e7c2      	b.n	8008176 <__sflush_r+0x1a>
 80081f0:	6a21      	ldr	r1, [r4, #32]
 80081f2:	2301      	movs	r3, #1
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b0      	blx	r6
 80081f8:	1c41      	adds	r1, r0, #1
 80081fa:	d1c7      	bne.n	800818c <__sflush_r+0x30>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0c4      	beq.n	800818c <__sflush_r+0x30>
 8008202:	2b1d      	cmp	r3, #29
 8008204:	d001      	beq.n	800820a <__sflush_r+0xae>
 8008206:	2b16      	cmp	r3, #22
 8008208:	d101      	bne.n	800820e <__sflush_r+0xb2>
 800820a:	602f      	str	r7, [r5, #0]
 800820c:	e7b2      	b.n	8008174 <__sflush_r+0x18>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	e7ae      	b.n	8008176 <__sflush_r+0x1a>
 8008218:	690f      	ldr	r7, [r1, #16]
 800821a:	2f00      	cmp	r7, #0
 800821c:	d0aa      	beq.n	8008174 <__sflush_r+0x18>
 800821e:	0793      	lsls	r3, r2, #30
 8008220:	bf18      	it	ne
 8008222:	2300      	movne	r3, #0
 8008224:	680e      	ldr	r6, [r1, #0]
 8008226:	bf08      	it	eq
 8008228:	694b      	ldreq	r3, [r1, #20]
 800822a:	1bf6      	subs	r6, r6, r7
 800822c:	600f      	str	r7, [r1, #0]
 800822e:	608b      	str	r3, [r1, #8]
 8008230:	2e00      	cmp	r6, #0
 8008232:	dd9f      	ble.n	8008174 <__sflush_r+0x18>
 8008234:	4633      	mov	r3, r6
 8008236:	463a      	mov	r2, r7
 8008238:	4628      	mov	r0, r5
 800823a:	6a21      	ldr	r1, [r4, #32]
 800823c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008240:	47e0      	blx	ip
 8008242:	2800      	cmp	r0, #0
 8008244:	dc06      	bgt.n	8008254 <__sflush_r+0xf8>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800824c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008250:	81a3      	strh	r3, [r4, #12]
 8008252:	e790      	b.n	8008176 <__sflush_r+0x1a>
 8008254:	4407      	add	r7, r0
 8008256:	1a36      	subs	r6, r6, r0
 8008258:	e7ea      	b.n	8008230 <__sflush_r+0xd4>
 800825a:	bf00      	nop
 800825c:	20400001 	.word	0x20400001

08008260 <_fflush_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	690b      	ldr	r3, [r1, #16]
 8008264:	4605      	mov	r5, r0
 8008266:	460c      	mov	r4, r1
 8008268:	b913      	cbnz	r3, 8008270 <_fflush_r+0x10>
 800826a:	2500      	movs	r5, #0
 800826c:	4628      	mov	r0, r5
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	b118      	cbz	r0, 800827a <_fflush_r+0x1a>
 8008272:	6983      	ldr	r3, [r0, #24]
 8008274:	b90b      	cbnz	r3, 800827a <_fflush_r+0x1a>
 8008276:	f000 f887 	bl	8008388 <__sinit>
 800827a:	4b14      	ldr	r3, [pc, #80]	; (80082cc <_fflush_r+0x6c>)
 800827c:	429c      	cmp	r4, r3
 800827e:	d11b      	bne.n	80082b8 <_fflush_r+0x58>
 8008280:	686c      	ldr	r4, [r5, #4]
 8008282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d0ef      	beq.n	800826a <_fflush_r+0xa>
 800828a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800828c:	07d0      	lsls	r0, r2, #31
 800828e:	d404      	bmi.n	800829a <_fflush_r+0x3a>
 8008290:	0599      	lsls	r1, r3, #22
 8008292:	d402      	bmi.n	800829a <_fflush_r+0x3a>
 8008294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008296:	f000 f915 	bl	80084c4 <__retarget_lock_acquire_recursive>
 800829a:	4628      	mov	r0, r5
 800829c:	4621      	mov	r1, r4
 800829e:	f7ff ff5d 	bl	800815c <__sflush_r>
 80082a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082a4:	4605      	mov	r5, r0
 80082a6:	07da      	lsls	r2, r3, #31
 80082a8:	d4e0      	bmi.n	800826c <_fflush_r+0xc>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	059b      	lsls	r3, r3, #22
 80082ae:	d4dd      	bmi.n	800826c <_fflush_r+0xc>
 80082b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082b2:	f000 f908 	bl	80084c6 <__retarget_lock_release_recursive>
 80082b6:	e7d9      	b.n	800826c <_fflush_r+0xc>
 80082b8:	4b05      	ldr	r3, [pc, #20]	; (80082d0 <_fflush_r+0x70>)
 80082ba:	429c      	cmp	r4, r3
 80082bc:	d101      	bne.n	80082c2 <_fflush_r+0x62>
 80082be:	68ac      	ldr	r4, [r5, #8]
 80082c0:	e7df      	b.n	8008282 <_fflush_r+0x22>
 80082c2:	4b04      	ldr	r3, [pc, #16]	; (80082d4 <_fflush_r+0x74>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	bf08      	it	eq
 80082c8:	68ec      	ldreq	r4, [r5, #12]
 80082ca:	e7da      	b.n	8008282 <_fflush_r+0x22>
 80082cc:	0800aa5c 	.word	0x0800aa5c
 80082d0:	0800aa7c 	.word	0x0800aa7c
 80082d4:	0800aa3c 	.word	0x0800aa3c

080082d8 <std>:
 80082d8:	2300      	movs	r3, #0
 80082da:	b510      	push	{r4, lr}
 80082dc:	4604      	mov	r4, r0
 80082de:	e9c0 3300 	strd	r3, r3, [r0]
 80082e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082e6:	6083      	str	r3, [r0, #8]
 80082e8:	8181      	strh	r1, [r0, #12]
 80082ea:	6643      	str	r3, [r0, #100]	; 0x64
 80082ec:	81c2      	strh	r2, [r0, #14]
 80082ee:	6183      	str	r3, [r0, #24]
 80082f0:	4619      	mov	r1, r3
 80082f2:	2208      	movs	r2, #8
 80082f4:	305c      	adds	r0, #92	; 0x5c
 80082f6:	f7ff fd15 	bl	8007d24 <memset>
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <std+0x38>)
 80082fc:	6224      	str	r4, [r4, #32]
 80082fe:	6263      	str	r3, [r4, #36]	; 0x24
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <std+0x3c>)
 8008302:	62a3      	str	r3, [r4, #40]	; 0x28
 8008304:	4b04      	ldr	r3, [pc, #16]	; (8008318 <std+0x40>)
 8008306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008308:	4b04      	ldr	r3, [pc, #16]	; (800831c <std+0x44>)
 800830a:	6323      	str	r3, [r4, #48]	; 0x30
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	08008d59 	.word	0x08008d59
 8008314:	08008d7b 	.word	0x08008d7b
 8008318:	08008db3 	.word	0x08008db3
 800831c:	08008dd7 	.word	0x08008dd7

08008320 <_cleanup_r>:
 8008320:	4901      	ldr	r1, [pc, #4]	; (8008328 <_cleanup_r+0x8>)
 8008322:	f000 b8af 	b.w	8008484 <_fwalk_reent>
 8008326:	bf00      	nop
 8008328:	08008261 	.word	0x08008261

0800832c <__sfmoreglue>:
 800832c:	2268      	movs	r2, #104	; 0x68
 800832e:	b570      	push	{r4, r5, r6, lr}
 8008330:	1e4d      	subs	r5, r1, #1
 8008332:	4355      	muls	r5, r2
 8008334:	460e      	mov	r6, r1
 8008336:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800833a:	f000 f99b 	bl	8008674 <_malloc_r>
 800833e:	4604      	mov	r4, r0
 8008340:	b140      	cbz	r0, 8008354 <__sfmoreglue+0x28>
 8008342:	2100      	movs	r1, #0
 8008344:	e9c0 1600 	strd	r1, r6, [r0]
 8008348:	300c      	adds	r0, #12
 800834a:	60a0      	str	r0, [r4, #8]
 800834c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008350:	f7ff fce8 	bl	8007d24 <memset>
 8008354:	4620      	mov	r0, r4
 8008356:	bd70      	pop	{r4, r5, r6, pc}

08008358 <__sfp_lock_acquire>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__sfp_lock_acquire+0x8>)
 800835a:	f000 b8b3 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 800835e:	bf00      	nop
 8008360:	20000261 	.word	0x20000261

08008364 <__sfp_lock_release>:
 8008364:	4801      	ldr	r0, [pc, #4]	; (800836c <__sfp_lock_release+0x8>)
 8008366:	f000 b8ae 	b.w	80084c6 <__retarget_lock_release_recursive>
 800836a:	bf00      	nop
 800836c:	20000261 	.word	0x20000261

08008370 <__sinit_lock_acquire>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__sinit_lock_acquire+0x8>)
 8008372:	f000 b8a7 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	20000262 	.word	0x20000262

0800837c <__sinit_lock_release>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__sinit_lock_release+0x8>)
 800837e:	f000 b8a2 	b.w	80084c6 <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	20000262 	.word	0x20000262

08008388 <__sinit>:
 8008388:	b510      	push	{r4, lr}
 800838a:	4604      	mov	r4, r0
 800838c:	f7ff fff0 	bl	8008370 <__sinit_lock_acquire>
 8008390:	69a3      	ldr	r3, [r4, #24]
 8008392:	b11b      	cbz	r3, 800839c <__sinit+0x14>
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008398:	f7ff bff0 	b.w	800837c <__sinit_lock_release>
 800839c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083a0:	6523      	str	r3, [r4, #80]	; 0x50
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <__sinit+0x68>)
 80083a4:	4a13      	ldr	r2, [pc, #76]	; (80083f4 <__sinit+0x6c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	bf08      	it	eq
 80083ae:	2301      	moveq	r3, #1
 80083b0:	4620      	mov	r0, r4
 80083b2:	bf08      	it	eq
 80083b4:	61a3      	streq	r3, [r4, #24]
 80083b6:	f000 f81f 	bl	80083f8 <__sfp>
 80083ba:	6060      	str	r0, [r4, #4]
 80083bc:	4620      	mov	r0, r4
 80083be:	f000 f81b 	bl	80083f8 <__sfp>
 80083c2:	60a0      	str	r0, [r4, #8]
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 f817 	bl	80083f8 <__sfp>
 80083ca:	2200      	movs	r2, #0
 80083cc:	2104      	movs	r1, #4
 80083ce:	60e0      	str	r0, [r4, #12]
 80083d0:	6860      	ldr	r0, [r4, #4]
 80083d2:	f7ff ff81 	bl	80082d8 <std>
 80083d6:	2201      	movs	r2, #1
 80083d8:	2109      	movs	r1, #9
 80083da:	68a0      	ldr	r0, [r4, #8]
 80083dc:	f7ff ff7c 	bl	80082d8 <std>
 80083e0:	2202      	movs	r2, #2
 80083e2:	2112      	movs	r1, #18
 80083e4:	68e0      	ldr	r0, [r4, #12]
 80083e6:	f7ff ff77 	bl	80082d8 <std>
 80083ea:	2301      	movs	r3, #1
 80083ec:	61a3      	str	r3, [r4, #24]
 80083ee:	e7d1      	b.n	8008394 <__sinit+0xc>
 80083f0:	0800aa38 	.word	0x0800aa38
 80083f4:	08008321 	.word	0x08008321

080083f8 <__sfp>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	4607      	mov	r7, r0
 80083fc:	f7ff ffac 	bl	8008358 <__sfp_lock_acquire>
 8008400:	4b1e      	ldr	r3, [pc, #120]	; (800847c <__sfp+0x84>)
 8008402:	681e      	ldr	r6, [r3, #0]
 8008404:	69b3      	ldr	r3, [r6, #24]
 8008406:	b913      	cbnz	r3, 800840e <__sfp+0x16>
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ffbd 	bl	8008388 <__sinit>
 800840e:	3648      	adds	r6, #72	; 0x48
 8008410:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008414:	3b01      	subs	r3, #1
 8008416:	d503      	bpl.n	8008420 <__sfp+0x28>
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	b30b      	cbz	r3, 8008460 <__sfp+0x68>
 800841c:	6836      	ldr	r6, [r6, #0]
 800841e:	e7f7      	b.n	8008410 <__sfp+0x18>
 8008420:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008424:	b9d5      	cbnz	r5, 800845c <__sfp+0x64>
 8008426:	4b16      	ldr	r3, [pc, #88]	; (8008480 <__sfp+0x88>)
 8008428:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800842c:	60e3      	str	r3, [r4, #12]
 800842e:	6665      	str	r5, [r4, #100]	; 0x64
 8008430:	f000 f847 	bl	80084c2 <__retarget_lock_init_recursive>
 8008434:	f7ff ff96 	bl	8008364 <__sfp_lock_release>
 8008438:	2208      	movs	r2, #8
 800843a:	4629      	mov	r1, r5
 800843c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008444:	6025      	str	r5, [r4, #0]
 8008446:	61a5      	str	r5, [r4, #24]
 8008448:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800844c:	f7ff fc6a 	bl	8007d24 <memset>
 8008450:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008454:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008458:	4620      	mov	r0, r4
 800845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845c:	3468      	adds	r4, #104	; 0x68
 800845e:	e7d9      	b.n	8008414 <__sfp+0x1c>
 8008460:	2104      	movs	r1, #4
 8008462:	4638      	mov	r0, r7
 8008464:	f7ff ff62 	bl	800832c <__sfmoreglue>
 8008468:	4604      	mov	r4, r0
 800846a:	6030      	str	r0, [r6, #0]
 800846c:	2800      	cmp	r0, #0
 800846e:	d1d5      	bne.n	800841c <__sfp+0x24>
 8008470:	f7ff ff78 	bl	8008364 <__sfp_lock_release>
 8008474:	230c      	movs	r3, #12
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	e7ee      	b.n	8008458 <__sfp+0x60>
 800847a:	bf00      	nop
 800847c:	0800aa38 	.word	0x0800aa38
 8008480:	ffff0001 	.word	0xffff0001

08008484 <_fwalk_reent>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	4606      	mov	r6, r0
 800848a:	4688      	mov	r8, r1
 800848c:	2700      	movs	r7, #0
 800848e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008492:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008496:	f1b9 0901 	subs.w	r9, r9, #1
 800849a:	d505      	bpl.n	80084a8 <_fwalk_reent+0x24>
 800849c:	6824      	ldr	r4, [r4, #0]
 800849e:	2c00      	cmp	r4, #0
 80084a0:	d1f7      	bne.n	8008492 <_fwalk_reent+0xe>
 80084a2:	4638      	mov	r0, r7
 80084a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084a8:	89ab      	ldrh	r3, [r5, #12]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d907      	bls.n	80084be <_fwalk_reent+0x3a>
 80084ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b2:	3301      	adds	r3, #1
 80084b4:	d003      	beq.n	80084be <_fwalk_reent+0x3a>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4630      	mov	r0, r6
 80084ba:	47c0      	blx	r8
 80084bc:	4307      	orrs	r7, r0
 80084be:	3568      	adds	r5, #104	; 0x68
 80084c0:	e7e9      	b.n	8008496 <_fwalk_reent+0x12>

080084c2 <__retarget_lock_init_recursive>:
 80084c2:	4770      	bx	lr

080084c4 <__retarget_lock_acquire_recursive>:
 80084c4:	4770      	bx	lr

080084c6 <__retarget_lock_release_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__swhatbuf_r>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	460e      	mov	r6, r1
 80084cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d0:	4614      	mov	r4, r2
 80084d2:	2900      	cmp	r1, #0
 80084d4:	461d      	mov	r5, r3
 80084d6:	b096      	sub	sp, #88	; 0x58
 80084d8:	da08      	bge.n	80084ec <__swhatbuf_r+0x24>
 80084da:	2200      	movs	r2, #0
 80084dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084e0:	602a      	str	r2, [r5, #0]
 80084e2:	061a      	lsls	r2, r3, #24
 80084e4:	d410      	bmi.n	8008508 <__swhatbuf_r+0x40>
 80084e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ea:	e00e      	b.n	800850a <__swhatbuf_r+0x42>
 80084ec:	466a      	mov	r2, sp
 80084ee:	f000 fc99 	bl	8008e24 <_fstat_r>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	dbf1      	blt.n	80084da <__swhatbuf_r+0x12>
 80084f6:	9a01      	ldr	r2, [sp, #4]
 80084f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008500:	425a      	negs	r2, r3
 8008502:	415a      	adcs	r2, r3
 8008504:	602a      	str	r2, [r5, #0]
 8008506:	e7ee      	b.n	80084e6 <__swhatbuf_r+0x1e>
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	2000      	movs	r0, #0
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	b016      	add	sp, #88	; 0x58
 8008510:	bd70      	pop	{r4, r5, r6, pc}
	...

08008514 <__smakebuf_r>:
 8008514:	898b      	ldrh	r3, [r1, #12]
 8008516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008518:	079d      	lsls	r5, r3, #30
 800851a:	4606      	mov	r6, r0
 800851c:	460c      	mov	r4, r1
 800851e:	d507      	bpl.n	8008530 <__smakebuf_r+0x1c>
 8008520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	6123      	str	r3, [r4, #16]
 8008528:	2301      	movs	r3, #1
 800852a:	6163      	str	r3, [r4, #20]
 800852c:	b002      	add	sp, #8
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	466a      	mov	r2, sp
 8008532:	ab01      	add	r3, sp, #4
 8008534:	f7ff ffc8 	bl	80084c8 <__swhatbuf_r>
 8008538:	9900      	ldr	r1, [sp, #0]
 800853a:	4605      	mov	r5, r0
 800853c:	4630      	mov	r0, r6
 800853e:	f000 f899 	bl	8008674 <_malloc_r>
 8008542:	b948      	cbnz	r0, 8008558 <__smakebuf_r+0x44>
 8008544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008548:	059a      	lsls	r2, r3, #22
 800854a:	d4ef      	bmi.n	800852c <__smakebuf_r+0x18>
 800854c:	f023 0303 	bic.w	r3, r3, #3
 8008550:	f043 0302 	orr.w	r3, r3, #2
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	e7e3      	b.n	8008520 <__smakebuf_r+0xc>
 8008558:	4b0d      	ldr	r3, [pc, #52]	; (8008590 <__smakebuf_r+0x7c>)
 800855a:	62b3      	str	r3, [r6, #40]	; 0x28
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	6020      	str	r0, [r4, #0]
 8008560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008564:	81a3      	strh	r3, [r4, #12]
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	6120      	str	r0, [r4, #16]
 800856a:	6163      	str	r3, [r4, #20]
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	b15b      	cbz	r3, 8008588 <__smakebuf_r+0x74>
 8008570:	4630      	mov	r0, r6
 8008572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008576:	f000 fc67 	bl	8008e48 <_isatty_r>
 800857a:	b128      	cbz	r0, 8008588 <__smakebuf_r+0x74>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	81a3      	strh	r3, [r4, #12]
 8008588:	89a0      	ldrh	r0, [r4, #12]
 800858a:	4305      	orrs	r5, r0
 800858c:	81a5      	strh	r5, [r4, #12]
 800858e:	e7cd      	b.n	800852c <__smakebuf_r+0x18>
 8008590:	08008321 	.word	0x08008321

08008594 <malloc>:
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <malloc+0xc>)
 8008596:	4601      	mov	r1, r0
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f000 b86b 	b.w	8008674 <_malloc_r>
 800859e:	bf00      	nop
 80085a0:	2000000c 	.word	0x2000000c

080085a4 <_free_r>:
 80085a4:	b538      	push	{r3, r4, r5, lr}
 80085a6:	4605      	mov	r5, r0
 80085a8:	2900      	cmp	r1, #0
 80085aa:	d040      	beq.n	800862e <_free_r+0x8a>
 80085ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085b0:	1f0c      	subs	r4, r1, #4
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	bfb8      	it	lt
 80085b6:	18e4      	addlt	r4, r4, r3
 80085b8:	f000 fc76 	bl	8008ea8 <__malloc_lock>
 80085bc:	4a1c      	ldr	r2, [pc, #112]	; (8008630 <_free_r+0x8c>)
 80085be:	6813      	ldr	r3, [r2, #0]
 80085c0:	b933      	cbnz	r3, 80085d0 <_free_r+0x2c>
 80085c2:	6063      	str	r3, [r4, #4]
 80085c4:	6014      	str	r4, [r2, #0]
 80085c6:	4628      	mov	r0, r5
 80085c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085cc:	f000 bc72 	b.w	8008eb4 <__malloc_unlock>
 80085d0:	42a3      	cmp	r3, r4
 80085d2:	d908      	bls.n	80085e6 <_free_r+0x42>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	1821      	adds	r1, r4, r0
 80085d8:	428b      	cmp	r3, r1
 80085da:	bf01      	itttt	eq
 80085dc:	6819      	ldreq	r1, [r3, #0]
 80085de:	685b      	ldreq	r3, [r3, #4]
 80085e0:	1809      	addeq	r1, r1, r0
 80085e2:	6021      	streq	r1, [r4, #0]
 80085e4:	e7ed      	b.n	80085c2 <_free_r+0x1e>
 80085e6:	461a      	mov	r2, r3
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	b10b      	cbz	r3, 80085f0 <_free_r+0x4c>
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	d9fa      	bls.n	80085e6 <_free_r+0x42>
 80085f0:	6811      	ldr	r1, [r2, #0]
 80085f2:	1850      	adds	r0, r2, r1
 80085f4:	42a0      	cmp	r0, r4
 80085f6:	d10b      	bne.n	8008610 <_free_r+0x6c>
 80085f8:	6820      	ldr	r0, [r4, #0]
 80085fa:	4401      	add	r1, r0
 80085fc:	1850      	adds	r0, r2, r1
 80085fe:	4283      	cmp	r3, r0
 8008600:	6011      	str	r1, [r2, #0]
 8008602:	d1e0      	bne.n	80085c6 <_free_r+0x22>
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	4401      	add	r1, r0
 800860a:	6011      	str	r1, [r2, #0]
 800860c:	6053      	str	r3, [r2, #4]
 800860e:	e7da      	b.n	80085c6 <_free_r+0x22>
 8008610:	d902      	bls.n	8008618 <_free_r+0x74>
 8008612:	230c      	movs	r3, #12
 8008614:	602b      	str	r3, [r5, #0]
 8008616:	e7d6      	b.n	80085c6 <_free_r+0x22>
 8008618:	6820      	ldr	r0, [r4, #0]
 800861a:	1821      	adds	r1, r4, r0
 800861c:	428b      	cmp	r3, r1
 800861e:	bf01      	itttt	eq
 8008620:	6819      	ldreq	r1, [r3, #0]
 8008622:	685b      	ldreq	r3, [r3, #4]
 8008624:	1809      	addeq	r1, r1, r0
 8008626:	6021      	streq	r1, [r4, #0]
 8008628:	6063      	str	r3, [r4, #4]
 800862a:	6054      	str	r4, [r2, #4]
 800862c:	e7cb      	b.n	80085c6 <_free_r+0x22>
 800862e:	bd38      	pop	{r3, r4, r5, pc}
 8008630:	20000264 	.word	0x20000264

08008634 <sbrk_aligned>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	4e0e      	ldr	r6, [pc, #56]	; (8008670 <sbrk_aligned+0x3c>)
 8008638:	460c      	mov	r4, r1
 800863a:	6831      	ldr	r1, [r6, #0]
 800863c:	4605      	mov	r5, r0
 800863e:	b911      	cbnz	r1, 8008646 <sbrk_aligned+0x12>
 8008640:	f000 fb7a 	bl	8008d38 <_sbrk_r>
 8008644:	6030      	str	r0, [r6, #0]
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	f000 fb75 	bl	8008d38 <_sbrk_r>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d00a      	beq.n	8008668 <sbrk_aligned+0x34>
 8008652:	1cc4      	adds	r4, r0, #3
 8008654:	f024 0403 	bic.w	r4, r4, #3
 8008658:	42a0      	cmp	r0, r4
 800865a:	d007      	beq.n	800866c <sbrk_aligned+0x38>
 800865c:	1a21      	subs	r1, r4, r0
 800865e:	4628      	mov	r0, r5
 8008660:	f000 fb6a 	bl	8008d38 <_sbrk_r>
 8008664:	3001      	adds	r0, #1
 8008666:	d101      	bne.n	800866c <sbrk_aligned+0x38>
 8008668:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800866c:	4620      	mov	r0, r4
 800866e:	bd70      	pop	{r4, r5, r6, pc}
 8008670:	20000268 	.word	0x20000268

08008674 <_malloc_r>:
 8008674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008678:	1ccd      	adds	r5, r1, #3
 800867a:	f025 0503 	bic.w	r5, r5, #3
 800867e:	3508      	adds	r5, #8
 8008680:	2d0c      	cmp	r5, #12
 8008682:	bf38      	it	cc
 8008684:	250c      	movcc	r5, #12
 8008686:	2d00      	cmp	r5, #0
 8008688:	4607      	mov	r7, r0
 800868a:	db01      	blt.n	8008690 <_malloc_r+0x1c>
 800868c:	42a9      	cmp	r1, r5
 800868e:	d905      	bls.n	800869c <_malloc_r+0x28>
 8008690:	230c      	movs	r3, #12
 8008692:	2600      	movs	r6, #0
 8008694:	603b      	str	r3, [r7, #0]
 8008696:	4630      	mov	r0, r6
 8008698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800869c:	4e2e      	ldr	r6, [pc, #184]	; (8008758 <_malloc_r+0xe4>)
 800869e:	f000 fc03 	bl	8008ea8 <__malloc_lock>
 80086a2:	6833      	ldr	r3, [r6, #0]
 80086a4:	461c      	mov	r4, r3
 80086a6:	bb34      	cbnz	r4, 80086f6 <_malloc_r+0x82>
 80086a8:	4629      	mov	r1, r5
 80086aa:	4638      	mov	r0, r7
 80086ac:	f7ff ffc2 	bl	8008634 <sbrk_aligned>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	4604      	mov	r4, r0
 80086b4:	d14d      	bne.n	8008752 <_malloc_r+0xde>
 80086b6:	6834      	ldr	r4, [r6, #0]
 80086b8:	4626      	mov	r6, r4
 80086ba:	2e00      	cmp	r6, #0
 80086bc:	d140      	bne.n	8008740 <_malloc_r+0xcc>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	4631      	mov	r1, r6
 80086c2:	4638      	mov	r0, r7
 80086c4:	eb04 0803 	add.w	r8, r4, r3
 80086c8:	f000 fb36 	bl	8008d38 <_sbrk_r>
 80086cc:	4580      	cmp	r8, r0
 80086ce:	d13a      	bne.n	8008746 <_malloc_r+0xd2>
 80086d0:	6821      	ldr	r1, [r4, #0]
 80086d2:	3503      	adds	r5, #3
 80086d4:	1a6d      	subs	r5, r5, r1
 80086d6:	f025 0503 	bic.w	r5, r5, #3
 80086da:	3508      	adds	r5, #8
 80086dc:	2d0c      	cmp	r5, #12
 80086de:	bf38      	it	cc
 80086e0:	250c      	movcc	r5, #12
 80086e2:	4638      	mov	r0, r7
 80086e4:	4629      	mov	r1, r5
 80086e6:	f7ff ffa5 	bl	8008634 <sbrk_aligned>
 80086ea:	3001      	adds	r0, #1
 80086ec:	d02b      	beq.n	8008746 <_malloc_r+0xd2>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	442b      	add	r3, r5
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	e00e      	b.n	8008714 <_malloc_r+0xa0>
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	1b52      	subs	r2, r2, r5
 80086fa:	d41e      	bmi.n	800873a <_malloc_r+0xc6>
 80086fc:	2a0b      	cmp	r2, #11
 80086fe:	d916      	bls.n	800872e <_malloc_r+0xba>
 8008700:	1961      	adds	r1, r4, r5
 8008702:	42a3      	cmp	r3, r4
 8008704:	6025      	str	r5, [r4, #0]
 8008706:	bf18      	it	ne
 8008708:	6059      	strne	r1, [r3, #4]
 800870a:	6863      	ldr	r3, [r4, #4]
 800870c:	bf08      	it	eq
 800870e:	6031      	streq	r1, [r6, #0]
 8008710:	5162      	str	r2, [r4, r5]
 8008712:	604b      	str	r3, [r1, #4]
 8008714:	4638      	mov	r0, r7
 8008716:	f104 060b 	add.w	r6, r4, #11
 800871a:	f000 fbcb 	bl	8008eb4 <__malloc_unlock>
 800871e:	f026 0607 	bic.w	r6, r6, #7
 8008722:	1d23      	adds	r3, r4, #4
 8008724:	1af2      	subs	r2, r6, r3
 8008726:	d0b6      	beq.n	8008696 <_malloc_r+0x22>
 8008728:	1b9b      	subs	r3, r3, r6
 800872a:	50a3      	str	r3, [r4, r2]
 800872c:	e7b3      	b.n	8008696 <_malloc_r+0x22>
 800872e:	6862      	ldr	r2, [r4, #4]
 8008730:	42a3      	cmp	r3, r4
 8008732:	bf0c      	ite	eq
 8008734:	6032      	streq	r2, [r6, #0]
 8008736:	605a      	strne	r2, [r3, #4]
 8008738:	e7ec      	b.n	8008714 <_malloc_r+0xa0>
 800873a:	4623      	mov	r3, r4
 800873c:	6864      	ldr	r4, [r4, #4]
 800873e:	e7b2      	b.n	80086a6 <_malloc_r+0x32>
 8008740:	4634      	mov	r4, r6
 8008742:	6876      	ldr	r6, [r6, #4]
 8008744:	e7b9      	b.n	80086ba <_malloc_r+0x46>
 8008746:	230c      	movs	r3, #12
 8008748:	4638      	mov	r0, r7
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	f000 fbb2 	bl	8008eb4 <__malloc_unlock>
 8008750:	e7a1      	b.n	8008696 <_malloc_r+0x22>
 8008752:	6025      	str	r5, [r4, #0]
 8008754:	e7de      	b.n	8008714 <_malloc_r+0xa0>
 8008756:	bf00      	nop
 8008758:	20000264 	.word	0x20000264

0800875c <__sfputc_r>:
 800875c:	6893      	ldr	r3, [r2, #8]
 800875e:	b410      	push	{r4}
 8008760:	3b01      	subs	r3, #1
 8008762:	2b00      	cmp	r3, #0
 8008764:	6093      	str	r3, [r2, #8]
 8008766:	da07      	bge.n	8008778 <__sfputc_r+0x1c>
 8008768:	6994      	ldr	r4, [r2, #24]
 800876a:	42a3      	cmp	r3, r4
 800876c:	db01      	blt.n	8008772 <__sfputc_r+0x16>
 800876e:	290a      	cmp	r1, #10
 8008770:	d102      	bne.n	8008778 <__sfputc_r+0x1c>
 8008772:	bc10      	pop	{r4}
 8008774:	f7ff bc32 	b.w	8007fdc <__swbuf_r>
 8008778:	6813      	ldr	r3, [r2, #0]
 800877a:	1c58      	adds	r0, r3, #1
 800877c:	6010      	str	r0, [r2, #0]
 800877e:	7019      	strb	r1, [r3, #0]
 8008780:	4608      	mov	r0, r1
 8008782:	bc10      	pop	{r4}
 8008784:	4770      	bx	lr

08008786 <__sfputs_r>:
 8008786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008788:	4606      	mov	r6, r0
 800878a:	460f      	mov	r7, r1
 800878c:	4614      	mov	r4, r2
 800878e:	18d5      	adds	r5, r2, r3
 8008790:	42ac      	cmp	r4, r5
 8008792:	d101      	bne.n	8008798 <__sfputs_r+0x12>
 8008794:	2000      	movs	r0, #0
 8008796:	e007      	b.n	80087a8 <__sfputs_r+0x22>
 8008798:	463a      	mov	r2, r7
 800879a:	4630      	mov	r0, r6
 800879c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a0:	f7ff ffdc 	bl	800875c <__sfputc_r>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d1f3      	bne.n	8008790 <__sfputs_r+0xa>
 80087a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087ac <_vfiprintf_r>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	460d      	mov	r5, r1
 80087b2:	4614      	mov	r4, r2
 80087b4:	4698      	mov	r8, r3
 80087b6:	4606      	mov	r6, r0
 80087b8:	b09d      	sub	sp, #116	; 0x74
 80087ba:	b118      	cbz	r0, 80087c4 <_vfiprintf_r+0x18>
 80087bc:	6983      	ldr	r3, [r0, #24]
 80087be:	b90b      	cbnz	r3, 80087c4 <_vfiprintf_r+0x18>
 80087c0:	f7ff fde2 	bl	8008388 <__sinit>
 80087c4:	4b89      	ldr	r3, [pc, #548]	; (80089ec <_vfiprintf_r+0x240>)
 80087c6:	429d      	cmp	r5, r3
 80087c8:	d11b      	bne.n	8008802 <_vfiprintf_r+0x56>
 80087ca:	6875      	ldr	r5, [r6, #4]
 80087cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ce:	07d9      	lsls	r1, r3, #31
 80087d0:	d405      	bmi.n	80087de <_vfiprintf_r+0x32>
 80087d2:	89ab      	ldrh	r3, [r5, #12]
 80087d4:	059a      	lsls	r2, r3, #22
 80087d6:	d402      	bmi.n	80087de <_vfiprintf_r+0x32>
 80087d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087da:	f7ff fe73 	bl	80084c4 <__retarget_lock_acquire_recursive>
 80087de:	89ab      	ldrh	r3, [r5, #12]
 80087e0:	071b      	lsls	r3, r3, #28
 80087e2:	d501      	bpl.n	80087e8 <_vfiprintf_r+0x3c>
 80087e4:	692b      	ldr	r3, [r5, #16]
 80087e6:	b9eb      	cbnz	r3, 8008824 <_vfiprintf_r+0x78>
 80087e8:	4629      	mov	r1, r5
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff fc48 	bl	8008080 <__swsetup_r>
 80087f0:	b1c0      	cbz	r0, 8008824 <_vfiprintf_r+0x78>
 80087f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087f4:	07dc      	lsls	r4, r3, #31
 80087f6:	d50e      	bpl.n	8008816 <_vfiprintf_r+0x6a>
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087fc:	b01d      	add	sp, #116	; 0x74
 80087fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008802:	4b7b      	ldr	r3, [pc, #492]	; (80089f0 <_vfiprintf_r+0x244>)
 8008804:	429d      	cmp	r5, r3
 8008806:	d101      	bne.n	800880c <_vfiprintf_r+0x60>
 8008808:	68b5      	ldr	r5, [r6, #8]
 800880a:	e7df      	b.n	80087cc <_vfiprintf_r+0x20>
 800880c:	4b79      	ldr	r3, [pc, #484]	; (80089f4 <_vfiprintf_r+0x248>)
 800880e:	429d      	cmp	r5, r3
 8008810:	bf08      	it	eq
 8008812:	68f5      	ldreq	r5, [r6, #12]
 8008814:	e7da      	b.n	80087cc <_vfiprintf_r+0x20>
 8008816:	89ab      	ldrh	r3, [r5, #12]
 8008818:	0598      	lsls	r0, r3, #22
 800881a:	d4ed      	bmi.n	80087f8 <_vfiprintf_r+0x4c>
 800881c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800881e:	f7ff fe52 	bl	80084c6 <__retarget_lock_release_recursive>
 8008822:	e7e9      	b.n	80087f8 <_vfiprintf_r+0x4c>
 8008824:	2300      	movs	r3, #0
 8008826:	9309      	str	r3, [sp, #36]	; 0x24
 8008828:	2320      	movs	r3, #32
 800882a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800882e:	2330      	movs	r3, #48	; 0x30
 8008830:	f04f 0901 	mov.w	r9, #1
 8008834:	f8cd 800c 	str.w	r8, [sp, #12]
 8008838:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80089f8 <_vfiprintf_r+0x24c>
 800883c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008840:	4623      	mov	r3, r4
 8008842:	469a      	mov	sl, r3
 8008844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008848:	b10a      	cbz	r2, 800884e <_vfiprintf_r+0xa2>
 800884a:	2a25      	cmp	r2, #37	; 0x25
 800884c:	d1f9      	bne.n	8008842 <_vfiprintf_r+0x96>
 800884e:	ebba 0b04 	subs.w	fp, sl, r4
 8008852:	d00b      	beq.n	800886c <_vfiprintf_r+0xc0>
 8008854:	465b      	mov	r3, fp
 8008856:	4622      	mov	r2, r4
 8008858:	4629      	mov	r1, r5
 800885a:	4630      	mov	r0, r6
 800885c:	f7ff ff93 	bl	8008786 <__sfputs_r>
 8008860:	3001      	adds	r0, #1
 8008862:	f000 80aa 	beq.w	80089ba <_vfiprintf_r+0x20e>
 8008866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008868:	445a      	add	r2, fp
 800886a:	9209      	str	r2, [sp, #36]	; 0x24
 800886c:	f89a 3000 	ldrb.w	r3, [sl]
 8008870:	2b00      	cmp	r3, #0
 8008872:	f000 80a2 	beq.w	80089ba <_vfiprintf_r+0x20e>
 8008876:	2300      	movs	r3, #0
 8008878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800887c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008880:	f10a 0a01 	add.w	sl, sl, #1
 8008884:	9304      	str	r3, [sp, #16]
 8008886:	9307      	str	r3, [sp, #28]
 8008888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800888c:	931a      	str	r3, [sp, #104]	; 0x68
 800888e:	4654      	mov	r4, sl
 8008890:	2205      	movs	r2, #5
 8008892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008896:	4858      	ldr	r0, [pc, #352]	; (80089f8 <_vfiprintf_r+0x24c>)
 8008898:	f000 faf8 	bl	8008e8c <memchr>
 800889c:	9a04      	ldr	r2, [sp, #16]
 800889e:	b9d8      	cbnz	r0, 80088d8 <_vfiprintf_r+0x12c>
 80088a0:	06d1      	lsls	r1, r2, #27
 80088a2:	bf44      	itt	mi
 80088a4:	2320      	movmi	r3, #32
 80088a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088aa:	0713      	lsls	r3, r2, #28
 80088ac:	bf44      	itt	mi
 80088ae:	232b      	movmi	r3, #43	; 0x2b
 80088b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b4:	f89a 3000 	ldrb.w	r3, [sl]
 80088b8:	2b2a      	cmp	r3, #42	; 0x2a
 80088ba:	d015      	beq.n	80088e8 <_vfiprintf_r+0x13c>
 80088bc:	4654      	mov	r4, sl
 80088be:	2000      	movs	r0, #0
 80088c0:	f04f 0c0a 	mov.w	ip, #10
 80088c4:	9a07      	ldr	r2, [sp, #28]
 80088c6:	4621      	mov	r1, r4
 80088c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088cc:	3b30      	subs	r3, #48	; 0x30
 80088ce:	2b09      	cmp	r3, #9
 80088d0:	d94e      	bls.n	8008970 <_vfiprintf_r+0x1c4>
 80088d2:	b1b0      	cbz	r0, 8008902 <_vfiprintf_r+0x156>
 80088d4:	9207      	str	r2, [sp, #28]
 80088d6:	e014      	b.n	8008902 <_vfiprintf_r+0x156>
 80088d8:	eba0 0308 	sub.w	r3, r0, r8
 80088dc:	fa09 f303 	lsl.w	r3, r9, r3
 80088e0:	4313      	orrs	r3, r2
 80088e2:	46a2      	mov	sl, r4
 80088e4:	9304      	str	r3, [sp, #16]
 80088e6:	e7d2      	b.n	800888e <_vfiprintf_r+0xe2>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	1d19      	adds	r1, r3, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	9103      	str	r1, [sp, #12]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bfbb      	ittet	lt
 80088f4:	425b      	neglt	r3, r3
 80088f6:	f042 0202 	orrlt.w	r2, r2, #2
 80088fa:	9307      	strge	r3, [sp, #28]
 80088fc:	9307      	strlt	r3, [sp, #28]
 80088fe:	bfb8      	it	lt
 8008900:	9204      	strlt	r2, [sp, #16]
 8008902:	7823      	ldrb	r3, [r4, #0]
 8008904:	2b2e      	cmp	r3, #46	; 0x2e
 8008906:	d10c      	bne.n	8008922 <_vfiprintf_r+0x176>
 8008908:	7863      	ldrb	r3, [r4, #1]
 800890a:	2b2a      	cmp	r3, #42	; 0x2a
 800890c:	d135      	bne.n	800897a <_vfiprintf_r+0x1ce>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	3402      	adds	r4, #2
 8008912:	1d1a      	adds	r2, r3, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	9203      	str	r2, [sp, #12]
 8008918:	2b00      	cmp	r3, #0
 800891a:	bfb8      	it	lt
 800891c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008920:	9305      	str	r3, [sp, #20]
 8008922:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80089fc <_vfiprintf_r+0x250>
 8008926:	2203      	movs	r2, #3
 8008928:	4650      	mov	r0, sl
 800892a:	7821      	ldrb	r1, [r4, #0]
 800892c:	f000 faae 	bl	8008e8c <memchr>
 8008930:	b140      	cbz	r0, 8008944 <_vfiprintf_r+0x198>
 8008932:	2340      	movs	r3, #64	; 0x40
 8008934:	eba0 000a 	sub.w	r0, r0, sl
 8008938:	fa03 f000 	lsl.w	r0, r3, r0
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	3401      	adds	r4, #1
 8008940:	4303      	orrs	r3, r0
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008948:	2206      	movs	r2, #6
 800894a:	482d      	ldr	r0, [pc, #180]	; (8008a00 <_vfiprintf_r+0x254>)
 800894c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008950:	f000 fa9c 	bl	8008e8c <memchr>
 8008954:	2800      	cmp	r0, #0
 8008956:	d03f      	beq.n	80089d8 <_vfiprintf_r+0x22c>
 8008958:	4b2a      	ldr	r3, [pc, #168]	; (8008a04 <_vfiprintf_r+0x258>)
 800895a:	bb1b      	cbnz	r3, 80089a4 <_vfiprintf_r+0x1f8>
 800895c:	9b03      	ldr	r3, [sp, #12]
 800895e:	3307      	adds	r3, #7
 8008960:	f023 0307 	bic.w	r3, r3, #7
 8008964:	3308      	adds	r3, #8
 8008966:	9303      	str	r3, [sp, #12]
 8008968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896a:	443b      	add	r3, r7
 800896c:	9309      	str	r3, [sp, #36]	; 0x24
 800896e:	e767      	b.n	8008840 <_vfiprintf_r+0x94>
 8008970:	460c      	mov	r4, r1
 8008972:	2001      	movs	r0, #1
 8008974:	fb0c 3202 	mla	r2, ip, r2, r3
 8008978:	e7a5      	b.n	80088c6 <_vfiprintf_r+0x11a>
 800897a:	2300      	movs	r3, #0
 800897c:	f04f 0c0a 	mov.w	ip, #10
 8008980:	4619      	mov	r1, r3
 8008982:	3401      	adds	r4, #1
 8008984:	9305      	str	r3, [sp, #20]
 8008986:	4620      	mov	r0, r4
 8008988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800898c:	3a30      	subs	r2, #48	; 0x30
 800898e:	2a09      	cmp	r2, #9
 8008990:	d903      	bls.n	800899a <_vfiprintf_r+0x1ee>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0c5      	beq.n	8008922 <_vfiprintf_r+0x176>
 8008996:	9105      	str	r1, [sp, #20]
 8008998:	e7c3      	b.n	8008922 <_vfiprintf_r+0x176>
 800899a:	4604      	mov	r4, r0
 800899c:	2301      	movs	r3, #1
 800899e:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a2:	e7f0      	b.n	8008986 <_vfiprintf_r+0x1da>
 80089a4:	ab03      	add	r3, sp, #12
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	462a      	mov	r2, r5
 80089aa:	4630      	mov	r0, r6
 80089ac:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <_vfiprintf_r+0x25c>)
 80089ae:	a904      	add	r1, sp, #16
 80089b0:	f3af 8000 	nop.w
 80089b4:	4607      	mov	r7, r0
 80089b6:	1c78      	adds	r0, r7, #1
 80089b8:	d1d6      	bne.n	8008968 <_vfiprintf_r+0x1bc>
 80089ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089bc:	07d9      	lsls	r1, r3, #31
 80089be:	d405      	bmi.n	80089cc <_vfiprintf_r+0x220>
 80089c0:	89ab      	ldrh	r3, [r5, #12]
 80089c2:	059a      	lsls	r2, r3, #22
 80089c4:	d402      	bmi.n	80089cc <_vfiprintf_r+0x220>
 80089c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089c8:	f7ff fd7d 	bl	80084c6 <__retarget_lock_release_recursive>
 80089cc:	89ab      	ldrh	r3, [r5, #12]
 80089ce:	065b      	lsls	r3, r3, #25
 80089d0:	f53f af12 	bmi.w	80087f8 <_vfiprintf_r+0x4c>
 80089d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089d6:	e711      	b.n	80087fc <_vfiprintf_r+0x50>
 80089d8:	ab03      	add	r3, sp, #12
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	462a      	mov	r2, r5
 80089de:	4630      	mov	r0, r6
 80089e0:	4b09      	ldr	r3, [pc, #36]	; (8008a08 <_vfiprintf_r+0x25c>)
 80089e2:	a904      	add	r1, sp, #16
 80089e4:	f000 f882 	bl	8008aec <_printf_i>
 80089e8:	e7e4      	b.n	80089b4 <_vfiprintf_r+0x208>
 80089ea:	bf00      	nop
 80089ec:	0800aa5c 	.word	0x0800aa5c
 80089f0:	0800aa7c 	.word	0x0800aa7c
 80089f4:	0800aa3c 	.word	0x0800aa3c
 80089f8:	0800aa9c 	.word	0x0800aa9c
 80089fc:	0800aaa2 	.word	0x0800aaa2
 8008a00:	0800aaa6 	.word	0x0800aaa6
 8008a04:	00000000 	.word	0x00000000
 8008a08:	08008787 	.word	0x08008787

08008a0c <_printf_common>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	4616      	mov	r6, r2
 8008a12:	4699      	mov	r9, r3
 8008a14:	688a      	ldr	r2, [r1, #8]
 8008a16:	690b      	ldr	r3, [r1, #16]
 8008a18:	4607      	mov	r7, r0
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bfb8      	it	lt
 8008a1e:	4613      	movlt	r3, r2
 8008a20:	6033      	str	r3, [r6, #0]
 8008a22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a26:	460c      	mov	r4, r1
 8008a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a2c:	b10a      	cbz	r2, 8008a32 <_printf_common+0x26>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	6033      	str	r3, [r6, #0]
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	0699      	lsls	r1, r3, #26
 8008a36:	bf42      	ittt	mi
 8008a38:	6833      	ldrmi	r3, [r6, #0]
 8008a3a:	3302      	addmi	r3, #2
 8008a3c:	6033      	strmi	r3, [r6, #0]
 8008a3e:	6825      	ldr	r5, [r4, #0]
 8008a40:	f015 0506 	ands.w	r5, r5, #6
 8008a44:	d106      	bne.n	8008a54 <_printf_common+0x48>
 8008a46:	f104 0a19 	add.w	sl, r4, #25
 8008a4a:	68e3      	ldr	r3, [r4, #12]
 8008a4c:	6832      	ldr	r2, [r6, #0]
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	42ab      	cmp	r3, r5
 8008a52:	dc28      	bgt.n	8008aa6 <_printf_common+0x9a>
 8008a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a58:	1e13      	subs	r3, r2, #0
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	bf18      	it	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	0692      	lsls	r2, r2, #26
 8008a62:	d42d      	bmi.n	8008ac0 <_printf_common+0xb4>
 8008a64:	4649      	mov	r1, r9
 8008a66:	4638      	mov	r0, r7
 8008a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a6c:	47c0      	blx	r8
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d020      	beq.n	8008ab4 <_printf_common+0xa8>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	68e5      	ldr	r5, [r4, #12]
 8008a76:	f003 0306 	and.w	r3, r3, #6
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	bf18      	it	ne
 8008a7e:	2500      	movne	r5, #0
 8008a80:	6832      	ldr	r2, [r6, #0]
 8008a82:	f04f 0600 	mov.w	r6, #0
 8008a86:	68a3      	ldr	r3, [r4, #8]
 8008a88:	bf08      	it	eq
 8008a8a:	1aad      	subeq	r5, r5, r2
 8008a8c:	6922      	ldr	r2, [r4, #16]
 8008a8e:	bf08      	it	eq
 8008a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a94:	4293      	cmp	r3, r2
 8008a96:	bfc4      	itt	gt
 8008a98:	1a9b      	subgt	r3, r3, r2
 8008a9a:	18ed      	addgt	r5, r5, r3
 8008a9c:	341a      	adds	r4, #26
 8008a9e:	42b5      	cmp	r5, r6
 8008aa0:	d11a      	bne.n	8008ad8 <_printf_common+0xcc>
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	e008      	b.n	8008ab8 <_printf_common+0xac>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4652      	mov	r2, sl
 8008aaa:	4649      	mov	r1, r9
 8008aac:	4638      	mov	r0, r7
 8008aae:	47c0      	blx	r8
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d103      	bne.n	8008abc <_printf_common+0xb0>
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abc:	3501      	adds	r5, #1
 8008abe:	e7c4      	b.n	8008a4a <_printf_common+0x3e>
 8008ac0:	2030      	movs	r0, #48	; 0x30
 8008ac2:	18e1      	adds	r1, r4, r3
 8008ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ace:	4422      	add	r2, r4
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ad6:	e7c5      	b.n	8008a64 <_printf_common+0x58>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	4622      	mov	r2, r4
 8008adc:	4649      	mov	r1, r9
 8008ade:	4638      	mov	r0, r7
 8008ae0:	47c0      	blx	r8
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	d0e6      	beq.n	8008ab4 <_printf_common+0xa8>
 8008ae6:	3601      	adds	r6, #1
 8008ae8:	e7d9      	b.n	8008a9e <_printf_common+0x92>
	...

08008aec <_printf_i>:
 8008aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	7e0f      	ldrb	r7, [r1, #24]
 8008af2:	4691      	mov	r9, r2
 8008af4:	2f78      	cmp	r7, #120	; 0x78
 8008af6:	4680      	mov	r8, r0
 8008af8:	460c      	mov	r4, r1
 8008afa:	469a      	mov	sl, r3
 8008afc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008afe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b02:	d807      	bhi.n	8008b14 <_printf_i+0x28>
 8008b04:	2f62      	cmp	r7, #98	; 0x62
 8008b06:	d80a      	bhi.n	8008b1e <_printf_i+0x32>
 8008b08:	2f00      	cmp	r7, #0
 8008b0a:	f000 80d9 	beq.w	8008cc0 <_printf_i+0x1d4>
 8008b0e:	2f58      	cmp	r7, #88	; 0x58
 8008b10:	f000 80a4 	beq.w	8008c5c <_printf_i+0x170>
 8008b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b1c:	e03a      	b.n	8008b94 <_printf_i+0xa8>
 8008b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b22:	2b15      	cmp	r3, #21
 8008b24:	d8f6      	bhi.n	8008b14 <_printf_i+0x28>
 8008b26:	a101      	add	r1, pc, #4	; (adr r1, 8008b2c <_printf_i+0x40>)
 8008b28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b2c:	08008b85 	.word	0x08008b85
 8008b30:	08008b99 	.word	0x08008b99
 8008b34:	08008b15 	.word	0x08008b15
 8008b38:	08008b15 	.word	0x08008b15
 8008b3c:	08008b15 	.word	0x08008b15
 8008b40:	08008b15 	.word	0x08008b15
 8008b44:	08008b99 	.word	0x08008b99
 8008b48:	08008b15 	.word	0x08008b15
 8008b4c:	08008b15 	.word	0x08008b15
 8008b50:	08008b15 	.word	0x08008b15
 8008b54:	08008b15 	.word	0x08008b15
 8008b58:	08008ca7 	.word	0x08008ca7
 8008b5c:	08008bc9 	.word	0x08008bc9
 8008b60:	08008c89 	.word	0x08008c89
 8008b64:	08008b15 	.word	0x08008b15
 8008b68:	08008b15 	.word	0x08008b15
 8008b6c:	08008cc9 	.word	0x08008cc9
 8008b70:	08008b15 	.word	0x08008b15
 8008b74:	08008bc9 	.word	0x08008bc9
 8008b78:	08008b15 	.word	0x08008b15
 8008b7c:	08008b15 	.word	0x08008b15
 8008b80:	08008c91 	.word	0x08008c91
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	1d1a      	adds	r2, r3, #4
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	602a      	str	r2, [r5, #0]
 8008b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b94:	2301      	movs	r3, #1
 8008b96:	e0a4      	b.n	8008ce2 <_printf_i+0x1f6>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	6829      	ldr	r1, [r5, #0]
 8008b9c:	0606      	lsls	r6, r0, #24
 8008b9e:	f101 0304 	add.w	r3, r1, #4
 8008ba2:	d50a      	bpl.n	8008bba <_printf_i+0xce>
 8008ba4:	680e      	ldr	r6, [r1, #0]
 8008ba6:	602b      	str	r3, [r5, #0]
 8008ba8:	2e00      	cmp	r6, #0
 8008baa:	da03      	bge.n	8008bb4 <_printf_i+0xc8>
 8008bac:	232d      	movs	r3, #45	; 0x2d
 8008bae:	4276      	negs	r6, r6
 8008bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bb4:	230a      	movs	r3, #10
 8008bb6:	485e      	ldr	r0, [pc, #376]	; (8008d30 <_printf_i+0x244>)
 8008bb8:	e019      	b.n	8008bee <_printf_i+0x102>
 8008bba:	680e      	ldr	r6, [r1, #0]
 8008bbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bc0:	602b      	str	r3, [r5, #0]
 8008bc2:	bf18      	it	ne
 8008bc4:	b236      	sxthne	r6, r6
 8008bc6:	e7ef      	b.n	8008ba8 <_printf_i+0xbc>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	6820      	ldr	r0, [r4, #0]
 8008bcc:	1d19      	adds	r1, r3, #4
 8008bce:	6029      	str	r1, [r5, #0]
 8008bd0:	0601      	lsls	r1, r0, #24
 8008bd2:	d501      	bpl.n	8008bd8 <_printf_i+0xec>
 8008bd4:	681e      	ldr	r6, [r3, #0]
 8008bd6:	e002      	b.n	8008bde <_printf_i+0xf2>
 8008bd8:	0646      	lsls	r6, r0, #25
 8008bda:	d5fb      	bpl.n	8008bd4 <_printf_i+0xe8>
 8008bdc:	881e      	ldrh	r6, [r3, #0]
 8008bde:	2f6f      	cmp	r7, #111	; 0x6f
 8008be0:	bf0c      	ite	eq
 8008be2:	2308      	moveq	r3, #8
 8008be4:	230a      	movne	r3, #10
 8008be6:	4852      	ldr	r0, [pc, #328]	; (8008d30 <_printf_i+0x244>)
 8008be8:	2100      	movs	r1, #0
 8008bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bee:	6865      	ldr	r5, [r4, #4]
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	bfa8      	it	ge
 8008bf4:	6821      	ldrge	r1, [r4, #0]
 8008bf6:	60a5      	str	r5, [r4, #8]
 8008bf8:	bfa4      	itt	ge
 8008bfa:	f021 0104 	bicge.w	r1, r1, #4
 8008bfe:	6021      	strge	r1, [r4, #0]
 8008c00:	b90e      	cbnz	r6, 8008c06 <_printf_i+0x11a>
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	d04d      	beq.n	8008ca2 <_printf_i+0x1b6>
 8008c06:	4615      	mov	r5, r2
 8008c08:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c0c:	fb03 6711 	mls	r7, r3, r1, r6
 8008c10:	5dc7      	ldrb	r7, [r0, r7]
 8008c12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c16:	4637      	mov	r7, r6
 8008c18:	42bb      	cmp	r3, r7
 8008c1a:	460e      	mov	r6, r1
 8008c1c:	d9f4      	bls.n	8008c08 <_printf_i+0x11c>
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	d10b      	bne.n	8008c3a <_printf_i+0x14e>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	07de      	lsls	r6, r3, #31
 8008c26:	d508      	bpl.n	8008c3a <_printf_i+0x14e>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	6861      	ldr	r1, [r4, #4]
 8008c2c:	4299      	cmp	r1, r3
 8008c2e:	bfde      	ittt	le
 8008c30:	2330      	movle	r3, #48	; 0x30
 8008c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008c3a:	1b52      	subs	r2, r2, r5
 8008c3c:	6122      	str	r2, [r4, #16]
 8008c3e:	464b      	mov	r3, r9
 8008c40:	4621      	mov	r1, r4
 8008c42:	4640      	mov	r0, r8
 8008c44:	f8cd a000 	str.w	sl, [sp]
 8008c48:	aa03      	add	r2, sp, #12
 8008c4a:	f7ff fedf 	bl	8008a0c <_printf_common>
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d14c      	bne.n	8008cec <_printf_i+0x200>
 8008c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c56:	b004      	add	sp, #16
 8008c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5c:	4834      	ldr	r0, [pc, #208]	; (8008d30 <_printf_i+0x244>)
 8008c5e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c62:	6829      	ldr	r1, [r5, #0]
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c6a:	6029      	str	r1, [r5, #0]
 8008c6c:	061d      	lsls	r5, r3, #24
 8008c6e:	d514      	bpl.n	8008c9a <_printf_i+0x1ae>
 8008c70:	07df      	lsls	r7, r3, #31
 8008c72:	bf44      	itt	mi
 8008c74:	f043 0320 	orrmi.w	r3, r3, #32
 8008c78:	6023      	strmi	r3, [r4, #0]
 8008c7a:	b91e      	cbnz	r6, 8008c84 <_printf_i+0x198>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	f023 0320 	bic.w	r3, r3, #32
 8008c82:	6023      	str	r3, [r4, #0]
 8008c84:	2310      	movs	r3, #16
 8008c86:	e7af      	b.n	8008be8 <_printf_i+0xfc>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	f043 0320 	orr.w	r3, r3, #32
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	2378      	movs	r3, #120	; 0x78
 8008c92:	4828      	ldr	r0, [pc, #160]	; (8008d34 <_printf_i+0x248>)
 8008c94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c98:	e7e3      	b.n	8008c62 <_printf_i+0x176>
 8008c9a:	0659      	lsls	r1, r3, #25
 8008c9c:	bf48      	it	mi
 8008c9e:	b2b6      	uxthmi	r6, r6
 8008ca0:	e7e6      	b.n	8008c70 <_printf_i+0x184>
 8008ca2:	4615      	mov	r5, r2
 8008ca4:	e7bb      	b.n	8008c1e <_printf_i+0x132>
 8008ca6:	682b      	ldr	r3, [r5, #0]
 8008ca8:	6826      	ldr	r6, [r4, #0]
 8008caa:	1d18      	adds	r0, r3, #4
 8008cac:	6961      	ldr	r1, [r4, #20]
 8008cae:	6028      	str	r0, [r5, #0]
 8008cb0:	0635      	lsls	r5, r6, #24
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	d501      	bpl.n	8008cba <_printf_i+0x1ce>
 8008cb6:	6019      	str	r1, [r3, #0]
 8008cb8:	e002      	b.n	8008cc0 <_printf_i+0x1d4>
 8008cba:	0670      	lsls	r0, r6, #25
 8008cbc:	d5fb      	bpl.n	8008cb6 <_printf_i+0x1ca>
 8008cbe:	8019      	strh	r1, [r3, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4615      	mov	r5, r2
 8008cc4:	6123      	str	r3, [r4, #16]
 8008cc6:	e7ba      	b.n	8008c3e <_printf_i+0x152>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	2100      	movs	r1, #0
 8008ccc:	1d1a      	adds	r2, r3, #4
 8008cce:	602a      	str	r2, [r5, #0]
 8008cd0:	681d      	ldr	r5, [r3, #0]
 8008cd2:	6862      	ldr	r2, [r4, #4]
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f000 f8d9 	bl	8008e8c <memchr>
 8008cda:	b108      	cbz	r0, 8008ce0 <_printf_i+0x1f4>
 8008cdc:	1b40      	subs	r0, r0, r5
 8008cde:	6060      	str	r0, [r4, #4]
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cea:	e7a8      	b.n	8008c3e <_printf_i+0x152>
 8008cec:	462a      	mov	r2, r5
 8008cee:	4649      	mov	r1, r9
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	6923      	ldr	r3, [r4, #16]
 8008cf4:	47d0      	blx	sl
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d0ab      	beq.n	8008c52 <_printf_i+0x166>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	079b      	lsls	r3, r3, #30
 8008cfe:	d413      	bmi.n	8008d28 <_printf_i+0x23c>
 8008d00:	68e0      	ldr	r0, [r4, #12]
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	4298      	cmp	r0, r3
 8008d06:	bfb8      	it	lt
 8008d08:	4618      	movlt	r0, r3
 8008d0a:	e7a4      	b.n	8008c56 <_printf_i+0x16a>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	4632      	mov	r2, r6
 8008d10:	4649      	mov	r1, r9
 8008d12:	4640      	mov	r0, r8
 8008d14:	47d0      	blx	sl
 8008d16:	3001      	adds	r0, #1
 8008d18:	d09b      	beq.n	8008c52 <_printf_i+0x166>
 8008d1a:	3501      	adds	r5, #1
 8008d1c:	68e3      	ldr	r3, [r4, #12]
 8008d1e:	9903      	ldr	r1, [sp, #12]
 8008d20:	1a5b      	subs	r3, r3, r1
 8008d22:	42ab      	cmp	r3, r5
 8008d24:	dcf2      	bgt.n	8008d0c <_printf_i+0x220>
 8008d26:	e7eb      	b.n	8008d00 <_printf_i+0x214>
 8008d28:	2500      	movs	r5, #0
 8008d2a:	f104 0619 	add.w	r6, r4, #25
 8008d2e:	e7f5      	b.n	8008d1c <_printf_i+0x230>
 8008d30:	0800aaad 	.word	0x0800aaad
 8008d34:	0800aabe 	.word	0x0800aabe

08008d38 <_sbrk_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	4d05      	ldr	r5, [pc, #20]	; (8008d54 <_sbrk_r+0x1c>)
 8008d3e:	4604      	mov	r4, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	602b      	str	r3, [r5, #0]
 8008d44:	f7fc fd7a 	bl	800583c <_sbrk>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_sbrk_r+0x1a>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_sbrk_r+0x1a>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	2000026c 	.word	0x2000026c

08008d58 <__sread>:
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	460c      	mov	r4, r1
 8008d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d60:	f000 f8ae 	bl	8008ec0 <_read_r>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	bfab      	itete	ge
 8008d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d6c:	181b      	addge	r3, r3, r0
 8008d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d72:	bfac      	ite	ge
 8008d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d76:	81a3      	strhlt	r3, [r4, #12]
 8008d78:	bd10      	pop	{r4, pc}

08008d7a <__swrite>:
 8008d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7e:	461f      	mov	r7, r3
 8008d80:	898b      	ldrh	r3, [r1, #12]
 8008d82:	4605      	mov	r5, r0
 8008d84:	05db      	lsls	r3, r3, #23
 8008d86:	460c      	mov	r4, r1
 8008d88:	4616      	mov	r6, r2
 8008d8a:	d505      	bpl.n	8008d98 <__swrite+0x1e>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d94:	f000 f868 	bl	8008e68 <_lseek_r>
 8008d98:	89a3      	ldrh	r3, [r4, #12]
 8008d9a:	4632      	mov	r2, r6
 8008d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008da0:	81a3      	strh	r3, [r4, #12]
 8008da2:	4628      	mov	r0, r5
 8008da4:	463b      	mov	r3, r7
 8008da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dae:	f000 b817 	b.w	8008de0 <_write_r>

08008db2 <__sseek>:
 8008db2:	b510      	push	{r4, lr}
 8008db4:	460c      	mov	r4, r1
 8008db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dba:	f000 f855 	bl	8008e68 <_lseek_r>
 8008dbe:	1c43      	adds	r3, r0, #1
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	bf15      	itete	ne
 8008dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dce:	81a3      	strheq	r3, [r4, #12]
 8008dd0:	bf18      	it	ne
 8008dd2:	81a3      	strhne	r3, [r4, #12]
 8008dd4:	bd10      	pop	{r4, pc}

08008dd6 <__sclose>:
 8008dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dda:	f000 b813 	b.w	8008e04 <_close_r>
	...

08008de0 <_write_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	4611      	mov	r1, r2
 8008de8:	2200      	movs	r2, #0
 8008dea:	4d05      	ldr	r5, [pc, #20]	; (8008e00 <_write_r+0x20>)
 8008dec:	602a      	str	r2, [r5, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f7fc fc32 	bl	8005658 <_write>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_write_r+0x1e>
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_write_r+0x1e>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	2000026c 	.word	0x2000026c

08008e04 <_close_r>:
 8008e04:	b538      	push	{r3, r4, r5, lr}
 8008e06:	2300      	movs	r3, #0
 8008e08:	4d05      	ldr	r5, [pc, #20]	; (8008e20 <_close_r+0x1c>)
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	602b      	str	r3, [r5, #0]
 8008e10:	f7fc fc4e 	bl	80056b0 <_close>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_close_r+0x1a>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_close_r+0x1a>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	2000026c 	.word	0x2000026c

08008e24 <_fstat_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	2300      	movs	r3, #0
 8008e28:	4d06      	ldr	r5, [pc, #24]	; (8008e44 <_fstat_r+0x20>)
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	4611      	mov	r1, r2
 8008e30:	602b      	str	r3, [r5, #0]
 8008e32:	f7fc fc8d 	bl	8005750 <_fstat>
 8008e36:	1c43      	adds	r3, r0, #1
 8008e38:	d102      	bne.n	8008e40 <_fstat_r+0x1c>
 8008e3a:	682b      	ldr	r3, [r5, #0]
 8008e3c:	b103      	cbz	r3, 8008e40 <_fstat_r+0x1c>
 8008e3e:	6023      	str	r3, [r4, #0]
 8008e40:	bd38      	pop	{r3, r4, r5, pc}
 8008e42:	bf00      	nop
 8008e44:	2000026c 	.word	0x2000026c

08008e48 <_isatty_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	4d05      	ldr	r5, [pc, #20]	; (8008e64 <_isatty_r+0x1c>)
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4608      	mov	r0, r1
 8008e52:	602b      	str	r3, [r5, #0]
 8008e54:	f7fc fbea 	bl	800562c <_isatty>
 8008e58:	1c43      	adds	r3, r0, #1
 8008e5a:	d102      	bne.n	8008e62 <_isatty_r+0x1a>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	b103      	cbz	r3, 8008e62 <_isatty_r+0x1a>
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	2000026c 	.word	0x2000026c

08008e68 <_lseek_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	4611      	mov	r1, r2
 8008e70:	2200      	movs	r2, #0
 8008e72:	4d05      	ldr	r5, [pc, #20]	; (8008e88 <_lseek_r+0x20>)
 8008e74:	602a      	str	r2, [r5, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	f7fc fc31 	bl	80056de <_lseek>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	d102      	bne.n	8008e86 <_lseek_r+0x1e>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	b103      	cbz	r3, 8008e86 <_lseek_r+0x1e>
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	2000026c 	.word	0x2000026c

08008e8c <memchr>:
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	b2c9      	uxtb	r1, r1
 8008e92:	4402      	add	r2, r0
 8008e94:	4293      	cmp	r3, r2
 8008e96:	4618      	mov	r0, r3
 8008e98:	d101      	bne.n	8008e9e <memchr+0x12>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e003      	b.n	8008ea6 <memchr+0x1a>
 8008e9e:	7804      	ldrb	r4, [r0, #0]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	428c      	cmp	r4, r1
 8008ea4:	d1f6      	bne.n	8008e94 <memchr+0x8>
 8008ea6:	bd10      	pop	{r4, pc}

08008ea8 <__malloc_lock>:
 8008ea8:	4801      	ldr	r0, [pc, #4]	; (8008eb0 <__malloc_lock+0x8>)
 8008eaa:	f7ff bb0b 	b.w	80084c4 <__retarget_lock_acquire_recursive>
 8008eae:	bf00      	nop
 8008eb0:	20000260 	.word	0x20000260

08008eb4 <__malloc_unlock>:
 8008eb4:	4801      	ldr	r0, [pc, #4]	; (8008ebc <__malloc_unlock+0x8>)
 8008eb6:	f7ff bb06 	b.w	80084c6 <__retarget_lock_release_recursive>
 8008eba:	bf00      	nop
 8008ebc:	20000260 	.word	0x20000260

08008ec0 <_read_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4d05      	ldr	r5, [pc, #20]	; (8008ee0 <_read_r+0x20>)
 8008ecc:	602a      	str	r2, [r5, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f7fc fc16 	bl	8005700 <_read>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_read_r+0x1e>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_read_r+0x1e>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	2000026c 	.word	0x2000026c

08008ee4 <pow>:
 8008ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee8:	4614      	mov	r4, r2
 8008eea:	461d      	mov	r5, r3
 8008eec:	4680      	mov	r8, r0
 8008eee:	4689      	mov	r9, r1
 8008ef0:	f000 f886 	bl	8009000 <__ieee754_pow>
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460f      	mov	r7, r1
 8008efa:	462b      	mov	r3, r5
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 fde8 	bl	8000ad4 <__aeabi_dcmpun>
 8008f04:	bbc8      	cbnz	r0, 8008f7a <pow+0x96>
 8008f06:	2200      	movs	r2, #0
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4649      	mov	r1, r9
 8008f0e:	f7f7 fdaf 	bl	8000a70 <__aeabi_dcmpeq>
 8008f12:	b1b8      	cbz	r0, 8008f44 <pow+0x60>
 8008f14:	2200      	movs	r2, #0
 8008f16:	2300      	movs	r3, #0
 8008f18:	4620      	mov	r0, r4
 8008f1a:	4629      	mov	r1, r5
 8008f1c:	f7f7 fda8 	bl	8000a70 <__aeabi_dcmpeq>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d141      	bne.n	8008fa8 <pow+0xc4>
 8008f24:	4620      	mov	r0, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	f000 fe5f 	bl	8009bea <finite>
 8008f2c:	b328      	cbz	r0, 8008f7a <pow+0x96>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2300      	movs	r3, #0
 8008f32:	4620      	mov	r0, r4
 8008f34:	4629      	mov	r1, r5
 8008f36:	f7f7 fda5 	bl	8000a84 <__aeabi_dcmplt>
 8008f3a:	b1f0      	cbz	r0, 8008f7a <pow+0x96>
 8008f3c:	f7fe fec8 	bl	8007cd0 <__errno>
 8008f40:	2322      	movs	r3, #34	; 0x22
 8008f42:	e019      	b.n	8008f78 <pow+0x94>
 8008f44:	4630      	mov	r0, r6
 8008f46:	4639      	mov	r1, r7
 8008f48:	f000 fe4f 	bl	8009bea <finite>
 8008f4c:	b9c8      	cbnz	r0, 8008f82 <pow+0x9e>
 8008f4e:	4640      	mov	r0, r8
 8008f50:	4649      	mov	r1, r9
 8008f52:	f000 fe4a 	bl	8009bea <finite>
 8008f56:	b1a0      	cbz	r0, 8008f82 <pow+0x9e>
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f000 fe45 	bl	8009bea <finite>
 8008f60:	b178      	cbz	r0, 8008f82 <pow+0x9e>
 8008f62:	4632      	mov	r2, r6
 8008f64:	463b      	mov	r3, r7
 8008f66:	4630      	mov	r0, r6
 8008f68:	4639      	mov	r1, r7
 8008f6a:	f7f7 fdb3 	bl	8000ad4 <__aeabi_dcmpun>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d0e4      	beq.n	8008f3c <pow+0x58>
 8008f72:	f7fe fead 	bl	8007cd0 <__errno>
 8008f76:	2321      	movs	r3, #33	; 0x21
 8008f78:	6003      	str	r3, [r0, #0]
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	4639      	mov	r1, r7
 8008f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f82:	2200      	movs	r2, #0
 8008f84:	2300      	movs	r3, #0
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	f7f7 fd71 	bl	8000a70 <__aeabi_dcmpeq>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d0f3      	beq.n	8008f7a <pow+0x96>
 8008f92:	4640      	mov	r0, r8
 8008f94:	4649      	mov	r1, r9
 8008f96:	f000 fe28 	bl	8009bea <finite>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d0ed      	beq.n	8008f7a <pow+0x96>
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f000 fe22 	bl	8009bea <finite>
 8008fa6:	e7c8      	b.n	8008f3a <pow+0x56>
 8008fa8:	2600      	movs	r6, #0
 8008faa:	4f01      	ldr	r7, [pc, #4]	; (8008fb0 <pow+0xcc>)
 8008fac:	e7e5      	b.n	8008f7a <pow+0x96>
 8008fae:	bf00      	nop
 8008fb0:	3ff00000 	.word	0x3ff00000

08008fb4 <sqrt>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460f      	mov	r7, r1
 8008fba:	f000 fd37 	bl	8009a2c <__ieee754_sqrt>
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	460d      	mov	r5, r1
 8008fc4:	463b      	mov	r3, r7
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	4639      	mov	r1, r7
 8008fca:	f7f7 fd83 	bl	8000ad4 <__aeabi_dcmpun>
 8008fce:	b990      	cbnz	r0, 8008ff6 <sqrt+0x42>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	4639      	mov	r1, r7
 8008fd8:	f7f7 fd54 	bl	8000a84 <__aeabi_dcmplt>
 8008fdc:	b158      	cbz	r0, 8008ff6 <sqrt+0x42>
 8008fde:	f7fe fe77 	bl	8007cd0 <__errno>
 8008fe2:	2321      	movs	r3, #33	; 0x21
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	6003      	str	r3, [r0, #0]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	4610      	mov	r0, r2
 8008fec:	4619      	mov	r1, r3
 8008fee:	f7f7 fc01 	bl	80007f4 <__aeabi_ddiv>
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffc:	0000      	movs	r0, r0
	...

08009000 <__ieee754_pow>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	b093      	sub	sp, #76	; 0x4c
 8009006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800900a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800900e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009012:	4689      	mov	r9, r1
 8009014:	ea56 0102 	orrs.w	r1, r6, r2
 8009018:	4680      	mov	r8, r0
 800901a:	d111      	bne.n	8009040 <__ieee754_pow+0x40>
 800901c:	1803      	adds	r3, r0, r0
 800901e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009022:	4152      	adcs	r2, r2
 8009024:	4299      	cmp	r1, r3
 8009026:	4b82      	ldr	r3, [pc, #520]	; (8009230 <__ieee754_pow+0x230>)
 8009028:	4193      	sbcs	r3, r2
 800902a:	f080 84b9 	bcs.w	80099a0 <__ieee754_pow+0x9a0>
 800902e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009032:	4640      	mov	r0, r8
 8009034:	4649      	mov	r1, r9
 8009036:	f7f7 f8fd 	bl	8000234 <__adddf3>
 800903a:	4683      	mov	fp, r0
 800903c:	468c      	mov	ip, r1
 800903e:	e06f      	b.n	8009120 <__ieee754_pow+0x120>
 8009040:	4b7c      	ldr	r3, [pc, #496]	; (8009234 <__ieee754_pow+0x234>)
 8009042:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009046:	429c      	cmp	r4, r3
 8009048:	464d      	mov	r5, r9
 800904a:	4682      	mov	sl, r0
 800904c:	dc06      	bgt.n	800905c <__ieee754_pow+0x5c>
 800904e:	d101      	bne.n	8009054 <__ieee754_pow+0x54>
 8009050:	2800      	cmp	r0, #0
 8009052:	d1ec      	bne.n	800902e <__ieee754_pow+0x2e>
 8009054:	429e      	cmp	r6, r3
 8009056:	dc01      	bgt.n	800905c <__ieee754_pow+0x5c>
 8009058:	d10f      	bne.n	800907a <__ieee754_pow+0x7a>
 800905a:	b172      	cbz	r2, 800907a <__ieee754_pow+0x7a>
 800905c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009060:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009064:	ea55 050a 	orrs.w	r5, r5, sl
 8009068:	d1e1      	bne.n	800902e <__ieee754_pow+0x2e>
 800906a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800906e:	18db      	adds	r3, r3, r3
 8009070:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009074:	4152      	adcs	r2, r2
 8009076:	429d      	cmp	r5, r3
 8009078:	e7d5      	b.n	8009026 <__ieee754_pow+0x26>
 800907a:	2d00      	cmp	r5, #0
 800907c:	da39      	bge.n	80090f2 <__ieee754_pow+0xf2>
 800907e:	4b6e      	ldr	r3, [pc, #440]	; (8009238 <__ieee754_pow+0x238>)
 8009080:	429e      	cmp	r6, r3
 8009082:	dc52      	bgt.n	800912a <__ieee754_pow+0x12a>
 8009084:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009088:	429e      	cmp	r6, r3
 800908a:	f340 849c 	ble.w	80099c6 <__ieee754_pow+0x9c6>
 800908e:	1533      	asrs	r3, r6, #20
 8009090:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009094:	2b14      	cmp	r3, #20
 8009096:	dd0f      	ble.n	80090b8 <__ieee754_pow+0xb8>
 8009098:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800909c:	fa22 f103 	lsr.w	r1, r2, r3
 80090a0:	fa01 f303 	lsl.w	r3, r1, r3
 80090a4:	4293      	cmp	r3, r2
 80090a6:	f040 848e 	bne.w	80099c6 <__ieee754_pow+0x9c6>
 80090aa:	f001 0101 	and.w	r1, r1, #1
 80090ae:	f1c1 0302 	rsb	r3, r1, #2
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	b182      	cbz	r2, 80090d8 <__ieee754_pow+0xd8>
 80090b6:	e05d      	b.n	8009174 <__ieee754_pow+0x174>
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	d159      	bne.n	8009170 <__ieee754_pow+0x170>
 80090bc:	f1c3 0314 	rsb	r3, r3, #20
 80090c0:	fa46 f103 	asr.w	r1, r6, r3
 80090c4:	fa01 f303 	lsl.w	r3, r1, r3
 80090c8:	42b3      	cmp	r3, r6
 80090ca:	f040 8479 	bne.w	80099c0 <__ieee754_pow+0x9c0>
 80090ce:	f001 0101 	and.w	r1, r1, #1
 80090d2:	f1c1 0302 	rsb	r3, r1, #2
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4b58      	ldr	r3, [pc, #352]	; (800923c <__ieee754_pow+0x23c>)
 80090da:	429e      	cmp	r6, r3
 80090dc:	d132      	bne.n	8009144 <__ieee754_pow+0x144>
 80090de:	2f00      	cmp	r7, #0
 80090e0:	f280 846a 	bge.w	80099b8 <__ieee754_pow+0x9b8>
 80090e4:	4642      	mov	r2, r8
 80090e6:	464b      	mov	r3, r9
 80090e8:	2000      	movs	r0, #0
 80090ea:	4954      	ldr	r1, [pc, #336]	; (800923c <__ieee754_pow+0x23c>)
 80090ec:	f7f7 fb82 	bl	80007f4 <__aeabi_ddiv>
 80090f0:	e7a3      	b.n	800903a <__ieee754_pow+0x3a>
 80090f2:	2300      	movs	r3, #0
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	d13c      	bne.n	8009174 <__ieee754_pow+0x174>
 80090fa:	4b4e      	ldr	r3, [pc, #312]	; (8009234 <__ieee754_pow+0x234>)
 80090fc:	429e      	cmp	r6, r3
 80090fe:	d1eb      	bne.n	80090d8 <__ieee754_pow+0xd8>
 8009100:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009104:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009108:	ea53 030a 	orrs.w	r3, r3, sl
 800910c:	f000 8448 	beq.w	80099a0 <__ieee754_pow+0x9a0>
 8009110:	4b4b      	ldr	r3, [pc, #300]	; (8009240 <__ieee754_pow+0x240>)
 8009112:	429c      	cmp	r4, r3
 8009114:	dd0b      	ble.n	800912e <__ieee754_pow+0x12e>
 8009116:	2f00      	cmp	r7, #0
 8009118:	f2c0 8448 	blt.w	80099ac <__ieee754_pow+0x9ac>
 800911c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009120:	4658      	mov	r0, fp
 8009122:	4661      	mov	r1, ip
 8009124:	b013      	add	sp, #76	; 0x4c
 8009126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912a:	2302      	movs	r3, #2
 800912c:	e7e2      	b.n	80090f4 <__ieee754_pow+0xf4>
 800912e:	2f00      	cmp	r7, #0
 8009130:	f04f 0b00 	mov.w	fp, #0
 8009134:	f04f 0c00 	mov.w	ip, #0
 8009138:	daf2      	bge.n	8009120 <__ieee754_pow+0x120>
 800913a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800913e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009142:	e7ed      	b.n	8009120 <__ieee754_pow+0x120>
 8009144:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009148:	d106      	bne.n	8009158 <__ieee754_pow+0x158>
 800914a:	4642      	mov	r2, r8
 800914c:	464b      	mov	r3, r9
 800914e:	4640      	mov	r0, r8
 8009150:	4649      	mov	r1, r9
 8009152:	f7f7 fa25 	bl	80005a0 <__aeabi_dmul>
 8009156:	e770      	b.n	800903a <__ieee754_pow+0x3a>
 8009158:	4b3a      	ldr	r3, [pc, #232]	; (8009244 <__ieee754_pow+0x244>)
 800915a:	429f      	cmp	r7, r3
 800915c:	d10a      	bne.n	8009174 <__ieee754_pow+0x174>
 800915e:	2d00      	cmp	r5, #0
 8009160:	db08      	blt.n	8009174 <__ieee754_pow+0x174>
 8009162:	4640      	mov	r0, r8
 8009164:	4649      	mov	r1, r9
 8009166:	b013      	add	sp, #76	; 0x4c
 8009168:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916c:	f000 bc5e 	b.w	8009a2c <__ieee754_sqrt>
 8009170:	2300      	movs	r3, #0
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	4640      	mov	r0, r8
 8009176:	4649      	mov	r1, r9
 8009178:	f000 fd34 	bl	8009be4 <fabs>
 800917c:	4683      	mov	fp, r0
 800917e:	468c      	mov	ip, r1
 8009180:	f1ba 0f00 	cmp.w	sl, #0
 8009184:	d128      	bne.n	80091d8 <__ieee754_pow+0x1d8>
 8009186:	b124      	cbz	r4, 8009192 <__ieee754_pow+0x192>
 8009188:	4b2c      	ldr	r3, [pc, #176]	; (800923c <__ieee754_pow+0x23c>)
 800918a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800918e:	429a      	cmp	r2, r3
 8009190:	d122      	bne.n	80091d8 <__ieee754_pow+0x1d8>
 8009192:	2f00      	cmp	r7, #0
 8009194:	da07      	bge.n	80091a6 <__ieee754_pow+0x1a6>
 8009196:	465a      	mov	r2, fp
 8009198:	4663      	mov	r3, ip
 800919a:	2000      	movs	r0, #0
 800919c:	4927      	ldr	r1, [pc, #156]	; (800923c <__ieee754_pow+0x23c>)
 800919e:	f7f7 fb29 	bl	80007f4 <__aeabi_ddiv>
 80091a2:	4683      	mov	fp, r0
 80091a4:	468c      	mov	ip, r1
 80091a6:	2d00      	cmp	r5, #0
 80091a8:	daba      	bge.n	8009120 <__ieee754_pow+0x120>
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80091b0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80091b4:	4323      	orrs	r3, r4
 80091b6:	d108      	bne.n	80091ca <__ieee754_pow+0x1ca>
 80091b8:	465a      	mov	r2, fp
 80091ba:	4663      	mov	r3, ip
 80091bc:	4658      	mov	r0, fp
 80091be:	4661      	mov	r1, ip
 80091c0:	f7f7 f836 	bl	8000230 <__aeabi_dsub>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	e790      	b.n	80090ec <__ieee754_pow+0xec>
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d1a7      	bne.n	8009120 <__ieee754_pow+0x120>
 80091d0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80091d4:	469c      	mov	ip, r3
 80091d6:	e7a3      	b.n	8009120 <__ieee754_pow+0x120>
 80091d8:	0feb      	lsrs	r3, r5, #31
 80091da:	3b01      	subs	r3, #1
 80091dc:	930c      	str	r3, [sp, #48]	; 0x30
 80091de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091e0:	9b00      	ldr	r3, [sp, #0]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	d104      	bne.n	80091f0 <__ieee754_pow+0x1f0>
 80091e6:	4642      	mov	r2, r8
 80091e8:	464b      	mov	r3, r9
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	e7e7      	b.n	80091c0 <__ieee754_pow+0x1c0>
 80091f0:	4b15      	ldr	r3, [pc, #84]	; (8009248 <__ieee754_pow+0x248>)
 80091f2:	429e      	cmp	r6, r3
 80091f4:	f340 80f6 	ble.w	80093e4 <__ieee754_pow+0x3e4>
 80091f8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80091fc:	429e      	cmp	r6, r3
 80091fe:	4b10      	ldr	r3, [pc, #64]	; (8009240 <__ieee754_pow+0x240>)
 8009200:	dd09      	ble.n	8009216 <__ieee754_pow+0x216>
 8009202:	429c      	cmp	r4, r3
 8009204:	dc0c      	bgt.n	8009220 <__ieee754_pow+0x220>
 8009206:	2f00      	cmp	r7, #0
 8009208:	da0c      	bge.n	8009224 <__ieee754_pow+0x224>
 800920a:	2000      	movs	r0, #0
 800920c:	b013      	add	sp, #76	; 0x4c
 800920e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009212:	f000 bce2 	b.w	8009bda <__math_oflow>
 8009216:	429c      	cmp	r4, r3
 8009218:	dbf5      	blt.n	8009206 <__ieee754_pow+0x206>
 800921a:	4b08      	ldr	r3, [pc, #32]	; (800923c <__ieee754_pow+0x23c>)
 800921c:	429c      	cmp	r4, r3
 800921e:	dd15      	ble.n	800924c <__ieee754_pow+0x24c>
 8009220:	2f00      	cmp	r7, #0
 8009222:	dcf2      	bgt.n	800920a <__ieee754_pow+0x20a>
 8009224:	2000      	movs	r0, #0
 8009226:	b013      	add	sp, #76	; 0x4c
 8009228:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	f000 bcd0 	b.w	8009bd0 <__math_uflow>
 8009230:	fff00000 	.word	0xfff00000
 8009234:	7ff00000 	.word	0x7ff00000
 8009238:	433fffff 	.word	0x433fffff
 800923c:	3ff00000 	.word	0x3ff00000
 8009240:	3fefffff 	.word	0x3fefffff
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	41e00000 	.word	0x41e00000
 800924c:	4661      	mov	r1, ip
 800924e:	2200      	movs	r2, #0
 8009250:	4658      	mov	r0, fp
 8009252:	4b5f      	ldr	r3, [pc, #380]	; (80093d0 <__ieee754_pow+0x3d0>)
 8009254:	f7f6 ffec 	bl	8000230 <__aeabi_dsub>
 8009258:	a355      	add	r3, pc, #340	; (adr r3, 80093b0 <__ieee754_pow+0x3b0>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	4604      	mov	r4, r0
 8009260:	460d      	mov	r5, r1
 8009262:	f7f7 f99d 	bl	80005a0 <__aeabi_dmul>
 8009266:	a354      	add	r3, pc, #336	; (adr r3, 80093b8 <__ieee754_pow+0x3b8>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	4606      	mov	r6, r0
 800926e:	460f      	mov	r7, r1
 8009270:	4620      	mov	r0, r4
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 f994 	bl	80005a0 <__aeabi_dmul>
 8009278:	2200      	movs	r2, #0
 800927a:	4682      	mov	sl, r0
 800927c:	468b      	mov	fp, r1
 800927e:	4620      	mov	r0, r4
 8009280:	4629      	mov	r1, r5
 8009282:	4b54      	ldr	r3, [pc, #336]	; (80093d4 <__ieee754_pow+0x3d4>)
 8009284:	f7f7 f98c 	bl	80005a0 <__aeabi_dmul>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	a14c      	add	r1, pc, #304	; (adr r1, 80093c0 <__ieee754_pow+0x3c0>)
 800928e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009292:	f7f6 ffcd 	bl	8000230 <__aeabi_dsub>
 8009296:	4622      	mov	r2, r4
 8009298:	462b      	mov	r3, r5
 800929a:	f7f7 f981 	bl	80005a0 <__aeabi_dmul>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	2000      	movs	r0, #0
 80092a4:	494c      	ldr	r1, [pc, #304]	; (80093d8 <__ieee754_pow+0x3d8>)
 80092a6:	f7f6 ffc3 	bl	8000230 <__aeabi_dsub>
 80092aa:	4622      	mov	r2, r4
 80092ac:	462b      	mov	r3, r5
 80092ae:	4680      	mov	r8, r0
 80092b0:	4689      	mov	r9, r1
 80092b2:	4620      	mov	r0, r4
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7f7 f973 	bl	80005a0 <__aeabi_dmul>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4640      	mov	r0, r8
 80092c0:	4649      	mov	r1, r9
 80092c2:	f7f7 f96d 	bl	80005a0 <__aeabi_dmul>
 80092c6:	a340      	add	r3, pc, #256	; (adr r3, 80093c8 <__ieee754_pow+0x3c8>)
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f7f7 f968 	bl	80005a0 <__aeabi_dmul>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4650      	mov	r0, sl
 80092d6:	4659      	mov	r1, fp
 80092d8:	f7f6 ffaa 	bl	8000230 <__aeabi_dsub>
 80092dc:	f04f 0a00 	mov.w	sl, #0
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4604      	mov	r4, r0
 80092e6:	460d      	mov	r5, r1
 80092e8:	4630      	mov	r0, r6
 80092ea:	4639      	mov	r1, r7
 80092ec:	f7f6 ffa2 	bl	8000234 <__adddf3>
 80092f0:	4632      	mov	r2, r6
 80092f2:	463b      	mov	r3, r7
 80092f4:	4650      	mov	r0, sl
 80092f6:	468b      	mov	fp, r1
 80092f8:	f7f6 ff9a 	bl	8000230 <__aeabi_dsub>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4620      	mov	r0, r4
 8009302:	4629      	mov	r1, r5
 8009304:	f7f6 ff94 	bl	8000230 <__aeabi_dsub>
 8009308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800930c:	9b00      	ldr	r3, [sp, #0]
 800930e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009310:	3b01      	subs	r3, #1
 8009312:	4313      	orrs	r3, r2
 8009314:	f04f 0600 	mov.w	r6, #0
 8009318:	f04f 0200 	mov.w	r2, #0
 800931c:	bf0c      	ite	eq
 800931e:	4b2f      	ldreq	r3, [pc, #188]	; (80093dc <__ieee754_pow+0x3dc>)
 8009320:	4b2b      	ldrne	r3, [pc, #172]	; (80093d0 <__ieee754_pow+0x3d0>)
 8009322:	4604      	mov	r4, r0
 8009324:	460d      	mov	r5, r1
 8009326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800932a:	e9cd 2300 	strd	r2, r3, [sp]
 800932e:	4632      	mov	r2, r6
 8009330:	463b      	mov	r3, r7
 8009332:	f7f6 ff7d 	bl	8000230 <__aeabi_dsub>
 8009336:	4652      	mov	r2, sl
 8009338:	465b      	mov	r3, fp
 800933a:	f7f7 f931 	bl	80005a0 <__aeabi_dmul>
 800933e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009342:	4680      	mov	r8, r0
 8009344:	4689      	mov	r9, r1
 8009346:	4620      	mov	r0, r4
 8009348:	4629      	mov	r1, r5
 800934a:	f7f7 f929 	bl	80005a0 <__aeabi_dmul>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4640      	mov	r0, r8
 8009354:	4649      	mov	r1, r9
 8009356:	f7f6 ff6d 	bl	8000234 <__adddf3>
 800935a:	4632      	mov	r2, r6
 800935c:	463b      	mov	r3, r7
 800935e:	4680      	mov	r8, r0
 8009360:	4689      	mov	r9, r1
 8009362:	4650      	mov	r0, sl
 8009364:	4659      	mov	r1, fp
 8009366:	f7f7 f91b 	bl	80005a0 <__aeabi_dmul>
 800936a:	4604      	mov	r4, r0
 800936c:	460d      	mov	r5, r1
 800936e:	460b      	mov	r3, r1
 8009370:	4602      	mov	r2, r0
 8009372:	4649      	mov	r1, r9
 8009374:	4640      	mov	r0, r8
 8009376:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800937a:	f7f6 ff5b 	bl	8000234 <__adddf3>
 800937e:	4b18      	ldr	r3, [pc, #96]	; (80093e0 <__ieee754_pow+0x3e0>)
 8009380:	4682      	mov	sl, r0
 8009382:	4299      	cmp	r1, r3
 8009384:	460f      	mov	r7, r1
 8009386:	460e      	mov	r6, r1
 8009388:	f340 82e5 	ble.w	8009956 <__ieee754_pow+0x956>
 800938c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009390:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009394:	4303      	orrs	r3, r0
 8009396:	f000 81df 	beq.w	8009758 <__ieee754_pow+0x758>
 800939a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800939e:	2200      	movs	r2, #0
 80093a0:	2300      	movs	r3, #0
 80093a2:	f7f7 fb6f 	bl	8000a84 <__aeabi_dcmplt>
 80093a6:	3800      	subs	r0, #0
 80093a8:	bf18      	it	ne
 80093aa:	2001      	movne	r0, #1
 80093ac:	e72e      	b.n	800920c <__ieee754_pow+0x20c>
 80093ae:	bf00      	nop
 80093b0:	60000000 	.word	0x60000000
 80093b4:	3ff71547 	.word	0x3ff71547
 80093b8:	f85ddf44 	.word	0xf85ddf44
 80093bc:	3e54ae0b 	.word	0x3e54ae0b
 80093c0:	55555555 	.word	0x55555555
 80093c4:	3fd55555 	.word	0x3fd55555
 80093c8:	652b82fe 	.word	0x652b82fe
 80093cc:	3ff71547 	.word	0x3ff71547
 80093d0:	3ff00000 	.word	0x3ff00000
 80093d4:	3fd00000 	.word	0x3fd00000
 80093d8:	3fe00000 	.word	0x3fe00000
 80093dc:	bff00000 	.word	0xbff00000
 80093e0:	408fffff 	.word	0x408fffff
 80093e4:	4bd2      	ldr	r3, [pc, #840]	; (8009730 <__ieee754_pow+0x730>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	402b      	ands	r3, r5
 80093ea:	b943      	cbnz	r3, 80093fe <__ieee754_pow+0x3fe>
 80093ec:	4658      	mov	r0, fp
 80093ee:	4661      	mov	r1, ip
 80093f0:	4bd0      	ldr	r3, [pc, #832]	; (8009734 <__ieee754_pow+0x734>)
 80093f2:	f7f7 f8d5 	bl	80005a0 <__aeabi_dmul>
 80093f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80093fa:	4683      	mov	fp, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	1523      	asrs	r3, r4, #20
 8009400:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009404:	4413      	add	r3, r2
 8009406:	930b      	str	r3, [sp, #44]	; 0x2c
 8009408:	4bcb      	ldr	r3, [pc, #812]	; (8009738 <__ieee754_pow+0x738>)
 800940a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800940e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009412:	429c      	cmp	r4, r3
 8009414:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009418:	dd08      	ble.n	800942c <__ieee754_pow+0x42c>
 800941a:	4bc8      	ldr	r3, [pc, #800]	; (800973c <__ieee754_pow+0x73c>)
 800941c:	429c      	cmp	r4, r3
 800941e:	f340 8199 	ble.w	8009754 <__ieee754_pow+0x754>
 8009422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009424:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009428:	3301      	adds	r3, #1
 800942a:	930b      	str	r3, [sp, #44]	; 0x2c
 800942c:	2600      	movs	r6, #0
 800942e:	00f3      	lsls	r3, r6, #3
 8009430:	930d      	str	r3, [sp, #52]	; 0x34
 8009432:	4bc3      	ldr	r3, [pc, #780]	; (8009740 <__ieee754_pow+0x740>)
 8009434:	4658      	mov	r0, fp
 8009436:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800943a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800943e:	4629      	mov	r1, r5
 8009440:	461a      	mov	r2, r3
 8009442:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009446:	4623      	mov	r3, r4
 8009448:	f7f6 fef2 	bl	8000230 <__aeabi_dsub>
 800944c:	46da      	mov	sl, fp
 800944e:	462b      	mov	r3, r5
 8009450:	4652      	mov	r2, sl
 8009452:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009456:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800945a:	f7f6 feeb 	bl	8000234 <__adddf3>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	2000      	movs	r0, #0
 8009464:	49b7      	ldr	r1, [pc, #732]	; (8009744 <__ieee754_pow+0x744>)
 8009466:	f7f7 f9c5 	bl	80007f4 <__aeabi_ddiv>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009472:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009476:	f7f7 f893 	bl	80005a0 <__aeabi_dmul>
 800947a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800947e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009482:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009486:	2300      	movs	r3, #0
 8009488:	2200      	movs	r2, #0
 800948a:	46ab      	mov	fp, r5
 800948c:	106d      	asrs	r5, r5, #1
 800948e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009492:	9304      	str	r3, [sp, #16]
 8009494:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009498:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800949c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80094a0:	4640      	mov	r0, r8
 80094a2:	4649      	mov	r1, r9
 80094a4:	4614      	mov	r4, r2
 80094a6:	461d      	mov	r5, r3
 80094a8:	f7f7 f87a 	bl	80005a0 <__aeabi_dmul>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80094b4:	f7f6 febc 	bl	8000230 <__aeabi_dsub>
 80094b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094bc:	4606      	mov	r6, r0
 80094be:	460f      	mov	r7, r1
 80094c0:	4620      	mov	r0, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	f7f6 feb4 	bl	8000230 <__aeabi_dsub>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4650      	mov	r0, sl
 80094ce:	4659      	mov	r1, fp
 80094d0:	f7f6 feae 	bl	8000230 <__aeabi_dsub>
 80094d4:	4642      	mov	r2, r8
 80094d6:	464b      	mov	r3, r9
 80094d8:	f7f7 f862 	bl	80005a0 <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f6 fea4 	bl	8000230 <__aeabi_dsub>
 80094e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094ec:	f7f7 f858 	bl	80005a0 <__aeabi_dmul>
 80094f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80094f8:	4610      	mov	r0, r2
 80094fa:	4619      	mov	r1, r3
 80094fc:	f7f7 f850 	bl	80005a0 <__aeabi_dmul>
 8009500:	a379      	add	r3, pc, #484	; (adr r3, 80096e8 <__ieee754_pow+0x6e8>)
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	4604      	mov	r4, r0
 8009508:	460d      	mov	r5, r1
 800950a:	f7f7 f849 	bl	80005a0 <__aeabi_dmul>
 800950e:	a378      	add	r3, pc, #480	; (adr r3, 80096f0 <__ieee754_pow+0x6f0>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	f7f6 fe8e 	bl	8000234 <__adddf3>
 8009518:	4622      	mov	r2, r4
 800951a:	462b      	mov	r3, r5
 800951c:	f7f7 f840 	bl	80005a0 <__aeabi_dmul>
 8009520:	a375      	add	r3, pc, #468	; (adr r3, 80096f8 <__ieee754_pow+0x6f8>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f6 fe85 	bl	8000234 <__adddf3>
 800952a:	4622      	mov	r2, r4
 800952c:	462b      	mov	r3, r5
 800952e:	f7f7 f837 	bl	80005a0 <__aeabi_dmul>
 8009532:	a373      	add	r3, pc, #460	; (adr r3, 8009700 <__ieee754_pow+0x700>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f6 fe7c 	bl	8000234 <__adddf3>
 800953c:	4622      	mov	r2, r4
 800953e:	462b      	mov	r3, r5
 8009540:	f7f7 f82e 	bl	80005a0 <__aeabi_dmul>
 8009544:	a370      	add	r3, pc, #448	; (adr r3, 8009708 <__ieee754_pow+0x708>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f7f6 fe73 	bl	8000234 <__adddf3>
 800954e:	4622      	mov	r2, r4
 8009550:	462b      	mov	r3, r5
 8009552:	f7f7 f825 	bl	80005a0 <__aeabi_dmul>
 8009556:	a36e      	add	r3, pc, #440	; (adr r3, 8009710 <__ieee754_pow+0x710>)
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f7f6 fe6a 	bl	8000234 <__adddf3>
 8009560:	4622      	mov	r2, r4
 8009562:	4606      	mov	r6, r0
 8009564:	460f      	mov	r7, r1
 8009566:	462b      	mov	r3, r5
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f7 f818 	bl	80005a0 <__aeabi_dmul>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4630      	mov	r0, r6
 8009576:	4639      	mov	r1, r7
 8009578:	f7f7 f812 	bl	80005a0 <__aeabi_dmul>
 800957c:	4604      	mov	r4, r0
 800957e:	460d      	mov	r5, r1
 8009580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009584:	4642      	mov	r2, r8
 8009586:	464b      	mov	r3, r9
 8009588:	f7f6 fe54 	bl	8000234 <__adddf3>
 800958c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009590:	f7f7 f806 	bl	80005a0 <__aeabi_dmul>
 8009594:	4622      	mov	r2, r4
 8009596:	462b      	mov	r3, r5
 8009598:	f7f6 fe4c 	bl	8000234 <__adddf3>
 800959c:	4642      	mov	r2, r8
 800959e:	4606      	mov	r6, r0
 80095a0:	460f      	mov	r7, r1
 80095a2:	464b      	mov	r3, r9
 80095a4:	4640      	mov	r0, r8
 80095a6:	4649      	mov	r1, r9
 80095a8:	f7f6 fffa 	bl	80005a0 <__aeabi_dmul>
 80095ac:	2200      	movs	r2, #0
 80095ae:	4b66      	ldr	r3, [pc, #408]	; (8009748 <__ieee754_pow+0x748>)
 80095b0:	4682      	mov	sl, r0
 80095b2:	468b      	mov	fp, r1
 80095b4:	f7f6 fe3e 	bl	8000234 <__adddf3>
 80095b8:	4632      	mov	r2, r6
 80095ba:	463b      	mov	r3, r7
 80095bc:	f7f6 fe3a 	bl	8000234 <__adddf3>
 80095c0:	2400      	movs	r4, #0
 80095c2:	460d      	mov	r5, r1
 80095c4:	4622      	mov	r2, r4
 80095c6:	460b      	mov	r3, r1
 80095c8:	4640      	mov	r0, r8
 80095ca:	4649      	mov	r1, r9
 80095cc:	f7f6 ffe8 	bl	80005a0 <__aeabi_dmul>
 80095d0:	2200      	movs	r2, #0
 80095d2:	4680      	mov	r8, r0
 80095d4:	4689      	mov	r9, r1
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	4b5b      	ldr	r3, [pc, #364]	; (8009748 <__ieee754_pow+0x748>)
 80095dc:	f7f6 fe28 	bl	8000230 <__aeabi_dsub>
 80095e0:	4652      	mov	r2, sl
 80095e2:	465b      	mov	r3, fp
 80095e4:	f7f6 fe24 	bl	8000230 <__aeabi_dsub>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4630      	mov	r0, r6
 80095ee:	4639      	mov	r1, r7
 80095f0:	f7f6 fe1e 	bl	8000230 <__aeabi_dsub>
 80095f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095f8:	f7f6 ffd2 	bl	80005a0 <__aeabi_dmul>
 80095fc:	4622      	mov	r2, r4
 80095fe:	4606      	mov	r6, r0
 8009600:	460f      	mov	r7, r1
 8009602:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009606:	462b      	mov	r3, r5
 8009608:	f7f6 ffca 	bl	80005a0 <__aeabi_dmul>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4630      	mov	r0, r6
 8009612:	4639      	mov	r1, r7
 8009614:	f7f6 fe0e 	bl	8000234 <__adddf3>
 8009618:	2400      	movs	r4, #0
 800961a:	4606      	mov	r6, r0
 800961c:	460f      	mov	r7, r1
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4640      	mov	r0, r8
 8009624:	4649      	mov	r1, r9
 8009626:	f7f6 fe05 	bl	8000234 <__adddf3>
 800962a:	a33b      	add	r3, pc, #236	; (adr r3, 8009718 <__ieee754_pow+0x718>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	4620      	mov	r0, r4
 8009632:	460d      	mov	r5, r1
 8009634:	f7f6 ffb4 	bl	80005a0 <__aeabi_dmul>
 8009638:	4642      	mov	r2, r8
 800963a:	464b      	mov	r3, r9
 800963c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009640:	4620      	mov	r0, r4
 8009642:	4629      	mov	r1, r5
 8009644:	f7f6 fdf4 	bl	8000230 <__aeabi_dsub>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4630      	mov	r0, r6
 800964e:	4639      	mov	r1, r7
 8009650:	f7f6 fdee 	bl	8000230 <__aeabi_dsub>
 8009654:	a332      	add	r3, pc, #200	; (adr r3, 8009720 <__ieee754_pow+0x720>)
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 ffa1 	bl	80005a0 <__aeabi_dmul>
 800965e:	a332      	add	r3, pc, #200	; (adr r3, 8009728 <__ieee754_pow+0x728>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	4606      	mov	r6, r0
 8009666:	460f      	mov	r7, r1
 8009668:	4620      	mov	r0, r4
 800966a:	4629      	mov	r1, r5
 800966c:	f7f6 ff98 	bl	80005a0 <__aeabi_dmul>
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	4630      	mov	r0, r6
 8009676:	4639      	mov	r1, r7
 8009678:	f7f6 fddc 	bl	8000234 <__adddf3>
 800967c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800967e:	4b33      	ldr	r3, [pc, #204]	; (800974c <__ieee754_pow+0x74c>)
 8009680:	f04f 0a00 	mov.w	sl, #0
 8009684:	4413      	add	r3, r2
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 fdd3 	bl	8000234 <__adddf3>
 800968e:	4680      	mov	r8, r0
 8009690:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009692:	4689      	mov	r9, r1
 8009694:	f7f6 ff1a 	bl	80004cc <__aeabi_i2d>
 8009698:	4604      	mov	r4, r0
 800969a:	460d      	mov	r5, r1
 800969c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800969e:	4b2c      	ldr	r3, [pc, #176]	; (8009750 <__ieee754_pow+0x750>)
 80096a0:	4413      	add	r3, r2
 80096a2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80096a6:	4642      	mov	r2, r8
 80096a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096ac:	464b      	mov	r3, r9
 80096ae:	f7f6 fdc1 	bl	8000234 <__adddf3>
 80096b2:	4632      	mov	r2, r6
 80096b4:	463b      	mov	r3, r7
 80096b6:	f7f6 fdbd 	bl	8000234 <__adddf3>
 80096ba:	4622      	mov	r2, r4
 80096bc:	462b      	mov	r3, r5
 80096be:	f7f6 fdb9 	bl	8000234 <__adddf3>
 80096c2:	4622      	mov	r2, r4
 80096c4:	462b      	mov	r3, r5
 80096c6:	4650      	mov	r0, sl
 80096c8:	468b      	mov	fp, r1
 80096ca:	f7f6 fdb1 	bl	8000230 <__aeabi_dsub>
 80096ce:	4632      	mov	r2, r6
 80096d0:	463b      	mov	r3, r7
 80096d2:	f7f6 fdad 	bl	8000230 <__aeabi_dsub>
 80096d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096da:	f7f6 fda9 	bl	8000230 <__aeabi_dsub>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4640      	mov	r0, r8
 80096e4:	4649      	mov	r1, r9
 80096e6:	e60d      	b.n	8009304 <__ieee754_pow+0x304>
 80096e8:	4a454eef 	.word	0x4a454eef
 80096ec:	3fca7e28 	.word	0x3fca7e28
 80096f0:	93c9db65 	.word	0x93c9db65
 80096f4:	3fcd864a 	.word	0x3fcd864a
 80096f8:	a91d4101 	.word	0xa91d4101
 80096fc:	3fd17460 	.word	0x3fd17460
 8009700:	518f264d 	.word	0x518f264d
 8009704:	3fd55555 	.word	0x3fd55555
 8009708:	db6fabff 	.word	0xdb6fabff
 800970c:	3fdb6db6 	.word	0x3fdb6db6
 8009710:	33333303 	.word	0x33333303
 8009714:	3fe33333 	.word	0x3fe33333
 8009718:	e0000000 	.word	0xe0000000
 800971c:	3feec709 	.word	0x3feec709
 8009720:	dc3a03fd 	.word	0xdc3a03fd
 8009724:	3feec709 	.word	0x3feec709
 8009728:	145b01f5 	.word	0x145b01f5
 800972c:	be3e2fe0 	.word	0xbe3e2fe0
 8009730:	7ff00000 	.word	0x7ff00000
 8009734:	43400000 	.word	0x43400000
 8009738:	0003988e 	.word	0x0003988e
 800973c:	000bb679 	.word	0x000bb679
 8009740:	0800aad0 	.word	0x0800aad0
 8009744:	3ff00000 	.word	0x3ff00000
 8009748:	40080000 	.word	0x40080000
 800974c:	0800aaf0 	.word	0x0800aaf0
 8009750:	0800aae0 	.word	0x0800aae0
 8009754:	2601      	movs	r6, #1
 8009756:	e66a      	b.n	800942e <__ieee754_pow+0x42e>
 8009758:	a39d      	add	r3, pc, #628	; (adr r3, 80099d0 <__ieee754_pow+0x9d0>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	4640      	mov	r0, r8
 8009760:	4649      	mov	r1, r9
 8009762:	f7f6 fd67 	bl	8000234 <__adddf3>
 8009766:	4622      	mov	r2, r4
 8009768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800976c:	462b      	mov	r3, r5
 800976e:	4650      	mov	r0, sl
 8009770:	4639      	mov	r1, r7
 8009772:	f7f6 fd5d 	bl	8000230 <__aeabi_dsub>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800977e:	f7f7 f99f 	bl	8000ac0 <__aeabi_dcmpgt>
 8009782:	2800      	cmp	r0, #0
 8009784:	f47f ae09 	bne.w	800939a <__ieee754_pow+0x39a>
 8009788:	4aa3      	ldr	r2, [pc, #652]	; (8009a18 <__ieee754_pow+0xa18>)
 800978a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800978e:	4293      	cmp	r3, r2
 8009790:	f340 8101 	ble.w	8009996 <__ieee754_pow+0x996>
 8009794:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009798:	2000      	movs	r0, #0
 800979a:	151b      	asrs	r3, r3, #20
 800979c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80097a0:	fa4a f303 	asr.w	r3, sl, r3
 80097a4:	4433      	add	r3, r6
 80097a6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80097aa:	4f9c      	ldr	r7, [pc, #624]	; (8009a1c <__ieee754_pow+0xa1c>)
 80097ac:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80097b0:	4117      	asrs	r7, r2
 80097b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80097b6:	ea23 0107 	bic.w	r1, r3, r7
 80097ba:	f1c2 0214 	rsb	r2, r2, #20
 80097be:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80097c2:	460b      	mov	r3, r1
 80097c4:	fa4a fa02 	asr.w	sl, sl, r2
 80097c8:	2e00      	cmp	r6, #0
 80097ca:	4602      	mov	r2, r0
 80097cc:	4629      	mov	r1, r5
 80097ce:	4620      	mov	r0, r4
 80097d0:	bfb8      	it	lt
 80097d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80097d6:	f7f6 fd2b 	bl	8000230 <__aeabi_dsub>
 80097da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e2:	2400      	movs	r4, #0
 80097e4:	4642      	mov	r2, r8
 80097e6:	464b      	mov	r3, r9
 80097e8:	f7f6 fd24 	bl	8000234 <__adddf3>
 80097ec:	a37a      	add	r3, pc, #488	; (adr r3, 80099d8 <__ieee754_pow+0x9d8>)
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	4620      	mov	r0, r4
 80097f4:	460d      	mov	r5, r1
 80097f6:	f7f6 fed3 	bl	80005a0 <__aeabi_dmul>
 80097fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097fe:	4606      	mov	r6, r0
 8009800:	460f      	mov	r7, r1
 8009802:	4620      	mov	r0, r4
 8009804:	4629      	mov	r1, r5
 8009806:	f7f6 fd13 	bl	8000230 <__aeabi_dsub>
 800980a:	4602      	mov	r2, r0
 800980c:	460b      	mov	r3, r1
 800980e:	4640      	mov	r0, r8
 8009810:	4649      	mov	r1, r9
 8009812:	f7f6 fd0d 	bl	8000230 <__aeabi_dsub>
 8009816:	a372      	add	r3, pc, #456	; (adr r3, 80099e0 <__ieee754_pow+0x9e0>)
 8009818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981c:	f7f6 fec0 	bl	80005a0 <__aeabi_dmul>
 8009820:	a371      	add	r3, pc, #452	; (adr r3, 80099e8 <__ieee754_pow+0x9e8>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	4680      	mov	r8, r0
 8009828:	4689      	mov	r9, r1
 800982a:	4620      	mov	r0, r4
 800982c:	4629      	mov	r1, r5
 800982e:	f7f6 feb7 	bl	80005a0 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f6 fcfb 	bl	8000234 <__adddf3>
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4630      	mov	r0, r6
 8009848:	4639      	mov	r1, r7
 800984a:	f7f6 fcf3 	bl	8000234 <__adddf3>
 800984e:	4632      	mov	r2, r6
 8009850:	463b      	mov	r3, r7
 8009852:	4680      	mov	r8, r0
 8009854:	4689      	mov	r9, r1
 8009856:	f7f6 fceb 	bl	8000230 <__aeabi_dsub>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	4620      	mov	r0, r4
 8009860:	4629      	mov	r1, r5
 8009862:	f7f6 fce5 	bl	8000230 <__aeabi_dsub>
 8009866:	4642      	mov	r2, r8
 8009868:	4606      	mov	r6, r0
 800986a:	460f      	mov	r7, r1
 800986c:	464b      	mov	r3, r9
 800986e:	4640      	mov	r0, r8
 8009870:	4649      	mov	r1, r9
 8009872:	f7f6 fe95 	bl	80005a0 <__aeabi_dmul>
 8009876:	a35e      	add	r3, pc, #376	; (adr r3, 80099f0 <__ieee754_pow+0x9f0>)
 8009878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987c:	4604      	mov	r4, r0
 800987e:	460d      	mov	r5, r1
 8009880:	f7f6 fe8e 	bl	80005a0 <__aeabi_dmul>
 8009884:	a35c      	add	r3, pc, #368	; (adr r3, 80099f8 <__ieee754_pow+0x9f8>)
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f7f6 fcd1 	bl	8000230 <__aeabi_dsub>
 800988e:	4622      	mov	r2, r4
 8009890:	462b      	mov	r3, r5
 8009892:	f7f6 fe85 	bl	80005a0 <__aeabi_dmul>
 8009896:	a35a      	add	r3, pc, #360	; (adr r3, 8009a00 <__ieee754_pow+0xa00>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 fcca 	bl	8000234 <__adddf3>
 80098a0:	4622      	mov	r2, r4
 80098a2:	462b      	mov	r3, r5
 80098a4:	f7f6 fe7c 	bl	80005a0 <__aeabi_dmul>
 80098a8:	a357      	add	r3, pc, #348	; (adr r3, 8009a08 <__ieee754_pow+0xa08>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f7f6 fcbf 	bl	8000230 <__aeabi_dsub>
 80098b2:	4622      	mov	r2, r4
 80098b4:	462b      	mov	r3, r5
 80098b6:	f7f6 fe73 	bl	80005a0 <__aeabi_dmul>
 80098ba:	a355      	add	r3, pc, #340	; (adr r3, 8009a10 <__ieee754_pow+0xa10>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	f7f6 fcb8 	bl	8000234 <__adddf3>
 80098c4:	4622      	mov	r2, r4
 80098c6:	462b      	mov	r3, r5
 80098c8:	f7f6 fe6a 	bl	80005a0 <__aeabi_dmul>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4640      	mov	r0, r8
 80098d2:	4649      	mov	r1, r9
 80098d4:	f7f6 fcac 	bl	8000230 <__aeabi_dsub>
 80098d8:	4604      	mov	r4, r0
 80098da:	460d      	mov	r5, r1
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4640      	mov	r0, r8
 80098e2:	4649      	mov	r1, r9
 80098e4:	f7f6 fe5c 	bl	80005a0 <__aeabi_dmul>
 80098e8:	2200      	movs	r2, #0
 80098ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098f2:	4620      	mov	r0, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	f7f6 fc9b 	bl	8000230 <__aeabi_dsub>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009902:	f7f6 ff77 	bl	80007f4 <__aeabi_ddiv>
 8009906:	4632      	mov	r2, r6
 8009908:	4604      	mov	r4, r0
 800990a:	460d      	mov	r5, r1
 800990c:	463b      	mov	r3, r7
 800990e:	4640      	mov	r0, r8
 8009910:	4649      	mov	r1, r9
 8009912:	f7f6 fe45 	bl	80005a0 <__aeabi_dmul>
 8009916:	4632      	mov	r2, r6
 8009918:	463b      	mov	r3, r7
 800991a:	f7f6 fc8b 	bl	8000234 <__adddf3>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4620      	mov	r0, r4
 8009924:	4629      	mov	r1, r5
 8009926:	f7f6 fc83 	bl	8000230 <__aeabi_dsub>
 800992a:	4642      	mov	r2, r8
 800992c:	464b      	mov	r3, r9
 800992e:	f7f6 fc7f 	bl	8000230 <__aeabi_dsub>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	2000      	movs	r0, #0
 8009938:	4939      	ldr	r1, [pc, #228]	; (8009a20 <__ieee754_pow+0xa20>)
 800993a:	f7f6 fc79 	bl	8000230 <__aeabi_dsub>
 800993e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009942:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009946:	da29      	bge.n	800999c <__ieee754_pow+0x99c>
 8009948:	4652      	mov	r2, sl
 800994a:	f000 f955 	bl	8009bf8 <scalbn>
 800994e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009952:	f7ff bbfe 	b.w	8009152 <__ieee754_pow+0x152>
 8009956:	4b33      	ldr	r3, [pc, #204]	; (8009a24 <__ieee754_pow+0xa24>)
 8009958:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800995c:	429f      	cmp	r7, r3
 800995e:	f77f af13 	ble.w	8009788 <__ieee754_pow+0x788>
 8009962:	4b31      	ldr	r3, [pc, #196]	; (8009a28 <__ieee754_pow+0xa28>)
 8009964:	440b      	add	r3, r1
 8009966:	4303      	orrs	r3, r0
 8009968:	d009      	beq.n	800997e <__ieee754_pow+0x97e>
 800996a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800996e:	2200      	movs	r2, #0
 8009970:	2300      	movs	r3, #0
 8009972:	f7f7 f887 	bl	8000a84 <__aeabi_dcmplt>
 8009976:	3800      	subs	r0, #0
 8009978:	bf18      	it	ne
 800997a:	2001      	movne	r0, #1
 800997c:	e453      	b.n	8009226 <__ieee754_pow+0x226>
 800997e:	4622      	mov	r2, r4
 8009980:	462b      	mov	r3, r5
 8009982:	f7f6 fc55 	bl	8000230 <__aeabi_dsub>
 8009986:	4642      	mov	r2, r8
 8009988:	464b      	mov	r3, r9
 800998a:	f7f7 f88f 	bl	8000aac <__aeabi_dcmpge>
 800998e:	2800      	cmp	r0, #0
 8009990:	f43f aefa 	beq.w	8009788 <__ieee754_pow+0x788>
 8009994:	e7e9      	b.n	800996a <__ieee754_pow+0x96a>
 8009996:	f04f 0a00 	mov.w	sl, #0
 800999a:	e720      	b.n	80097de <__ieee754_pow+0x7de>
 800999c:	4621      	mov	r1, r4
 800999e:	e7d6      	b.n	800994e <__ieee754_pow+0x94e>
 80099a0:	f04f 0b00 	mov.w	fp, #0
 80099a4:	f8df c078 	ldr.w	ip, [pc, #120]	; 8009a20 <__ieee754_pow+0xa20>
 80099a8:	f7ff bbba 	b.w	8009120 <__ieee754_pow+0x120>
 80099ac:	f04f 0b00 	mov.w	fp, #0
 80099b0:	f04f 0c00 	mov.w	ip, #0
 80099b4:	f7ff bbb4 	b.w	8009120 <__ieee754_pow+0x120>
 80099b8:	4640      	mov	r0, r8
 80099ba:	4649      	mov	r1, r9
 80099bc:	f7ff bb3d 	b.w	800903a <__ieee754_pow+0x3a>
 80099c0:	9200      	str	r2, [sp, #0]
 80099c2:	f7ff bb89 	b.w	80090d8 <__ieee754_pow+0xd8>
 80099c6:	2300      	movs	r3, #0
 80099c8:	f7ff bb73 	b.w	80090b2 <__ieee754_pow+0xb2>
 80099cc:	f3af 8000 	nop.w
 80099d0:	652b82fe 	.word	0x652b82fe
 80099d4:	3c971547 	.word	0x3c971547
 80099d8:	00000000 	.word	0x00000000
 80099dc:	3fe62e43 	.word	0x3fe62e43
 80099e0:	fefa39ef 	.word	0xfefa39ef
 80099e4:	3fe62e42 	.word	0x3fe62e42
 80099e8:	0ca86c39 	.word	0x0ca86c39
 80099ec:	be205c61 	.word	0xbe205c61
 80099f0:	72bea4d0 	.word	0x72bea4d0
 80099f4:	3e663769 	.word	0x3e663769
 80099f8:	c5d26bf1 	.word	0xc5d26bf1
 80099fc:	3ebbbd41 	.word	0x3ebbbd41
 8009a00:	af25de2c 	.word	0xaf25de2c
 8009a04:	3f11566a 	.word	0x3f11566a
 8009a08:	16bebd93 	.word	0x16bebd93
 8009a0c:	3f66c16c 	.word	0x3f66c16c
 8009a10:	5555553e 	.word	0x5555553e
 8009a14:	3fc55555 	.word	0x3fc55555
 8009a18:	3fe00000 	.word	0x3fe00000
 8009a1c:	000fffff 	.word	0x000fffff
 8009a20:	3ff00000 	.word	0x3ff00000
 8009a24:	4090cbff 	.word	0x4090cbff
 8009a28:	3f6f3400 	.word	0x3f6f3400

08009a2c <__ieee754_sqrt>:
 8009a2c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8009b88 <__ieee754_sqrt+0x15c>
 8009a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a34:	ea3c 0c01 	bics.w	ip, ip, r1
 8009a38:	4606      	mov	r6, r0
 8009a3a:	460d      	mov	r5, r1
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	460a      	mov	r2, r1
 8009a40:	4607      	mov	r7, r0
 8009a42:	4603      	mov	r3, r0
 8009a44:	d10f      	bne.n	8009a66 <__ieee754_sqrt+0x3a>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	f7f6 fda9 	bl	80005a0 <__aeabi_dmul>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	4630      	mov	r0, r6
 8009a54:	4629      	mov	r1, r5
 8009a56:	f7f6 fbed 	bl	8000234 <__adddf3>
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	4630      	mov	r0, r6
 8009a60:	4629      	mov	r1, r5
 8009a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a66:	2900      	cmp	r1, #0
 8009a68:	dc0e      	bgt.n	8009a88 <__ieee754_sqrt+0x5c>
 8009a6a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009a6e:	ea5c 0707 	orrs.w	r7, ip, r7
 8009a72:	d0f4      	beq.n	8009a5e <__ieee754_sqrt+0x32>
 8009a74:	b141      	cbz	r1, 8009a88 <__ieee754_sqrt+0x5c>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	f7f6 fbd9 	bl	8000230 <__aeabi_dsub>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	f7f6 feb7 	bl	80007f4 <__aeabi_ddiv>
 8009a86:	e7e8      	b.n	8009a5a <__ieee754_sqrt+0x2e>
 8009a88:	1521      	asrs	r1, r4, #20
 8009a8a:	d075      	beq.n	8009b78 <__ieee754_sqrt+0x14c>
 8009a8c:	07cc      	lsls	r4, r1, #31
 8009a8e:	f04f 0400 	mov.w	r4, #0
 8009a92:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009a96:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8009a9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009a9e:	bf5e      	ittt	pl
 8009aa0:	0fd9      	lsrpl	r1, r3, #31
 8009aa2:	005b      	lslpl	r3, r3, #1
 8009aa4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8009aa8:	0fd9      	lsrs	r1, r3, #31
 8009aaa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009aae:	2516      	movs	r5, #22
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ab6:	107f      	asrs	r7, r7, #1
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	1846      	adds	r6, r0, r1
 8009abc:	4296      	cmp	r6, r2
 8009abe:	bfde      	ittt	le
 8009ac0:	1b92      	suble	r2, r2, r6
 8009ac2:	1870      	addle	r0, r6, r1
 8009ac4:	1864      	addle	r4, r4, r1
 8009ac6:	0052      	lsls	r2, r2, #1
 8009ac8:	3d01      	subs	r5, #1
 8009aca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009ace:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ad6:	d1f0      	bne.n	8009aba <__ieee754_sqrt+0x8e>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f04f 0e20 	mov.w	lr, #32
 8009ade:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009ae2:	4282      	cmp	r2, r0
 8009ae4:	eb06 0c05 	add.w	ip, r6, r5
 8009ae8:	dc02      	bgt.n	8009af0 <__ieee754_sqrt+0xc4>
 8009aea:	d113      	bne.n	8009b14 <__ieee754_sqrt+0xe8>
 8009aec:	459c      	cmp	ip, r3
 8009aee:	d811      	bhi.n	8009b14 <__ieee754_sqrt+0xe8>
 8009af0:	f1bc 0f00 	cmp.w	ip, #0
 8009af4:	eb0c 0506 	add.w	r5, ip, r6
 8009af8:	da43      	bge.n	8009b82 <__ieee754_sqrt+0x156>
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	db41      	blt.n	8009b82 <__ieee754_sqrt+0x156>
 8009afe:	f100 0801 	add.w	r8, r0, #1
 8009b02:	1a12      	subs	r2, r2, r0
 8009b04:	4640      	mov	r0, r8
 8009b06:	459c      	cmp	ip, r3
 8009b08:	bf88      	it	hi
 8009b0a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009b0e:	eba3 030c 	sub.w	r3, r3, ip
 8009b12:	4431      	add	r1, r6
 8009b14:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009b18:	f1be 0e01 	subs.w	lr, lr, #1
 8009b1c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8009b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009b24:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b28:	d1db      	bne.n	8009ae2 <__ieee754_sqrt+0xb6>
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	d006      	beq.n	8009b3c <__ieee754_sqrt+0x110>
 8009b2e:	1c48      	adds	r0, r1, #1
 8009b30:	bf0b      	itete	eq
 8009b32:	4671      	moveq	r1, lr
 8009b34:	3101      	addne	r1, #1
 8009b36:	3401      	addeq	r4, #1
 8009b38:	f021 0101 	bicne.w	r1, r1, #1
 8009b3c:	1063      	asrs	r3, r4, #1
 8009b3e:	0849      	lsrs	r1, r1, #1
 8009b40:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009b44:	07e2      	lsls	r2, r4, #31
 8009b46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009b4a:	bf48      	it	mi
 8009b4c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009b50:	460e      	mov	r6, r1
 8009b52:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009b56:	e782      	b.n	8009a5e <__ieee754_sqrt+0x32>
 8009b58:	0ada      	lsrs	r2, r3, #11
 8009b5a:	3815      	subs	r0, #21
 8009b5c:	055b      	lsls	r3, r3, #21
 8009b5e:	2a00      	cmp	r2, #0
 8009b60:	d0fa      	beq.n	8009b58 <__ieee754_sqrt+0x12c>
 8009b62:	02d5      	lsls	r5, r2, #11
 8009b64:	d50a      	bpl.n	8009b7c <__ieee754_sqrt+0x150>
 8009b66:	f1c1 0420 	rsb	r4, r1, #32
 8009b6a:	fa23 f404 	lsr.w	r4, r3, r4
 8009b6e:	1e4d      	subs	r5, r1, #1
 8009b70:	408b      	lsls	r3, r1
 8009b72:	4322      	orrs	r2, r4
 8009b74:	1b41      	subs	r1, r0, r5
 8009b76:	e789      	b.n	8009a8c <__ieee754_sqrt+0x60>
 8009b78:	4608      	mov	r0, r1
 8009b7a:	e7f0      	b.n	8009b5e <__ieee754_sqrt+0x132>
 8009b7c:	0052      	lsls	r2, r2, #1
 8009b7e:	3101      	adds	r1, #1
 8009b80:	e7ef      	b.n	8009b62 <__ieee754_sqrt+0x136>
 8009b82:	4680      	mov	r8, r0
 8009b84:	e7bd      	b.n	8009b02 <__ieee754_sqrt+0xd6>
 8009b86:	bf00      	nop
 8009b88:	7ff00000 	.word	0x7ff00000

08009b8c <with_errno>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4604      	mov	r4, r0
 8009b90:	460d      	mov	r5, r1
 8009b92:	4616      	mov	r6, r2
 8009b94:	f7fe f89c 	bl	8007cd0 <__errno>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	6006      	str	r6, [r0, #0]
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}

08009ba0 <xflow>:
 8009ba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ba2:	4615      	mov	r5, r2
 8009ba4:	461c      	mov	r4, r3
 8009ba6:	b180      	cbz	r0, 8009bca <xflow+0x2a>
 8009ba8:	4610      	mov	r0, r2
 8009baa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009bae:	e9cd 0100 	strd	r0, r1, [sp]
 8009bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	4621      	mov	r1, r4
 8009bba:	f7f6 fcf1 	bl	80005a0 <__aeabi_dmul>
 8009bbe:	2222      	movs	r2, #34	; 0x22
 8009bc0:	b003      	add	sp, #12
 8009bc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bc6:	f7ff bfe1 	b.w	8009b8c <with_errno>
 8009bca:	4610      	mov	r0, r2
 8009bcc:	4619      	mov	r1, r3
 8009bce:	e7ee      	b.n	8009bae <xflow+0xe>

08009bd0 <__math_uflow>:
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bd6:	f7ff bfe3 	b.w	8009ba0 <xflow>

08009bda <__math_oflow>:
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009be0:	f7ff bfde 	b.w	8009ba0 <xflow>

08009be4 <fabs>:
 8009be4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009be8:	4770      	bx	lr

08009bea <finite>:
 8009bea:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009bee:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009bf2:	0fc0      	lsrs	r0, r0, #31
 8009bf4:	4770      	bx	lr
	...

08009bf8 <scalbn>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009bfe:	4604      	mov	r4, r0
 8009c00:	460d      	mov	r5, r1
 8009c02:	4617      	mov	r7, r2
 8009c04:	460b      	mov	r3, r1
 8009c06:	b996      	cbnz	r6, 8009c2e <scalbn+0x36>
 8009c08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009c0c:	4303      	orrs	r3, r0
 8009c0e:	d039      	beq.n	8009c84 <scalbn+0x8c>
 8009c10:	4b33      	ldr	r3, [pc, #204]	; (8009ce0 <scalbn+0xe8>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	f7f6 fcc4 	bl	80005a0 <__aeabi_dmul>
 8009c18:	4b32      	ldr	r3, [pc, #200]	; (8009ce4 <scalbn+0xec>)
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	429f      	cmp	r7, r3
 8009c1e:	460d      	mov	r5, r1
 8009c20:	da0f      	bge.n	8009c42 <scalbn+0x4a>
 8009c22:	a32b      	add	r3, pc, #172	; (adr r3, 8009cd0 <scalbn+0xd8>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f7f6 fcba 	bl	80005a0 <__aeabi_dmul>
 8009c2c:	e006      	b.n	8009c3c <scalbn+0x44>
 8009c2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009c32:	4296      	cmp	r6, r2
 8009c34:	d10a      	bne.n	8009c4c <scalbn+0x54>
 8009c36:	4602      	mov	r2, r0
 8009c38:	f7f6 fafc 	bl	8000234 <__adddf3>
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	460d      	mov	r5, r1
 8009c40:	e020      	b.n	8009c84 <scalbn+0x8c>
 8009c42:	460b      	mov	r3, r1
 8009c44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009c48:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009c4c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009c50:	19b9      	adds	r1, r7, r6
 8009c52:	4291      	cmp	r1, r2
 8009c54:	dd0e      	ble.n	8009c74 <scalbn+0x7c>
 8009c56:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009c5a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009c5e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009c62:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009c66:	4820      	ldr	r0, [pc, #128]	; (8009ce8 <scalbn+0xf0>)
 8009c68:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009c6c:	a31a      	add	r3, pc, #104	; (adr r3, 8009cd8 <scalbn+0xe0>)
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	e7d9      	b.n	8009c28 <scalbn+0x30>
 8009c74:	2900      	cmp	r1, #0
 8009c76:	dd08      	ble.n	8009c8a <scalbn+0x92>
 8009c78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009c84:	4620      	mov	r0, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c8a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009c8e:	da12      	bge.n	8009cb6 <scalbn+0xbe>
 8009c90:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c94:	429f      	cmp	r7, r3
 8009c96:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009c9a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009c9e:	dcdc      	bgt.n	8009c5a <scalbn+0x62>
 8009ca0:	a30b      	add	r3, pc, #44	; (adr r3, 8009cd0 <scalbn+0xd8>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009caa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009cae:	480f      	ldr	r0, [pc, #60]	; (8009cec <scalbn+0xf4>)
 8009cb0:	f041 011f 	orr.w	r1, r1, #31
 8009cb4:	e7b8      	b.n	8009c28 <scalbn+0x30>
 8009cb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cba:	3136      	adds	r1, #54	; 0x36
 8009cbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009cc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	2200      	movs	r2, #0
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <scalbn+0xf8>)
 8009ccc:	e7ac      	b.n	8009c28 <scalbn+0x30>
 8009cce:	bf00      	nop
 8009cd0:	c2f8f359 	.word	0xc2f8f359
 8009cd4:	01a56e1f 	.word	0x01a56e1f
 8009cd8:	8800759c 	.word	0x8800759c
 8009cdc:	7e37e43c 	.word	0x7e37e43c
 8009ce0:	43500000 	.word	0x43500000
 8009ce4:	ffff3cb0 	.word	0xffff3cb0
 8009ce8:	8800759c 	.word	0x8800759c
 8009cec:	c2f8f359 	.word	0xc2f8f359
 8009cf0:	3c900000 	.word	0x3c900000

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
