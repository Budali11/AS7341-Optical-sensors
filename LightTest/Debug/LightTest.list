
LightTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b0c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009848  08009848  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08009848  08009848  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009848  08009848  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009848  08009848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  080098c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080098c0  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1dc  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223c  00000000  00000000  0002b275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002d4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002e010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c38b  00000000  00000000  0002ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b59  00000000  00000000  0004ae13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095a96  00000000  00000000  0005e96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c4  00000000  00000000  000f4454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08008cdc 	.word	0x08008cdc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08008cdc 	.word	0x08008cdc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <Calcute_Ra>:
#include "Ra_defs.h"

#define ATTRS (handle->light_attrs)

int Calcute_Ra(light_t *handle)
{
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	f5ad 5ddb 	sub.w	sp, sp, #7008	; 0x1b60
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001198:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 800119c:	6018      	str	r0, [r3, #0]
    light_attrib_t ref_light = {0}, sam_r[8] = {0}, sam_k[8] = {0};
 800119e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80011a2:	f103 0318 	add.w	r3, r3, #24
 80011a6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80011b0:	461a      	mov	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	f006 fbde 	bl	8007974 <memset>
 80011b8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80011bc:	f103 0318 	add.w	r3, r3, #24
 80011c0:	f5a3 6363 	sub.w	r3, r3, #3632	; 0xe30
 80011c4:	4618      	mov	r0, r3
 80011c6:	f44f 6346 	mov.w	r3, #3168	; 0xc60
 80011ca:	461a      	mov	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f006 fbd1 	bl	8007974 <memset>
 80011d2:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80011d6:	f5a3 6329 	sub.w	r3, r3, #2704	; 0xa90
 80011da:	4618      	mov	r0, r3
 80011dc:	f44f 6346 	mov.w	r3, #3168	; 0xc60
 80011e0:	461a      	mov	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	f006 fbc6 	bl	8007974 <memset>
    double sum_Ri = 0;
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 80011f4:	f101 0110 	add.w	r1, r1, #16
 80011f8:	e9c1 2300 	strd	r2, r3, [r1]
    float delta_E[8] = {0}, delta_c = 0;
 80011fc:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001200:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 8001204:	4618      	mov	r0, r3
 8001206:	2320      	movs	r3, #32
 8001208:	461a      	mov	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f006 fbb2 	bl	8007974 <memset>
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001218:	f102 0218 	add.w	r2, r2, #24
 800121c:	6013      	str	r3, [r2, #0]
    float W_k[8] = {0}, W_r[8] = {0}, U_k[8] = {0}, U_r[8] = {0}, V_k[8] = {0}, V_r[8] = {0};
 800121e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001222:	f5a3 632d 	sub.w	r3, r3, #2768	; 0xad0
 8001226:	4618      	mov	r0, r3
 8001228:	2320      	movs	r3, #32
 800122a:	461a      	mov	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f006 fba1 	bl	8007974 <memset>
 8001232:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001236:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 800123a:	4618      	mov	r0, r3
 800123c:	2320      	movs	r3, #32
 800123e:	461a      	mov	r2, r3
 8001240:	2100      	movs	r1, #0
 8001242:	f006 fb97 	bl	8007974 <memset>
 8001246:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800124a:	f5a3 6331 	sub.w	r3, r3, #2832	; 0xb10
 800124e:	4618      	mov	r0, r3
 8001250:	2320      	movs	r3, #32
 8001252:	461a      	mov	r2, r3
 8001254:	2100      	movs	r1, #0
 8001256:	f006 fb8d 	bl	8007974 <memset>
 800125a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800125e:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 8001262:	4618      	mov	r0, r3
 8001264:	2320      	movs	r3, #32
 8001266:	461a      	mov	r2, r3
 8001268:	2100      	movs	r1, #0
 800126a:	f006 fb83 	bl	8007974 <memset>
 800126e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001272:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 8001276:	4618      	mov	r0, r3
 8001278:	2320      	movs	r3, #32
 800127a:	461a      	mov	r2, r3
 800127c:	2100      	movs	r1, #0
 800127e:	f006 fb79 	bl	8007974 <memset>
 8001282:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001286:	f5a3 6337 	sub.w	r3, r3, #2928	; 0xb70
 800128a:	4618      	mov	r0, r3
 800128c:	2320      	movs	r3, #32
 800128e:	461a      	mov	r2, r3
 8001290:	2100      	movs	r1, #0
 8001292:	f006 fb6f 	bl	8007974 <memset>
    /*first, select reference light with color temperature*/
    if(ATTRS.cdc <= 5000)
 8001296:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800129a:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	891b      	ldrh	r3, [r3, #8]
 80012a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	f200 8084 	bhi.w	80013b4 <Calcute_Ra+0x22c>
    {
        /*spectral of reference light should be Sp*/
        /*calculate reference light source power distribution function*/
        float tmp;
        for(uint8_t i = 0; i < 81; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80012b2:	f102 020f 	add.w	r2, r2, #15
 80012b6:	7013      	strb	r3, [r2, #0]
 80012b8:	e074      	b.n	80013a4 <Calcute_Ra+0x21c>
        {
            tmp = c_2 / ((380 + 5 * i) * ATTRS.cdc);
 80012ba:	4c9b      	ldr	r4, [pc, #620]	; (8001528 <Calcute_Ra+0x3a0>)
 80012bc:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80012c0:	f103 030f 	add.w	r3, r3, #15
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012d0:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 80012d4:	f6a2 3274 	subw	r2, r2, #2932	; 0xb74
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	8912      	ldrh	r2, [r2, #8]
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fd17 	bl	8000d14 <__aeabi_i2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff fe1a 	bl	8000f24 <__aeabi_fdiv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 80012f6:	f102 0204 	add.w	r2, r2, #4
 80012fa:	6013      	str	r3, [r2, #0]
            ref_light.spectral_sta[i] = c_1 * ((380 + 5 * i) * (1e-14)) / (tmp - 1);
 80012fc:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001300:	f103 030f 	add.w	r3, r3, #15
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8db 	bl	80004cc <__aeabi_i2d>
 8001316:	a378      	add	r3, pc, #480	; (adr r3, 80014f8 <Calcute_Ra+0x370>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff f940 	bl	80005a0 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	a375      	add	r3, pc, #468	; (adr r3, 8001500 <Calcute_Ra+0x378>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff f937 	bl	80005a0 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4614      	mov	r4, r2
 8001338:	461d      	mov	r5, r3
 800133a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800133e:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001342:	f103 0304 	add.w	r3, r3, #4
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	f7ff fc2e 	bl	8000ba8 <__aeabi_fsub>
 800134c:	4603      	mov	r3, r0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8ce 	bl	80004f0 <__aeabi_f2d>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4620      	mov	r0, r4
 800135a:	4629      	mov	r1, r5
 800135c:	f7ff fa4a 	bl	80007f4 <__aeabi_ddiv>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 8001368:	f101 010f 	add.w	r1, r1, #15
 800136c:	780c      	ldrb	r4, [r1, #0]
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fbc5 	bl	8000b00 <__aeabi_d2f>
 8001376:	4601      	mov	r1, r0
 8001378:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800137c:	f103 0318 	add.w	r3, r3, #24
 8001380:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8001384:	f104 030a 	add.w	r3, r4, #10
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	6059      	str	r1, [r3, #4]
        for(uint8_t i = 0; i < 81; i++)
 800138e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001392:	f103 030f 	add.w	r3, r3, #15
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 800139e:	f102 020f 	add.w	r2, r2, #15
 80013a2:	7013      	strb	r3, [r2, #0]
 80013a4:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80013a8:	f103 030f 	add.w	r3, r3, #15
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b50      	cmp	r3, #80	; 0x50
 80013b0:	d983      	bls.n	80012ba <Calcute_Ra+0x132>
 80013b2:	e305      	b.n	80019c0 <Calcute_Ra+0x838>
        }
    }
    else
    {
        /*spectral of reference light should be Sd*/
        float M_1, M_2, tmp = 1000 / ATTRS.cdc;
 80013b4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80013b8:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	891b      	ldrh	r3, [r3, #8]
 80013c0:	461a      	mov	r2, r3
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fca2 	bl	8000d14 <__aeabi_i2f>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 80013d6:	f102 0214 	add.w	r2, r2, #20
 80013da:	6013      	str	r3, [r2, #0]
        float x_d = 0, y_d = 0;
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80013e4:	f102 0208 	add.w	r2, r2, #8
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 80013f2:	f102 0210 	add.w	r2, r2, #16
 80013f6:	6013      	str	r3, [r2, #0]
        if((ATTRS.cdc >= 5000) && (ATTRS.cdc <= 7000))
 80013f8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80013fc:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	891b      	ldrh	r3, [r3, #8]
 8001404:	f241 3287 	movw	r2, #4999	; 0x1387
 8001408:	4293      	cmp	r3, r2
 800140a:	f240 808f 	bls.w	800152c <Calcute_Ra+0x3a4>
 800140e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001412:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	891b      	ldrh	r3, [r3, #8]
 800141a:	f641 3258 	movw	r2, #7000	; 0x1b58
 800141e:	4293      	cmp	r3, r2
 8001420:	f200 8084 	bhi.w	800152c <Calcute_Ra+0x3a4>
            x_d = (-4.6070) * (tmp*tmp*tmp) + 2.9678 * (tmp*tmp) + 0.09911 * tmp + 0.244063;
 8001424:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001428:	f103 0314 	add.w	r3, r3, #20
 800142c:	6819      	ldr	r1, [r3, #0]
 800142e:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001432:	f103 0314 	add.w	r3, r3, #20
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	f7ff fcc0 	bl	8000dbc <__aeabi_fmul>
 800143c:	4603      	mov	r3, r0
 800143e:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001442:	f102 0214 	add.w	r2, r2, #20
 8001446:	6811      	ldr	r1, [r2, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fcb7 	bl	8000dbc <__aeabi_fmul>
 800144e:	4603      	mov	r3, r0
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f84d 	bl	80004f0 <__aeabi_f2d>
 8001456:	a32c      	add	r3, pc, #176	; (adr r3, 8001508 <Calcute_Ra+0x380>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f8a0 	bl	80005a0 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4614      	mov	r4, r2
 8001466:	461d      	mov	r5, r3
 8001468:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 800146c:	f103 0314 	add.w	r3, r3, #20
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001476:	f103 0314 	add.w	r3, r3, #20
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f7ff fc9e 	bl	8000dbc <__aeabi_fmul>
 8001480:	4603      	mov	r3, r0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f834 	bl	80004f0 <__aeabi_f2d>
 8001488:	a321      	add	r3, pc, #132	; (adr r3, 8001510 <Calcute_Ra+0x388>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f887 	bl	80005a0 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4620      	mov	r0, r4
 8001498:	4629      	mov	r1, r5
 800149a:	f7fe fecb 	bl	8000234 <__adddf3>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4614      	mov	r4, r2
 80014a4:	461d      	mov	r5, r3
 80014a6:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80014aa:	f103 0314 	add.w	r3, r3, #20
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	f7ff f81e 	bl	80004f0 <__aeabi_f2d>
 80014b4:	a318      	add	r3, pc, #96	; (adr r3, 8001518 <Calcute_Ra+0x390>)
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7ff f871 	bl	80005a0 <__aeabi_dmul>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4620      	mov	r0, r4
 80014c4:	4629      	mov	r1, r5
 80014c6:	f7fe feb5 	bl	8000234 <__adddf3>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	a313      	add	r3, pc, #76	; (adr r3, 8001520 <Calcute_Ra+0x398>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7fe feac 	bl	8000234 <__adddf3>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb0c 	bl	8000b00 <__aeabi_d2f>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80014ee:	f102 0208 	add.w	r2, r2, #8
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e09b      	b.n	800162e <Calcute_Ra+0x4a6>
 80014f6:	bf00      	nop
 80014f8:	86a12b9b 	.word	0x86a12b9b
 80014fc:	3d06849b 	.word	0x3d06849b
 8001500:	41f5faf9 	.word	0x41f5faf9
 8001504:	3cbaf675 	.word	0x3cbaf675
 8001508:	6872b021 	.word	0x6872b021
 800150c:	c0126d91 	.word	0xc0126d91
 8001510:	ed288ce7 	.word	0xed288ce7
 8001514:	4007be0d 	.word	0x4007be0d
 8001518:	e0b4e11e 	.word	0xe0b4e11e
 800151c:	3fb95f45 	.word	0x3fb95f45
 8001520:	d594f26b 	.word	0xd594f26b
 8001524:	3fcf3d74 	.word	0x3fcf3d74
 8001528:	3c6bbba5 	.word	0x3c6bbba5
        else if((ATTRS.cdc > 7000) && (ATTRS.cdc <= 25000))
 800152c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001530:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	891b      	ldrh	r3, [r3, #8]
 8001538:	f641 3258 	movw	r2, #7000	; 0x1b58
 800153c:	4293      	cmp	r3, r2
 800153e:	d972      	bls.n	8001626 <Calcute_Ra+0x49e>
 8001540:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001544:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	891b      	ldrh	r3, [r3, #8]
 800154c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001550:	4293      	cmp	r3, r2
 8001552:	d868      	bhi.n	8001626 <Calcute_Ra+0x49e>
            x_d = (-2.0064) * (tmp*tmp*tmp) + 1.9018 * (tmp*tmp) + 0.24748 * tmp + 0.237040;
 8001554:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001558:	f103 0314 	add.w	r3, r3, #20
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001562:	f103 0314 	add.w	r3, r3, #20
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	f7ff fc28 	bl	8000dbc <__aeabi_fmul>
 800156c:	4603      	mov	r3, r0
 800156e:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001572:	f102 0214 	add.w	r2, r2, #20
 8001576:	6811      	ldr	r1, [r2, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fc1f 	bl	8000dbc <__aeabi_fmul>
 800157e:	4603      	mov	r3, r0
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffb5 	bl	80004f0 <__aeabi_f2d>
 8001586:	a3bc      	add	r3, pc, #752	; (adr r3, 8001878 <Calcute_Ra+0x6f0>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f808 	bl	80005a0 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4614      	mov	r4, r2
 8001596:	461d      	mov	r5, r3
 8001598:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 800159c:	f103 0314 	add.w	r3, r3, #20
 80015a0:	6819      	ldr	r1, [r3, #0]
 80015a2:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80015a6:	f103 0314 	add.w	r3, r3, #20
 80015aa:	6818      	ldr	r0, [r3, #0]
 80015ac:	f7ff fc06 	bl	8000dbc <__aeabi_fmul>
 80015b0:	4603      	mov	r3, r0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ff9c 	bl	80004f0 <__aeabi_f2d>
 80015b8:	a3b1      	add	r3, pc, #708	; (adr r3, 8001880 <Calcute_Ra+0x6f8>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7fe ffef 	bl	80005a0 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7fe fe33 	bl	8000234 <__adddf3>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80015da:	f103 0314 	add.w	r3, r3, #20
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	f7fe ff86 	bl	80004f0 <__aeabi_f2d>
 80015e4:	a3a8      	add	r3, pc, #672	; (adr r3, 8001888 <Calcute_Ra+0x700>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7fe ffd9 	bl	80005a0 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7fe fe1d 	bl	8000234 <__adddf3>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	a3a3      	add	r3, pc, #652	; (adr r3, 8001890 <Calcute_Ra+0x708>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7fe fe14 	bl	8000234 <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fa74 	bl	8000b00 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 800161e:	f102 0208 	add.w	r2, r2, #8
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e003      	b.n	800162e <Calcute_Ra+0x4a6>
        else
            return -1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	f002 bb81 	b.w	8003d30 <Calcute_Ra+0x2ba8>
        y_d = -3.0000 * x_d * x_d + 2.870 * x_d - 0.2750;
 800162e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001632:	f103 0308 	add.w	r3, r3, #8
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	f7fe ff5a 	bl	80004f0 <__aeabi_f2d>
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4bab      	ldr	r3, [pc, #684]	; (80018f0 <Calcute_Ra+0x768>)
 8001642:	f7fe ffad 	bl	80005a0 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001652:	f103 0308 	add.w	r3, r3, #8
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	f7fe ff4a 	bl	80004f0 <__aeabi_f2d>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4620      	mov	r0, r4
 8001662:	4629      	mov	r1, r5
 8001664:	f7fe ff9c 	bl	80005a0 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001674:	f103 0308 	add.w	r3, r3, #8
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f7fe ff39 	bl	80004f0 <__aeabi_f2d>
 800167e:	a386      	add	r3, pc, #536	; (adr r3, 8001898 <Calcute_Ra+0x710>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ff8c 	bl	80005a0 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fdd0 	bl	8000234 <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	a380      	add	r3, pc, #512	; (adr r3, 80018a0 <Calcute_Ra+0x718>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe fdc5 	bl	8000230 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fa27 	bl	8000b00 <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 80016b8:	f102 0210 	add.w	r2, r2, #16
 80016bc:	6013      	str	r3, [r2, #0]
        M_1 = (-1.3515 - 1.7703 * x_d + 5.9114 * y_d) / (0.0241 + 0.2562 * x_d - 0.7341 * y_d);
 80016be:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80016c2:	f103 0308 	add.w	r3, r3, #8
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	f7fe ff12 	bl	80004f0 <__aeabi_f2d>
 80016cc:	a376      	add	r3, pc, #472	; (adr r3, 80018a8 <Calcute_Ra+0x720>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe ff65 	bl	80005a0 <__aeabi_dmul>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	a175      	add	r1, pc, #468	; (adr r1, 80018b0 <Calcute_Ra+0x728>)
 80016dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016e0:	f7fe fda6 	bl	8000230 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	461d      	mov	r5, r3
 80016ec:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80016f0:	f103 0310 	add.w	r3, r3, #16
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	f7fe fefb 	bl	80004f0 <__aeabi_f2d>
 80016fa:	a36f      	add	r3, pc, #444	; (adr r3, 80018b8 <Calcute_Ra+0x730>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff4e 	bl	80005a0 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe fd92 	bl	8000234 <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800171c:	f103 0308 	add.w	r3, r3, #8
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	f7fe fee5 	bl	80004f0 <__aeabi_f2d>
 8001726:	a366      	add	r3, pc, #408	; (adr r3, 80018c0 <Calcute_Ra+0x738>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe ff38 	bl	80005a0 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	a363      	add	r3, pc, #396	; (adr r3, 80018c8 <Calcute_Ra+0x740>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe fd79 	bl	8000234 <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4690      	mov	r8, r2
 8001748:	4699      	mov	r9, r3
 800174a:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 800174e:	f103 0310 	add.w	r3, r3, #16
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	f7fe fecc 	bl	80004f0 <__aeabi_f2d>
 8001758:	a35d      	add	r3, pc, #372	; (adr r3, 80018d0 <Calcute_Ra+0x748>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe ff1f 	bl	80005a0 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4640      	mov	r0, r8
 8001768:	4649      	mov	r1, r9
 800176a:	f7fe fd61 	bl	8000230 <__aeabi_dsub>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7ff f83d 	bl	80007f4 <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f9bd 	bl	8000b00 <__aeabi_d2f>
 8001786:	4603      	mov	r3, r0
 8001788:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 800178c:	f102 020c 	add.w	r2, r2, #12
 8001790:	6013      	str	r3, [r2, #0]
        M_2 = (0.0300 - 31.4424 * x_d + 30.0171 * y_d) / (0.0241 + 0.2562 * x_d - 0.7341 * y_d);
 8001792:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001796:	f103 0308 	add.w	r3, r3, #8
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f7fe fea8 	bl	80004f0 <__aeabi_f2d>
 80017a0:	a34d      	add	r3, pc, #308	; (adr r3, 80018d8 <Calcute_Ra+0x750>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fefb 	bl	80005a0 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	a14c      	add	r1, pc, #304	; (adr r1, 80018e0 <Calcute_Ra+0x758>)
 80017b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017b4:	f7fe fd3c 	bl	8000230 <__aeabi_dsub>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80017c4:	f103 0310 	add.w	r3, r3, #16
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	f7fe fe91 	bl	80004f0 <__aeabi_f2d>
 80017ce:	a346      	add	r3, pc, #280	; (adr r3, 80018e8 <Calcute_Ra+0x760>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe fee4 	bl	80005a0 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4620      	mov	r0, r4
 80017de:	4629      	mov	r1, r5
 80017e0:	f7fe fd28 	bl	8000234 <__adddf3>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4614      	mov	r4, r2
 80017ea:	461d      	mov	r5, r3
 80017ec:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80017f0:	f103 0308 	add.w	r3, r3, #8
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	f7fe fe7b 	bl	80004f0 <__aeabi_f2d>
 80017fa:	a331      	add	r3, pc, #196	; (adr r3, 80018c0 <Calcute_Ra+0x738>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fece 	bl	80005a0 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	a32e      	add	r3, pc, #184	; (adr r3, 80018c8 <Calcute_Ra+0x740>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fd0f 	bl	8000234 <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4690      	mov	r8, r2
 800181c:	4699      	mov	r9, r3
 800181e:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8001822:	f103 0310 	add.w	r3, r3, #16
 8001826:	6818      	ldr	r0, [r3, #0]
 8001828:	f7fe fe62 	bl	80004f0 <__aeabi_f2d>
 800182c:	a328      	add	r3, pc, #160	; (adr r3, 80018d0 <Calcute_Ra+0x748>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe feb5 	bl	80005a0 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4640      	mov	r0, r8
 800183c:	4649      	mov	r1, r9
 800183e:	f7fe fcf7 	bl	8000230 <__aeabi_dsub>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7fe ffd3 	bl	80007f4 <__aeabi_ddiv>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff f953 	bl	8000b00 <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001860:	f102 0208 	add.w	r2, r2, #8
 8001864:	6013      	str	r3, [r2, #0]
        /*calculate reference light source power distribution function*/
        for(uint8_t i = 0; i < 81; i++)
 8001866:	2300      	movs	r3, #0
 8001868:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 800186c:	f102 0207 	add.w	r2, r2, #7
 8001870:	7013      	strb	r3, [r2, #0]
 8001872:	e09e      	b.n	80019b2 <Calcute_Ra+0x82a>
 8001874:	f3af 8000 	nop.w
 8001878:	71758e22 	.word	0x71758e22
 800187c:	c0000d1b 	.word	0xc0000d1b
 8001880:	d6388659 	.word	0xd6388659
 8001884:	3ffe6dc5 	.word	0x3ffe6dc5
 8001888:	b5350093 	.word	0xb5350093
 800188c:	3fcfad6c 	.word	0x3fcfad6c
 8001890:	a3ec02f3 	.word	0xa3ec02f3
 8001894:	3fce5753 	.word	0x3fce5753
 8001898:	8f5c28f6 	.word	0x8f5c28f6
 800189c:	4006f5c2 	.word	0x4006f5c2
 80018a0:	9999999a 	.word	0x9999999a
 80018a4:	3fd19999 	.word	0x3fd19999
 80018a8:	17c1bda5 	.word	0x17c1bda5
 80018ac:	3ffc5326 	.word	0x3ffc5326
 80018b0:	76c8b439 	.word	0x76c8b439
 80018b4:	bff59fbe 	.word	0xbff59fbe
 80018b8:	0aa64c30 	.word	0x0aa64c30
 80018bc:	4017a546 	.word	0x4017a546
 80018c0:	af4f0d84 	.word	0xaf4f0d84
 80018c4:	3fd06594 	.word	0x3fd06594
 80018c8:	9f559b3d 	.word	0x9f559b3d
 80018cc:	3f98adab 	.word	0x3f98adab
 80018d0:	487fcb92 	.word	0x487fcb92
 80018d4:	3fe77dbf 	.word	0x3fe77dbf
 80018d8:	205bc01a 	.word	0x205bc01a
 80018dc:	403f7141 	.word	0x403f7141
 80018e0:	eb851eb8 	.word	0xeb851eb8
 80018e4:	3f9eb851 	.word	0x3f9eb851
 80018e8:	aa64c2f8 	.word	0xaa64c2f8
 80018ec:	403e0460 	.word	0x403e0460
 80018f0:	c0080000 	.word	0xc0080000
            ref_light.spectral_sta[i] = std_light_D_vec_sta[i][0] + M_1 * std_light_D_vec_sta[i][1] + M_2 * std_light_D_vec_sta[i][2];
 80018f4:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80018f8:	f103 0307 	add.w	r3, r3, #7
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	4941      	ldr	r1, [pc, #260]	; (8001a04 <Calcute_Ra+0x87c>)
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	681c      	ldr	r4, [r3, #0]
 800190c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001910:	f103 0307 	add.w	r3, r3, #7
 8001914:	781a      	ldrb	r2, [r3, #0]
 8001916:	493b      	ldr	r1, [pc, #236]	; (8001a04 <Calcute_Ra+0x87c>)
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	3304      	adds	r3, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 800192a:	f102 020c 	add.w	r2, r2, #12
 800192e:	6811      	ldr	r1, [r2, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fa43 	bl	8000dbc <__aeabi_fmul>
 8001936:	4603      	mov	r3, r0
 8001938:	4619      	mov	r1, r3
 800193a:	4620      	mov	r0, r4
 800193c:	f7ff f936 	bl	8000bac <__addsf3>
 8001940:	4603      	mov	r3, r0
 8001942:	461d      	mov	r5, r3
 8001944:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001948:	f103 0307 	add.w	r3, r3, #7
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	492d      	ldr	r1, [pc, #180]	; (8001a04 <Calcute_Ra+0x87c>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	3308      	adds	r3, #8
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001962:	f102 0208 	add.w	r2, r2, #8
 8001966:	6811      	ldr	r1, [r2, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fa27 	bl	8000dbc <__aeabi_fmul>
 800196e:	4603      	mov	r3, r0
 8001970:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001974:	f102 0207 	add.w	r2, r2, #7
 8001978:	7814      	ldrb	r4, [r2, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	4628      	mov	r0, r5
 800197e:	f7ff f915 	bl	8000bac <__addsf3>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800198a:	f103 0318 	add.w	r3, r3, #24
 800198e:	f5a3 72e8 	sub.w	r2, r3, #464	; 0x1d0
 8001992:	f104 030a 	add.w	r3, r4, #10
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	6059      	str	r1, [r3, #4]
        for(uint8_t i = 0; i < 81; i++)
 800199c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80019a0:	f103 0307 	add.w	r3, r3, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80019ac:	f102 0207 	add.w	r2, r2, #7
 80019b0:	7013      	strb	r3, [r2, #0]
 80019b2:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80019b6:	f103 0307 	add.w	r3, r3, #7
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b50      	cmp	r3, #80	; 0x50
 80019be:	d999      	bls.n	80018f4 <Calcute_Ra+0x76c>
    }

    /*second, calculate XYZ and compare chroma difference (delta c)*/
    /*calculate XYZ*/
    ATTRS.tri_X = 0;
 80019c0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80019c4:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    ATTRS.tri_Y = 0;
 80019d2:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80019d6:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    ATTRS.tri_Z = 0;
 80019e4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80019e8:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    for(uint8_t i = 0; i < 9; i++){
 80019f6:	2300      	movs	r3, #0
 80019f8:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80019fc:	f102 0206 	add.w	r2, r2, #6
 8001a00:	7013      	strb	r3, [r2, #0]
 8001a02:	e0cf      	b.n	8001ba4 <Calcute_Ra+0xa1c>
 8001a04:	08009298 	.word	0x08009298
        ATTRS.tri_X += ATTRS.spectral[i] * _x_lamda[i] * delta_lambda[i];
 8001a08:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001a0c:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 8001a16:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001a1a:	f103 0306 	add.w	r3, r3, #6
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001a24:	f6a2 3274 	subw	r2, r2, #2932	; 0xb74
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001a36:	f103 0306 	add.w	r3, r3, #6
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4997      	ldr	r1, [pc, #604]	; (8001c9c <Calcute_Ra+0xb14>)
 8001a3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4610      	mov	r0, r2
 8001a46:	f7ff f9b9 	bl	8000dbc <__aeabi_fmul>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001a52:	f103 0306 	add.w	r3, r3, #6
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4a91      	ldr	r2, [pc, #580]	; (8001ca0 <Calcute_Ra+0xb18>)
 8001a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f958 	bl	8000d14 <__aeabi_i2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4619      	mov	r1, r3
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f7ff f9a7 	bl	8000dbc <__aeabi_fmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7ff f89a 	bl	8000bac <__addsf3>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001a80:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        ATTRS.tri_Y += ATTRS.spectral[i] * _y_lamda[i] * delta_lambda[i];
 8001a8a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001a8e:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 4184 	ldr.w	r4, [r3, #388]	; 0x184
 8001a98:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001a9c:	f103 0306 	add.w	r3, r3, #6
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001aa6:	f6a2 3274 	subw	r2, r2, #2932	; 0xb74
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	3302      	adds	r3, #2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001ab8:	f103 0306 	add.w	r3, r3, #6
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4979      	ldr	r1, [pc, #484]	; (8001ca4 <Calcute_Ra+0xb1c>)
 8001ac0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f7ff f978 	bl	8000dbc <__aeabi_fmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461d      	mov	r5, r3
 8001ad0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001ad4:	f103 0306 	add.w	r3, r3, #6
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4a71      	ldr	r2, [pc, #452]	; (8001ca0 <Calcute_Ra+0xb18>)
 8001adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f917 	bl	8000d14 <__aeabi_i2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4628      	mov	r0, r5
 8001aec:	f7ff f966 	bl	8000dbc <__aeabi_fmul>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4619      	mov	r1, r3
 8001af4:	4620      	mov	r0, r4
 8001af6:	f7ff f859 	bl	8000bac <__addsf3>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001b02:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ATTRS.tri_Z += ATTRS.spectral[i] * _z_lamda[i] * delta_lambda[i];
 8001b0c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001b10:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f8d3 4188 	ldr.w	r4, [r3, #392]	; 0x188
 8001b1a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001b1e:	f103 0306 	add.w	r3, r3, #6
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001b28:	f6a2 3274 	subw	r2, r2, #2932	; 0xb74
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001b3a:	f103 0306 	add.w	r3, r3, #6
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4959      	ldr	r1, [pc, #356]	; (8001ca8 <Calcute_Ra+0xb20>)
 8001b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b46:	4619      	mov	r1, r3
 8001b48:	4610      	mov	r0, r2
 8001b4a:	f7ff f937 	bl	8000dbc <__aeabi_fmul>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461d      	mov	r5, r3
 8001b52:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001b56:	f103 0306 	add.w	r3, r3, #6
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	4a50      	ldr	r2, [pc, #320]	; (8001ca0 <Calcute_Ra+0xb18>)
 8001b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f8d6 	bl	8000d14 <__aeabi_i2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4628      	mov	r0, r5
 8001b6e:	f7ff f925 	bl	8000dbc <__aeabi_fmul>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4619      	mov	r1, r3
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff f818 	bl	8000bac <__addsf3>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001b84:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    for(uint8_t i = 0; i < 9; i++){
 8001b8e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001b92:	f103 0306 	add.w	r3, r3, #6
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001b9e:	f102 0206 	add.w	r2, r2, #6
 8001ba2:	7013      	strb	r3, [r2, #0]
 8001ba4:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001ba8:	f103 0306 	add.w	r3, r3, #6
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	f67f af2a 	bls.w	8001a08 <Calcute_Ra+0x880>
    }
    /*normalization*/
    {
        float tmp = ATTRS.tri_X + ATTRS.tri_Y + ATTRS.tri_Z;
 8001bb4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001bb8:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001bc2:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001bc6:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f7fe ffea 	bl	8000bac <__addsf3>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001be0:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001bea:	4619      	mov	r1, r3
 8001bec:	4610      	mov	r0, r2
 8001bee:	f7fe ffdd 	bl	8000bac <__addsf3>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001bf8:	6013      	str	r3, [r2, #0]
        //float tmp = 100 / ATTRS.tri_Y; //maybe right
        ATTRS.tri_X /= tmp;
 8001bfa:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001bfe:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001c08:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001c0c:	6811      	ldr	r1, [r2, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f988 	bl	8000f24 <__aeabi_fdiv>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001c1c:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
        ATTRS.tri_Y /= tmp;
 8001c26:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001c2a:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001c34:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001c38:	6811      	ldr	r1, [r2, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f972 	bl	8000f24 <__aeabi_fdiv>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001c48:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ATTRS.tri_Z /= tmp;
 8001c52:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001c56:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001c60:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8001c64:	6811      	ldr	r1, [r2, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff f95c 	bl	8000f24 <__aeabi_fdiv>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001c74:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    }

    /*calculate XYZ of 8 color sample under test_light and refer_light*/
    for(uint8_t i = 0; i < 8; i++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001c84:	f102 0205 	add.w	r2, r2, #5
 8001c88:	7013      	strb	r3, [r2, #0]
 8001c8a:	f000 bc60 	b.w	800254e <Calcute_Ra+0x13c6>
    {
        /*i represents amounts of color samples*/
        for(uint8_t j = 0; j < 9; j++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001c94:	f102 0204 	add.w	r2, r2, #4
 8001c98:	7013      	strb	r3, [r2, #0]
 8001c9a:	e2a9      	b.n	80021f0 <Calcute_Ra+0x1068>
 8001c9c:	08008e60 	.word	0x08008e60
 8001ca0:	08009784 	.word	0x08009784
 8001ca4:	08008fc8 	.word	0x08008fc8
 8001ca8:	08009130 	.word	0x08009130
        {
            /*j represents wavelength*/
            /*XYZ under test_light*/
            sam_k[i].tri_X += ATTRS.spectral[j] * _x_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 8001cac:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001cb0:	f103 0305 	add.w	r3, r3, #5
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001cba:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8001cbe:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ccc:	681d      	ldr	r5, [r3, #0]
 8001cce:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001cd2:	f103 0304 	add.w	r3, r3, #4
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001cdc:	f6a2 3274 	subw	r2, r2, #2932	; 0xb74
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001cee:	f103 0304 	add.w	r3, r3, #4
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	49c5      	ldr	r1, [pc, #788]	; (800200c <Calcute_Ra+0xe84>)
 8001cf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7ff f85d 	bl	8000dbc <__aeabi_fmul>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001d0a:	f103 0304 	add.w	r3, r3, #4
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001d14:	f103 0305 	add.w	r3, r3, #5
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	49bd      	ldr	r1, [pc, #756]	; (8002010 <Calcute_Ra+0xe88>)
 8001d1c:	00d2      	lsls	r2, r2, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7ff f849 	bl	8000dbc <__aeabi_fmul>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461c      	mov	r4, r3
 8001d2e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001d32:	f103 0305 	add.w	r3, r3, #5
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4ab6      	ldr	r2, [pc, #728]	; (8002014 <Calcute_Ra+0xe8c>)
 8001d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe ffe8 	bl	8000d14 <__aeabi_i2f>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4619      	mov	r1, r3
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff f837 	bl	8000dbc <__aeabi_fmul>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001d54:	f102 0205 	add.w	r2, r2, #5
 8001d58:	7814      	ldrb	r4, [r2, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	f7fe ff25 	bl	8000bac <__addsf3>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4619      	mov	r1, r3
 8001d66:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001d6a:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8001d6e:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8001d72:	fb04 f303 	mul.w	r3, r4, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d7c:	6019      	str	r1, [r3, #0]
            sam_k[i].tri_Y += ATTRS.spectral[j] * _y_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 8001d7e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001d82:	f103 0305 	add.w	r3, r3, #5
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001d8c:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8001d90:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d9e:	681d      	ldr	r5, [r3, #0]
 8001da0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001da4:	f103 0304 	add.w	r3, r3, #4
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001dae:	f6a2 3274 	subw	r2, r2, #2932	; 0xb74
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	3302      	adds	r3, #2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001dc0:	f103 0304 	add.w	r3, r3, #4
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4994      	ldr	r1, [pc, #592]	; (8002018 <Calcute_Ra+0xe90>)
 8001dc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f7fe fff4 	bl	8000dbc <__aeabi_fmul>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001ddc:	f103 0304 	add.w	r3, r3, #4
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001de6:	f103 0305 	add.w	r3, r3, #5
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4988      	ldr	r1, [pc, #544]	; (8002010 <Calcute_Ra+0xe88>)
 8001dee:	00d2      	lsls	r2, r2, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001df6:	4619      	mov	r1, r3
 8001df8:	f7fe ffe0 	bl	8000dbc <__aeabi_fmul>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461c      	mov	r4, r3
 8001e00:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001e04:	f103 0305 	add.w	r3, r3, #5
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	4a82      	ldr	r2, [pc, #520]	; (8002014 <Calcute_Ra+0xe8c>)
 8001e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe ff7f 	bl	8000d14 <__aeabi_i2f>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7fe ffce 	bl	8000dbc <__aeabi_fmul>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001e26:	f102 0205 	add.w	r2, r2, #5
 8001e2a:	7814      	ldrb	r4, [r2, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f7fe febc 	bl	8000bac <__addsf3>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4619      	mov	r1, r3
 8001e38:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001e3c:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8001e40:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8001e44:	fb04 f303 	mul.w	r3, r4, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e4e:	6019      	str	r1, [r3, #0]
            sam_k[i].tri_Z += ATTRS.spectral[j] * _z_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 8001e50:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001e54:	f103 0305 	add.w	r3, r3, #5
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001e5e:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8001e62:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e70:	681d      	ldr	r5, [r3, #0]
 8001e72:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001e76:	f103 0304 	add.w	r3, r3, #4
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8001e80:	f6a2 3274 	subw	r2, r2, #2932	; 0xb74
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	3302      	adds	r3, #2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001e92:	f103 0304 	add.w	r3, r3, #4
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4960      	ldr	r1, [pc, #384]	; (800201c <Calcute_Ra+0xe94>)
 8001e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f7fe ff8b 	bl	8000dbc <__aeabi_fmul>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001eae:	f103 0304 	add.w	r3, r3, #4
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001eb8:	f103 0305 	add.w	r3, r3, #5
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4954      	ldr	r1, [pc, #336]	; (8002010 <Calcute_Ra+0xe88>)
 8001ec0:	00d2      	lsls	r2, r2, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe ff77 	bl	8000dbc <__aeabi_fmul>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001ed6:	f103 0305 	add.w	r3, r3, #5
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4a4d      	ldr	r2, [pc, #308]	; (8002014 <Calcute_Ra+0xe8c>)
 8001ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ff16 	bl	8000d14 <__aeabi_i2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7fe ff65 	bl	8000dbc <__aeabi_fmul>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001ef8:	f102 0205 	add.w	r2, r2, #5
 8001efc:	7814      	ldrb	r4, [r2, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	4628      	mov	r0, r5
 8001f02:	f7fe fe53 	bl	8000bac <__addsf3>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8001f0e:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8001f12:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8001f16:	fb04 f303 	mul.w	r3, r4, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f20:	6019      	str	r1, [r3, #0]
            /*XYZ under refer_light*/
            sam_r[i].tri_X += ref_light.spectral[j] * _x_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 8001f22:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001f26:	f103 0305 	add.w	r3, r3, #5
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001f30:	f102 0218 	add.w	r2, r2, #24
 8001f34:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8001f38:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f46:	681d      	ldr	r5, [r3, #0]
 8001f48:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001f4c:	f103 0304 	add.w	r3, r3, #4
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001f56:	f102 0218 	add.w	r2, r2, #24
 8001f5a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001f68:	f103 0304 	add.w	r3, r3, #4
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	4927      	ldr	r1, [pc, #156]	; (800200c <Calcute_Ra+0xe84>)
 8001f70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f7fe ff20 	bl	8000dbc <__aeabi_fmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001f84:	f103 0304 	add.w	r3, r3, #4
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001f8e:	f103 0305 	add.w	r3, r3, #5
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	491e      	ldr	r1, [pc, #120]	; (8002010 <Calcute_Ra+0xe88>)
 8001f96:	00d2      	lsls	r2, r2, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	f7fe ff0c 	bl	8000dbc <__aeabi_fmul>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461c      	mov	r4, r3
 8001fa8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001fac:	f103 0305 	add.w	r3, r3, #5
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4a18      	ldr	r2, [pc, #96]	; (8002014 <Calcute_Ra+0xe8c>)
 8001fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe feab 	bl	8000d14 <__aeabi_i2f>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7fe fefa 	bl	8000dbc <__aeabi_fmul>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8001fce:	f102 0205 	add.w	r2, r2, #5
 8001fd2:	7814      	ldrb	r4, [r2, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f7fe fde8 	bl	8000bac <__addsf3>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8001fe4:	f103 0318 	add.w	r3, r3, #24
 8001fe8:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 8001fec:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8001ff0:	fb04 f303 	mul.w	r3, r4, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001ffa:	6019      	str	r1, [r3, #0]
            sam_r[i].tri_Y += ref_light.spectral[j] * _y_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 8001ffc:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002000:	f103 0305 	add.w	r3, r3, #5
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 800200a:	e009      	b.n	8002020 <Calcute_Ra+0xe98>
 800200c:	08008e60 	.word	0x08008e60
 8002010:	08009664 	.word	0x08009664
 8002014:	08009784 	.word	0x08009784
 8002018:	08008fc8 	.word	0x08008fc8
 800201c:	08009130 	.word	0x08009130
 8002020:	f102 0218 	add.w	r2, r2, #24
 8002024:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002028:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002036:	681d      	ldr	r5, [r3, #0]
 8002038:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800203c:	f103 0304 	add.w	r3, r3, #4
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002046:	f102 0218 	add.w	r2, r2, #24
 800204a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002058:	f103 0304 	add.w	r3, r3, #4
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4960      	ldr	r1, [pc, #384]	; (80021e0 <Calcute_Ra+0x1058>)
 8002060:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f7fe fea8 	bl	8000dbc <__aeabi_fmul>
 800206c:	4603      	mov	r3, r0
 800206e:	4618      	mov	r0, r3
 8002070:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002074:	f103 0304 	add.w	r3, r3, #4
 8002078:	781a      	ldrb	r2, [r3, #0]
 800207a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800207e:	f103 0305 	add.w	r3, r3, #5
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4957      	ldr	r1, [pc, #348]	; (80021e4 <Calcute_Ra+0x105c>)
 8002086:	00d2      	lsls	r2, r2, #3
 8002088:	4413      	add	r3, r2
 800208a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fe94 	bl	8000dbc <__aeabi_fmul>
 8002094:	4603      	mov	r3, r0
 8002096:	461c      	mov	r4, r3
 8002098:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800209c:	f103 0305 	add.w	r3, r3, #5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <Calcute_Ra+0x1060>)
 80020a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fe33 	bl	8000d14 <__aeabi_i2f>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4619      	mov	r1, r3
 80020b2:	4620      	mov	r0, r4
 80020b4:	f7fe fe82 	bl	8000dbc <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80020be:	f102 0205 	add.w	r2, r2, #5
 80020c2:	7814      	ldrb	r4, [r2, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	4628      	mov	r0, r5
 80020c8:	f7fe fd70 	bl	8000bac <__addsf3>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4619      	mov	r1, r3
 80020d0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80020d4:	f103 0318 	add.w	r3, r3, #24
 80020d8:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 80020dc:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80020e0:	fb04 f303 	mul.w	r3, r4, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80020ea:	6019      	str	r1, [r3, #0]
            sam_r[i].tri_Z += ref_light.spectral[j] * _z_lamda[j] * vis_reflect_table[j][i] * delta_lambda[i];
 80020ec:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80020f0:	f103 0305 	add.w	r3, r3, #5
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80020fa:	f102 0218 	add.w	r2, r2, #24
 80020fe:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002102:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002110:	681d      	ldr	r5, [r3, #0]
 8002112:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002116:	f103 0304 	add.w	r3, r3, #4
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002120:	f102 0218 	add.w	r2, r2, #24
 8002124:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002132:	f103 0304 	add.w	r3, r3, #4
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	492c      	ldr	r1, [pc, #176]	; (80021ec <Calcute_Ra+0x1064>)
 800213a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800213e:	4619      	mov	r1, r3
 8002140:	4610      	mov	r0, r2
 8002142:	f7fe fe3b 	bl	8000dbc <__aeabi_fmul>
 8002146:	4603      	mov	r3, r0
 8002148:	4618      	mov	r0, r3
 800214a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800214e:	f103 0304 	add.w	r3, r3, #4
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002158:	f103 0305 	add.w	r3, r3, #5
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4921      	ldr	r1, [pc, #132]	; (80021e4 <Calcute_Ra+0x105c>)
 8002160:	00d2      	lsls	r2, r2, #3
 8002162:	4413      	add	r3, r2
 8002164:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002168:	4619      	mov	r1, r3
 800216a:	f7fe fe27 	bl	8000dbc <__aeabi_fmul>
 800216e:	4603      	mov	r3, r0
 8002170:	461c      	mov	r4, r3
 8002172:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002176:	f103 0305 	add.w	r3, r3, #5
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <Calcute_Ra+0x1060>)
 800217e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fdc6 	bl	8000d14 <__aeabi_i2f>
 8002188:	4603      	mov	r3, r0
 800218a:	4619      	mov	r1, r3
 800218c:	4620      	mov	r0, r4
 800218e:	f7fe fe15 	bl	8000dbc <__aeabi_fmul>
 8002192:	4603      	mov	r3, r0
 8002194:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002198:	f102 0205 	add.w	r2, r2, #5
 800219c:	7814      	ldrb	r4, [r2, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	4628      	mov	r0, r5
 80021a2:	f7fe fd03 	bl	8000bac <__addsf3>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4619      	mov	r1, r3
 80021aa:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80021ae:	f103 0318 	add.w	r3, r3, #24
 80021b2:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 80021b6:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80021ba:	fb04 f303 	mul.w	r3, r4, r3
 80021be:	4413      	add	r3, r2
 80021c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80021c4:	6019      	str	r1, [r3, #0]
        for(uint8_t j = 0; j < 9; j++)
 80021c6:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80021ca:	f103 0304 	add.w	r3, r3, #4
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3301      	adds	r3, #1
 80021d2:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80021d6:	f102 0204 	add.w	r2, r2, #4
 80021da:	7013      	strb	r3, [r2, #0]
 80021dc:	e008      	b.n	80021f0 <Calcute_Ra+0x1068>
 80021de:	bf00      	nop
 80021e0:	08008fc8 	.word	0x08008fc8
 80021e4:	08009664 	.word	0x08009664
 80021e8:	08009784 	.word	0x08009784
 80021ec:	08009130 	.word	0x08009130
 80021f0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80021f4:	f103 0304 	add.w	r3, r3, #4
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	f67f ad56 	bls.w	8001cac <Calcute_Ra+0xb24>
        }
        {
            float tmp = sam_k[i].tri_X + sam_k[i].tri_Y + sam_k[i].tri_Z;
 8002200:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002204:	f103 0305 	add.w	r3, r3, #5
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 800220e:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002212:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002226:	f103 0305 	add.w	r3, r3, #5
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002230:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002234:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fcb1 	bl	8000bac <__addsf3>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002252:	f103 0305 	add.w	r3, r3, #5
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 800225c:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002260:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	f7fe fc9b 	bl	8000bac <__addsf3>
 8002276:	4603      	mov	r3, r0
 8002278:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 800227c:	f102 0218 	add.w	r2, r2, #24
 8002280:	6013      	str	r3, [r2, #0]
            //float tmp = 100 / sam_k[i].tri_Y; //maybe right
            /*normalization*/
            sam_k[i].tri_X /= tmp;
 8002282:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002286:	f103 0305 	add.w	r3, r3, #5
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002290:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002294:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80022a8:	f102 0205 	add.w	r2, r2, #5
 80022ac:	7814      	ldrb	r4, [r2, #0]
 80022ae:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80022b2:	f102 0218 	add.w	r2, r2, #24
 80022b6:	6811      	ldr	r1, [r2, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fe33 	bl	8000f24 <__aeabi_fdiv>
 80022be:	4603      	mov	r3, r0
 80022c0:	4619      	mov	r1, r3
 80022c2:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80022c6:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 80022ca:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80022ce:	fb04 f303 	mul.w	r3, r4, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80022d8:	6019      	str	r1, [r3, #0]
            sam_k[i].tri_Y /= tmp;
 80022da:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80022de:	f103 0305 	add.w	r3, r3, #5
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 80022e8:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 80022ec:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002300:	f102 0205 	add.w	r2, r2, #5
 8002304:	7814      	ldrb	r4, [r2, #0]
 8002306:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 800230a:	f102 0218 	add.w	r2, r2, #24
 800230e:	6811      	ldr	r1, [r2, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fe07 	bl	8000f24 <__aeabi_fdiv>
 8002316:	4603      	mov	r3, r0
 8002318:	4619      	mov	r1, r3
 800231a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800231e:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8002322:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002326:	fb04 f303 	mul.w	r3, r4, r3
 800232a:	4413      	add	r3, r2
 800232c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002330:	6019      	str	r1, [r3, #0]
            sam_k[i].tri_Z /= tmp;
 8002332:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002336:	f103 0305 	add.w	r3, r3, #5
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002340:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002344:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002358:	f102 0205 	add.w	r2, r2, #5
 800235c:	7814      	ldrb	r4, [r2, #0]
 800235e:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8002362:	f102 0218 	add.w	r2, r2, #24
 8002366:	6811      	ldr	r1, [r2, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fddb 	bl	8000f24 <__aeabi_fdiv>
 800236e:	4603      	mov	r3, r0
 8002370:	4619      	mov	r1, r3
 8002372:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002376:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 800237a:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800237e:	fb04 f303 	mul.w	r3, r4, r3
 8002382:	4413      	add	r3, r2
 8002384:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002388:	6019      	str	r1, [r3, #0]
        }
        {
            float tmp = sam_r[i].tri_X + sam_r[i].tri_Y + sam_r[i].tri_Z;
 800238a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800238e:	f103 0305 	add.w	r3, r3, #5
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002398:	f102 0218 	add.w	r2, r2, #24
 800239c:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 80023a0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80023b4:	f103 0305 	add.w	r3, r3, #5
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80023be:	f102 0218 	add.w	r2, r2, #24
 80023c2:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 80023c6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	f7fe fbe8 	bl	8000bac <__addsf3>
 80023dc:	4603      	mov	r3, r0
 80023de:	4618      	mov	r0, r3
 80023e0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80023e4:	f103 0305 	add.w	r3, r3, #5
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80023ee:	f102 0218 	add.w	r2, r2, #24
 80023f2:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 80023f6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4619      	mov	r1, r3
 8002408:	f7fe fbd0 	bl	8000bac <__addsf3>
 800240c:	4603      	mov	r3, r0
 800240e:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8002412:	f102 0214 	add.w	r2, r2, #20
 8002416:	6013      	str	r3, [r2, #0]
            //float tmp = 100 / sam_r[i].tri_Y; //maybe right
            /*normalization*/
            sam_r[i].tri_X /= tmp;
 8002418:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800241c:	f103 0305 	add.w	r3, r3, #5
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002426:	f102 0218 	add.w	r2, r2, #24
 800242a:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 800242e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002442:	f102 0205 	add.w	r2, r2, #5
 8002446:	7814      	ldrb	r4, [r2, #0]
 8002448:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 800244c:	f102 0214 	add.w	r2, r2, #20
 8002450:	6811      	ldr	r1, [r2, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fd66 	bl	8000f24 <__aeabi_fdiv>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002460:	f103 0318 	add.w	r3, r3, #24
 8002464:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 8002468:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800246c:	fb04 f303 	mul.w	r3, r4, r3
 8002470:	4413      	add	r3, r2
 8002472:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002476:	6019      	str	r1, [r3, #0]
            sam_r[i].tri_Y /= tmp;
 8002478:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800247c:	f103 0305 	add.w	r3, r3, #5
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002486:	f102 0218 	add.w	r2, r2, #24
 800248a:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 800248e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80024a2:	f102 0205 	add.w	r2, r2, #5
 80024a6:	7814      	ldrb	r4, [r2, #0]
 80024a8:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80024ac:	f102 0214 	add.w	r2, r2, #20
 80024b0:	6811      	ldr	r1, [r2, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fd36 	bl	8000f24 <__aeabi_fdiv>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4619      	mov	r1, r3
 80024bc:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80024c0:	f103 0318 	add.w	r3, r3, #24
 80024c4:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 80024c8:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80024cc:	fb04 f303 	mul.w	r3, r4, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80024d6:	6019      	str	r1, [r3, #0]
            sam_r[i].tri_Z /= tmp;
 80024d8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80024dc:	f103 0305 	add.w	r3, r3, #5
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80024e6:	f102 0218 	add.w	r2, r2, #24
 80024ea:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 80024ee:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002502:	f102 0205 	add.w	r2, r2, #5
 8002506:	7814      	ldrb	r4, [r2, #0]
 8002508:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 800250c:	f102 0214 	add.w	r2, r2, #20
 8002510:	6811      	ldr	r1, [r2, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fd06 	bl	8000f24 <__aeabi_fdiv>
 8002518:	4603      	mov	r3, r0
 800251a:	4619      	mov	r1, r3
 800251c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002520:	f103 0318 	add.w	r3, r3, #24
 8002524:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 8002528:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800252c:	fb04 f303 	mul.w	r3, r4, r3
 8002530:	4413      	add	r3, r2
 8002532:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002536:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8002538:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800253c:	f103 0305 	add.w	r3, r3, #5
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	3301      	adds	r3, #1
 8002544:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002548:	f102 0205 	add.w	r2, r2, #5
 800254c:	7013      	strb	r3, [r2, #0]
 800254e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002552:	f103 0305 	add.w	r3, r3, #5
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b07      	cmp	r3, #7
 800255a:	f67f ab98 	bls.w	8001c8e <Calcute_Ra+0xb06>
        }
    }

    /*calculate XYZ of reference light*/
    for(uint8_t i = 0; i < 81; i++)
 800255e:	2300      	movs	r3, #0
 8002560:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002564:	f102 0203 	add.w	r2, r2, #3
 8002568:	7013      	strb	r3, [r2, #0]
 800256a:	e0dc      	b.n	8002726 <Calcute_Ra+0x159e>
    {
        ref_light.tri_X += ref_light.spectral_sta[i] * _x_lamda_sta[i] * (380 + 5 * i);
 800256c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002570:	f103 0318 	add.w	r3, r3, #24
 8002574:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002578:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 800257c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002580:	f103 0303 	add.w	r3, r3, #3
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 800258a:	f102 0218 	add.w	r2, r2, #24
 800258e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002592:	330a      	adds	r3, #10
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800259e:	f103 0303 	add.w	r3, r3, #3
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	49ca      	ldr	r1, [pc, #808]	; (80028d0 <Calcute_Ra+0x1748>)
 80025a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4610      	mov	r0, r2
 80025ae:	f7fe fc05 	bl	8000dbc <__aeabi_fmul>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461d      	mov	r5, r3
 80025b6:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80025ba:	f103 0303 	add.w	r3, r3, #3
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fba2 	bl	8000d14 <__aeabi_i2f>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4619      	mov	r1, r3
 80025d4:	4628      	mov	r0, r5
 80025d6:	f7fe fbf1 	bl	8000dbc <__aeabi_fmul>
 80025da:	4603      	mov	r3, r0
 80025dc:	4619      	mov	r1, r3
 80025de:	4620      	mov	r0, r4
 80025e0:	f7fe fae4 	bl	8000bac <__addsf3>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80025ec:	f103 0318 	add.w	r3, r3, #24
 80025f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80025f4:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ref_light.tri_Y += ref_light.spectral_sta[i] * _y_lamda_sta[i] * (380 + 5 * i);
 80025f8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80025fc:	f103 0318 	add.w	r3, r3, #24
 8002600:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002604:	f8d3 417c 	ldr.w	r4, [r3, #380]	; 0x17c
 8002608:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800260c:	f103 0303 	add.w	r3, r3, #3
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002616:	f102 0218 	add.w	r2, r2, #24
 800261a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800261e:	330a      	adds	r3, #10
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800262a:	f103 0303 	add.w	r3, r3, #3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	49a8      	ldr	r1, [pc, #672]	; (80028d4 <Calcute_Ra+0x174c>)
 8002632:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f7fe fbbf 	bl	8000dbc <__aeabi_fmul>
 800263e:	4603      	mov	r3, r0
 8002640:	461d      	mov	r5, r3
 8002642:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002646:	f103 0303 	add.w	r3, r3, #3
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fb5c 	bl	8000d14 <__aeabi_i2f>
 800265c:	4603      	mov	r3, r0
 800265e:	4619      	mov	r1, r3
 8002660:	4628      	mov	r0, r5
 8002662:	f7fe fbab 	bl	8000dbc <__aeabi_fmul>
 8002666:	4603      	mov	r3, r0
 8002668:	4619      	mov	r1, r3
 800266a:	4620      	mov	r0, r4
 800266c:	f7fe fa9e 	bl	8000bac <__addsf3>
 8002670:	4603      	mov	r3, r0
 8002672:	461a      	mov	r2, r3
 8002674:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002678:	f103 0318 	add.w	r3, r3, #24
 800267c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002680:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ref_light.tri_Z += ref_light.spectral_sta[i] * _z_lamda_sta[i] * (380 + 5 * i);
 8002684:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002688:	f103 0318 	add.w	r3, r3, #24
 800268c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002690:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 8002694:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002698:	f103 0303 	add.w	r3, r3, #3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80026a2:	f102 0218 	add.w	r2, r2, #24
 80026a6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80026aa:	330a      	adds	r3, #10
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80026b6:	f103 0303 	add.w	r3, r3, #3
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4986      	ldr	r1, [pc, #536]	; (80028d8 <Calcute_Ra+0x1750>)
 80026be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fe fb79 	bl	8000dbc <__aeabi_fmul>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461d      	mov	r5, r3
 80026ce:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80026d2:	f103 0303 	add.w	r3, r3, #3
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fb16 	bl	8000d14 <__aeabi_i2f>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4619      	mov	r1, r3
 80026ec:	4628      	mov	r0, r5
 80026ee:	f7fe fb65 	bl	8000dbc <__aeabi_fmul>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4619      	mov	r1, r3
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7fe fa58 	bl	8000bac <__addsf3>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461a      	mov	r2, r3
 8002700:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002704:	f103 0318 	add.w	r3, r3, #24
 8002708:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800270c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    for(uint8_t i = 0; i < 81; i++)
 8002710:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002714:	f103 0303 	add.w	r3, r3, #3
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002720:	f102 0203 	add.w	r2, r2, #3
 8002724:	7013      	strb	r3, [r2, #0]
 8002726:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800272a:	f103 0303 	add.w	r3, r3, #3
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b50      	cmp	r3, #80	; 0x50
 8002732:	f67f af1b 	bls.w	800256c <Calcute_Ra+0x13e4>
    }
    /*normalzation*/
    {
        float tmp = ref_light.tri_X + ref_light.tri_Y + ref_light.tri_Z;
 8002736:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800273a:	f103 0318 	add.w	r3, r3, #24
 800273e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002742:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002746:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800274a:	f103 0318 	add.w	r3, r3, #24
 800274e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002752:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f7fe fa27 	bl	8000bac <__addsf3>
 800275e:	4603      	mov	r3, r0
 8002760:	461a      	mov	r2, r3
 8002762:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002766:	f103 0318 	add.w	r3, r3, #24
 800276a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800276e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f7fe fa19 	bl	8000bac <__addsf3>
 800277a:	4603      	mov	r3, r0
 800277c:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8002780:	f102 021c 	add.w	r2, r2, #28
 8002784:	6013      	str	r3, [r2, #0]
        //float tmp = 100 / ref_light.tri_Y; //maybe right
        ref_light.tri_X /= tmp;
 8002786:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800278a:	f103 0318 	add.w	r3, r3, #24
 800278e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002792:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002796:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 800279a:	f102 021c 	add.w	r2, r2, #28
 800279e:	6811      	ldr	r1, [r2, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fbbf 	bl	8000f24 <__aeabi_fdiv>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80027ae:	f103 0318 	add.w	r3, r3, #24
 80027b2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027b6:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
        ref_light.tri_Y /= tmp;
 80027ba:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80027be:	f103 0318 	add.w	r3, r3, #24
 80027c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027c6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80027ca:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 80027ce:	f102 021c 	add.w	r2, r2, #28
 80027d2:	6811      	ldr	r1, [r2, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe fba5 	bl	8000f24 <__aeabi_fdiv>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80027e2:	f103 0318 	add.w	r3, r3, #24
 80027e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027ea:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        ref_light.tri_Z /= tmp;
 80027ee:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80027f2:	f103 0318 	add.w	r3, r3, #24
 80027f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80027fa:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80027fe:	f507 52d9 	add.w	r2, r7, #6944	; 0x1b20
 8002802:	f102 021c 	add.w	r2, r2, #28
 8002806:	6811      	ldr	r1, [r2, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fb8b 	bl	8000f24 <__aeabi_fdiv>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002816:	f103 0318 	add.w	r3, r3, #24
 800281a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800281e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    }

    /*calculate chroma coordinate*/
    /*test_light don't need to correct*/
    ATTRS.param_u = 4 * ATTRS.tri_X / (ATTRS.tri_X + 15 * ATTRS.tri_Y + 3 * ATTRS.tri_Z);
 8002822:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002826:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002830:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe fac1 	bl	8000dbc <__aeabi_fmul>
 800283a:	4603      	mov	r3, r0
 800283c:	461d      	mov	r5, r3
 800283e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002842:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 800284c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002850:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800285a:	4920      	ldr	r1, [pc, #128]	; (80028dc <Calcute_Ra+0x1754>)
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe faad 	bl	8000dbc <__aeabi_fmul>
 8002862:	4603      	mov	r3, r0
 8002864:	4619      	mov	r1, r3
 8002866:	4620      	mov	r0, r4
 8002868:	f7fe f9a0 	bl	8000bac <__addsf3>
 800286c:	4603      	mov	r3, r0
 800286e:	461c      	mov	r4, r3
 8002870:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002874:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800287e:	4918      	ldr	r1, [pc, #96]	; (80028e0 <Calcute_Ra+0x1758>)
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fa9b 	bl	8000dbc <__aeabi_fmul>
 8002886:	4603      	mov	r3, r0
 8002888:	4619      	mov	r1, r3
 800288a:	4620      	mov	r0, r4
 800288c:	f7fe f98e 	bl	8000bac <__addsf3>
 8002890:	4603      	mov	r3, r0
 8002892:	4619      	mov	r1, r3
 8002894:	4628      	mov	r0, r5
 8002896:	f7fe fb45 	bl	8000f24 <__aeabi_fdiv>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80028a2:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    ATTRS.param_v = 6 * ATTRS.tri_Y / (ATTRS.tri_X + 15 * ATTRS.tri_Y + 3 * ATTRS.tri_Z);
 80028ac:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80028b0:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80028ba:	490a      	ldr	r1, [pc, #40]	; (80028e4 <Calcute_Ra+0x175c>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fa7d 	bl	8000dbc <__aeabi_fmul>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461d      	mov	r5, r3
 80028c6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80028ca:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80028ce:	e00b      	b.n	80028e8 <Calcute_Ra+0x1760>
 80028d0:	08008e84 	.word	0x08008e84
 80028d4:	08008fec 	.word	0x08008fec
 80028d8:	08009154 	.word	0x08009154
 80028dc:	41700000 	.word	0x41700000
 80028e0:	40400000 	.word	0x40400000
 80028e4:	40c00000 	.word	0x40c00000
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8d3 4180 	ldr.w	r4, [r3, #384]	; 0x180
 80028ee:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80028f2:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80028fc:	49a8      	ldr	r1, [pc, #672]	; (8002ba0 <Calcute_Ra+0x1a18>)
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fa5c 	bl	8000dbc <__aeabi_fmul>
 8002904:	4603      	mov	r3, r0
 8002906:	4619      	mov	r1, r3
 8002908:	4620      	mov	r0, r4
 800290a:	f7fe f94f 	bl	8000bac <__addsf3>
 800290e:	4603      	mov	r3, r0
 8002910:	461c      	mov	r4, r3
 8002912:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002916:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8002920:	49a0      	ldr	r1, [pc, #640]	; (8002ba4 <Calcute_Ra+0x1a1c>)
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fa4a 	bl	8000dbc <__aeabi_fmul>
 8002928:	4603      	mov	r3, r0
 800292a:	4619      	mov	r1, r3
 800292c:	4620      	mov	r0, r4
 800292e:	f7fe f93d 	bl	8000bac <__addsf3>
 8002932:	4603      	mov	r3, r0
 8002934:	4619      	mov	r1, r3
 8002936:	4628      	mov	r0, r5
 8002938:	f7fe faf4 	bl	8000f24 <__aeabi_fdiv>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002944:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

    /*reference light don't need correction*/
    ref_light.param_u = 4 * ref_light.tri_X / (ref_light.tri_X + 15 * ref_light.tri_Y + 3 * ref_light.tri_Z);
 800294e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002952:	f103 0318 	add.w	r3, r3, #24
 8002956:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800295a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800295e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fa2a 	bl	8000dbc <__aeabi_fmul>
 8002968:	4603      	mov	r3, r0
 800296a:	461d      	mov	r5, r3
 800296c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002970:	f103 0318 	add.w	r3, r3, #24
 8002974:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002978:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 800297c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002980:	f103 0318 	add.w	r3, r3, #24
 8002984:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002988:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800298c:	4984      	ldr	r1, [pc, #528]	; (8002ba0 <Calcute_Ra+0x1a18>)
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fa14 	bl	8000dbc <__aeabi_fmul>
 8002994:	4603      	mov	r3, r0
 8002996:	4619      	mov	r1, r3
 8002998:	4620      	mov	r0, r4
 800299a:	f7fe f907 	bl	8000bac <__addsf3>
 800299e:	4603      	mov	r3, r0
 80029a0:	461c      	mov	r4, r3
 80029a2:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80029a6:	f103 0318 	add.w	r3, r3, #24
 80029aa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029ae:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80029b2:	497c      	ldr	r1, [pc, #496]	; (8002ba4 <Calcute_Ra+0x1a1c>)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fa01 	bl	8000dbc <__aeabi_fmul>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4619      	mov	r1, r3
 80029be:	4620      	mov	r0, r4
 80029c0:	f7fe f8f4 	bl	8000bac <__addsf3>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4628      	mov	r0, r5
 80029ca:	f7fe faab 	bl	8000f24 <__aeabi_fdiv>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80029d6:	f103 0318 	add.w	r3, r3, #24
 80029da:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029de:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    ref_light.param_v = 6 * ref_light.tri_Y / (ref_light.tri_X + 15 * ref_light.tri_Y + 3 * ref_light.tri_Z);
 80029e2:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80029e6:	f103 0318 	add.w	r3, r3, #24
 80029ea:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80029ee:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80029f2:	496d      	ldr	r1, [pc, #436]	; (8002ba8 <Calcute_Ra+0x1a20>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe f9e1 	bl	8000dbc <__aeabi_fmul>
 80029fa:	4603      	mov	r3, r0
 80029fc:	461d      	mov	r5, r3
 80029fe:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002a02:	f103 0318 	add.w	r3, r3, #24
 8002a06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a0a:	f8d3 4178 	ldr.w	r4, [r3, #376]	; 0x178
 8002a0e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002a12:	f103 0318 	add.w	r3, r3, #24
 8002a16:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a1a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002a1e:	4960      	ldr	r1, [pc, #384]	; (8002ba0 <Calcute_Ra+0x1a18>)
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fe f9cb 	bl	8000dbc <__aeabi_fmul>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f7fe f8be 	bl	8000bac <__addsf3>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461c      	mov	r4, r3
 8002a34:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002a38:	f103 0318 	add.w	r3, r3, #24
 8002a3c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a40:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002a44:	4957      	ldr	r1, [pc, #348]	; (8002ba4 <Calcute_Ra+0x1a1c>)
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe f9b8 	bl	8000dbc <__aeabi_fmul>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7fe f8ab 	bl	8000bac <__addsf3>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4628      	mov	r0, r5
 8002a5c:	f7fe fa62 	bl	8000f24 <__aeabi_fdiv>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002a68:	f103 0318 	add.w	r3, r3, #24
 8002a6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a70:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

    /*calculate delta_c*/
    delta_c = sqrt((ATTRS.param_u - ref_light.param_u) * (ATTRS.param_u - ref_light.param_u) + 
 8002a74:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002a78:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002a82:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002a86:	f103 0318 	add.w	r3, r3, #24
 8002a8a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a8e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f7fe f887 	bl	8000ba8 <__aeabi_fsub>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461c      	mov	r4, r3
 8002a9e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002aa2:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8002aac:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002ab0:	f103 0318 	add.w	r3, r3, #24
 8002ab4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ab8:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002abc:	4619      	mov	r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f7fe f872 	bl	8000ba8 <__aeabi_fsub>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7fe f977 	bl	8000dbc <__aeabi_fmul>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461c      	mov	r4, r3
                    (ATTRS.param_v - ref_light.param_v) * (ATTRS.param_v - ref_light.param_v));
 8002ad2:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002ad6:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002ae0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002ae4:	f103 0318 	add.w	r3, r3, #24
 8002ae8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002aec:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f7fe f858 	bl	8000ba8 <__aeabi_fsub>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461d      	mov	r5, r3
 8002afc:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002b00:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8002b0a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002b0e:	f103 0318 	add.w	r3, r3, #24
 8002b12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b16:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f7fe f843 	bl	8000ba8 <__aeabi_fsub>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4619      	mov	r1, r3
 8002b26:	4628      	mov	r0, r5
 8002b28:	f7fe f948 	bl	8000dbc <__aeabi_fmul>
 8002b2c:	4603      	mov	r3, r0
    delta_c = sqrt((ATTRS.param_u - ref_light.param_u) * (ATTRS.param_u - ref_light.param_u) + 
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7fe f83b 	bl	8000bac <__addsf3>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fcd9 	bl	80004f0 <__aeabi_f2d>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	f005 fff5 	bl	8008b34 <sqrt>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7fd ffd5 	bl	8000b00 <__aeabi_d2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8002b5c:	f102 0218 	add.w	r2, r2, #24
 8002b60:	6013      	str	r3, [r2, #0]
    if(delta_c > 0.0054)
 8002b62:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8002b66:	f103 0318 	add.w	r3, r3, #24
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	f7fd fcc0 	bl	80004f0 <__aeabi_f2d>
 8002b70:	a309      	add	r3, pc, #36	; (adr r3, 8002b98 <Calcute_Ra+0x1a10>)
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	f7fd ffa3 	bl	8000ac0 <__aeabi_dcmpgt>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <Calcute_Ra+0x1a00>
    {
        return -1;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
 8002b84:	f001 b8d4 	b.w	8003d30 <Calcute_Ra+0x2ba8>

    }

    /*color sample under test_light and refer_light*/
    for(uint8_t i = 0; i < 8; i++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002b8e:	f102 0202 	add.w	r2, r2, #2
 8002b92:	7013      	strb	r3, [r2, #0]
 8002b94:	e20a      	b.n	8002fac <Calcute_Ra+0x1e24>
 8002b96:	bf00      	nop
 8002b98:	765fd8ae 	.word	0x765fd8ae
 8002b9c:	3f761e4f 	.word	0x3f761e4f
 8002ba0:	41700000 	.word	0x41700000
 8002ba4:	40400000 	.word	0x40400000
 8002ba8:	40c00000 	.word	0x40c00000
    {
        /*i represents the number of one sample*/ 
        /*under test_light*/
        sam_k[i].param_u = 4 * sam_k[i].tri_X / (sam_k[i].tri_X + 15 * sam_k[i].tri_Y + 3 * sam_k[i].tri_Z);
 8002bac:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002bb0:	f103 0302 	add.w	r3, r3, #2
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002bba:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002bbe:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f8f2 	bl	8000dbc <__aeabi_fmul>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461d      	mov	r5, r3
 8002bdc:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002be0:	f103 0302 	add.w	r3, r3, #2
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002bea:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002bee:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bfc:	681c      	ldr	r4, [r3, #0]
 8002bfe:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002c02:	f103 0302 	add.w	r3, r3, #2
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002c0c:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002c10:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	49c9      	ldr	r1, [pc, #804]	; (8002f48 <Calcute_Ra+0x1dc0>)
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f8ca 	bl	8000dbc <__aeabi_fmul>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7fd ffbd 	bl	8000bac <__addsf3>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461c      	mov	r4, r3
 8002c36:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002c3a:	f103 0302 	add.w	r3, r3, #2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002c44:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002c48:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	49bc      	ldr	r1, [pc, #752]	; (8002f4c <Calcute_Ra+0x1dc4>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe f8ae 	bl	8000dbc <__aeabi_fmul>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4619      	mov	r1, r3
 8002c64:	4620      	mov	r0, r4
 8002c66:	f7fd ffa1 	bl	8000bac <__addsf3>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002c70:	f102 0202 	add.w	r2, r2, #2
 8002c74:	7814      	ldrb	r4, [r2, #0]
 8002c76:	4619      	mov	r1, r3
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f7fe f953 	bl	8000f24 <__aeabi_fdiv>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4619      	mov	r1, r3
 8002c82:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002c86:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8002c8a:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002c8e:	fb04 f303 	mul.w	r3, r4, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002c98:	6019      	str	r1, [r3, #0]
        sam_k[i].param_v = 6 * sam_k[i].tri_Y / (sam_k[i].tri_X + 15 * sam_k[i].tri_Y + 3 * sam_k[i].tri_Z);
 8002c9a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002c9e:	f103 0302 	add.w	r3, r3, #2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002ca8:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002cac:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	49a4      	ldr	r1, [pc, #656]	; (8002f50 <Calcute_Ra+0x1dc8>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe f87c 	bl	8000dbc <__aeabi_fmul>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002ccc:	f103 0302 	add.w	r3, r3, #2
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002cd6:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002cda:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ce8:	681c      	ldr	r4, [r3, #0]
 8002cea:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002cee:	f103 0302 	add.w	r3, r3, #2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002cf8:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002cfc:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	498e      	ldr	r1, [pc, #568]	; (8002f48 <Calcute_Ra+0x1dc0>)
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe f854 	bl	8000dbc <__aeabi_fmul>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4619      	mov	r1, r3
 8002d18:	4620      	mov	r0, r4
 8002d1a:	f7fd ff47 	bl	8000bac <__addsf3>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461c      	mov	r4, r3
 8002d22:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002d26:	f103 0302 	add.w	r3, r3, #2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8002d30:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8002d34:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4981      	ldr	r1, [pc, #516]	; (8002f4c <Calcute_Ra+0x1dc4>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f838 	bl	8000dbc <__aeabi_fmul>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4620      	mov	r0, r4
 8002d52:	f7fd ff2b 	bl	8000bac <__addsf3>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002d5c:	f102 0202 	add.w	r2, r2, #2
 8002d60:	7814      	ldrb	r4, [r2, #0]
 8002d62:	4619      	mov	r1, r3
 8002d64:	4628      	mov	r0, r5
 8002d66:	f7fe f8dd 	bl	8000f24 <__aeabi_fdiv>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002d72:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8002d76:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002d7a:	fb04 f303 	mul.w	r3, r4, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8002d84:	6019      	str	r1, [r3, #0]
        /*under refer_light*/
        sam_r[i].param_u = 4 * sam_r[i].tri_X / (sam_r[i].tri_X + 15 * sam_r[i].tri_Y + 3 * sam_r[i].tri_Z);
 8002d86:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002d8a:	f103 0302 	add.w	r3, r3, #2
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002d94:	f102 0218 	add.w	r2, r2, #24
 8002d98:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002d9c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe f803 	bl	8000dbc <__aeabi_fmul>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461d      	mov	r5, r3
 8002dba:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002dbe:	f103 0302 	add.w	r3, r3, #2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002dc8:	f102 0218 	add.w	r2, r2, #24
 8002dcc:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002dd0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002de4:	f103 0302 	add.w	r3, r3, #2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002dee:	f102 0218 	add.w	r2, r2, #24
 8002df2:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002df6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4950      	ldr	r1, [pc, #320]	; (8002f48 <Calcute_Ra+0x1dc0>)
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd ffd7 	bl	8000dbc <__aeabi_fmul>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4619      	mov	r1, r3
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7fd feca 	bl	8000bac <__addsf3>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461c      	mov	r4, r3
 8002e1c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002e20:	f103 0302 	add.w	r3, r3, #2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002e2a:	f102 0218 	add.w	r2, r2, #24
 8002e2e:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002e32:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4942      	ldr	r1, [pc, #264]	; (8002f4c <Calcute_Ra+0x1dc4>)
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd ffb9 	bl	8000dbc <__aeabi_fmul>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7fd feac 	bl	8000bac <__addsf3>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002e5a:	f102 0202 	add.w	r2, r2, #2
 8002e5e:	7814      	ldrb	r4, [r2, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	4628      	mov	r0, r5
 8002e64:	f7fe f85e 	bl	8000f24 <__aeabi_fdiv>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002e70:	f103 0318 	add.w	r3, r3, #24
 8002e74:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 8002e78:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002e7c:	fb04 f303 	mul.w	r3, r4, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8002e86:	6019      	str	r1, [r3, #0]
        sam_r[i].param_v = 6 * sam_r[i].tri_Y / (sam_r[i].tri_X + 15 * sam_r[i].tri_Y + 3 * sam_r[i].tri_Z);
 8002e88:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002e8c:	f103 0302 	add.w	r3, r3, #2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002e96:	f102 0218 	add.w	r2, r2, #24
 8002e9a:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002e9e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002ea2:	fb01 f303 	mul.w	r3, r1, r3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4928      	ldr	r1, [pc, #160]	; (8002f50 <Calcute_Ra+0x1dc8>)
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd ff83 	bl	8000dbc <__aeabi_fmul>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461d      	mov	r5, r3
 8002eba:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002ebe:	f103 0302 	add.w	r3, r3, #2
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002ec8:	f102 0218 	add.w	r2, r2, #24
 8002ecc:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002ed0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ede:	681c      	ldr	r4, [r3, #0]
 8002ee0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002ee4:	f103 0302 	add.w	r3, r3, #2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002eee:	f102 0218 	add.w	r2, r2, #24
 8002ef2:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002ef6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4910      	ldr	r1, [pc, #64]	; (8002f48 <Calcute_Ra+0x1dc0>)
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd ff57 	bl	8000dbc <__aeabi_fmul>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4619      	mov	r1, r3
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7fd fe4a 	bl	8000bac <__addsf3>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461c      	mov	r4, r3
 8002f1c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002f20:	f103 0302 	add.w	r3, r3, #2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002f2a:	f102 0218 	add.w	r2, r2, #24
 8002f2e:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8002f32:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4902      	ldr	r1, [pc, #8]	; (8002f4c <Calcute_Ra+0x1dc4>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	e005      	b.n	8002f54 <Calcute_Ra+0x1dcc>
 8002f48:	41700000 	.word	0x41700000
 8002f4c:	40400000 	.word	0x40400000
 8002f50:	40c00000 	.word	0x40c00000
 8002f54:	f7fd ff32 	bl	8000dbc <__aeabi_fmul>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7fd fe25 	bl	8000bac <__addsf3>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002f68:	f102 0202 	add.w	r2, r2, #2
 8002f6c:	7814      	ldrb	r4, [r2, #0]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4628      	mov	r0, r5
 8002f72:	f7fd ffd7 	bl	8000f24 <__aeabi_fdiv>
 8002f76:	4603      	mov	r3, r0
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002f7e:	f103 0318 	add.w	r3, r3, #24
 8002f82:	f5a3 6263 	sub.w	r2, r3, #3632	; 0xe30
 8002f86:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8002f8a:	fb04 f303 	mul.w	r3, r4, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8002f94:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8002f96:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002f9a:	f103 0302 	add.w	r3, r3, #2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8002fa6:	f102 0202 	add.w	r2, r2, #2
 8002faa:	7013      	strb	r3, [r2, #0]
 8002fac:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8002fb0:	f103 0302 	add.w	r3, r3, #2
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b07      	cmp	r3, #7
 8002fb8:	f67f adf8 	bls.w	8002bac <Calcute_Ra+0x1a24>
    }

    /*third, color sample under test_light correction*/
    /*calculate parameter that calculation needs*/
    /*test_light*/
    ATTRS.param_c = (4 - ATTRS.param_u - 10 * ATTRS.param_v) / ATTRS.param_v;
 8002fbc:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002fc0:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8002fd0:	f7fd fdea 	bl	8000ba8 <__aeabi_fsub>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	461c      	mov	r4, r3
 8002fd8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8002fdc:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002fe6:	498a      	ldr	r1, [pc, #552]	; (8003210 <Calcute_Ra+0x2088>)
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fee7 	bl	8000dbc <__aeabi_fmul>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7fd fdd8 	bl	8000ba8 <__aeabi_fsub>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003000:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f7fd ff89 	bl	8000f24 <__aeabi_fdiv>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800301a:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    ATTRS.param_d = (1.708 * ATTRS.param_v + 0.404 - 1.481 * ATTRS.param_u) / ATTRS.param_v;
 8003024:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003028:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fa5c 	bl	80004f0 <__aeabi_f2d>
 8003038:	a36f      	add	r3, pc, #444	; (adr r3, 80031f8 <Calcute_Ra+0x2070>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd faaf 	bl	80005a0 <__aeabi_dmul>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	a36d      	add	r3, pc, #436	; (adr r3, 8003200 <Calcute_Ra+0x2078>)
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f7fd f8f0 	bl	8000234 <__adddf3>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003060:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fa40 	bl	80004f0 <__aeabi_f2d>
 8003070:	a365      	add	r3, pc, #404	; (adr r3, 8003208 <Calcute_Ra+0x2080>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f7fd fa93 	bl	80005a0 <__aeabi_dmul>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4620      	mov	r0, r4
 8003080:	4629      	mov	r1, r5
 8003082:	f7fd f8d5 	bl	8000230 <__aeabi_dsub>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4614      	mov	r4, r2
 800308c:	461d      	mov	r5, r3
 800308e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003092:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fa27 	bl	80004f0 <__aeabi_f2d>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd fba3 	bl	80007f4 <__aeabi_ddiv>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fd fd23 	bl	8000b00 <__aeabi_d2f>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80030c0:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    /*ref_light*/
    ref_light.param_c = (4 - ref_light.param_u - 10 * ref_light.param_v) / ref_light.param_v;
 80030ca:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80030ce:	f103 0318 	add.w	r3, r3, #24
 80030d2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030d6:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80030da:	4619      	mov	r1, r3
 80030dc:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80030e0:	f7fd fd62 	bl	8000ba8 <__aeabi_fsub>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461c      	mov	r4, r3
 80030e8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80030ec:	f103 0318 	add.w	r3, r3, #24
 80030f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80030f4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80030f8:	4945      	ldr	r1, [pc, #276]	; (8003210 <Calcute_Ra+0x2088>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd fe5e 	bl	8000dbc <__aeabi_fmul>
 8003100:	4603      	mov	r3, r0
 8003102:	4619      	mov	r1, r3
 8003104:	4620      	mov	r0, r4
 8003106:	f7fd fd4f 	bl	8000ba8 <__aeabi_fsub>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003112:	f103 0318 	add.w	r3, r3, #24
 8003116:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800311a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f7fd feff 	bl	8000f24 <__aeabi_fdiv>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800312e:	f103 0318 	add.w	r3, r3, #24
 8003132:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003136:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    ref_light.param_d = (1.708 * ref_light.param_v + 0.404 - 1.481 * ref_light.param_u) / ref_light.param_v;
 800313a:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800313e:	f103 0318 	add.w	r3, r3, #24
 8003142:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003146:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd f9d0 	bl	80004f0 <__aeabi_f2d>
 8003150:	a329      	add	r3, pc, #164	; (adr r3, 80031f8 <Calcute_Ra+0x2070>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f7fd fa23 	bl	80005a0 <__aeabi_dmul>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	a327      	add	r3, pc, #156	; (adr r3, 8003200 <Calcute_Ra+0x2078>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd f864 	bl	8000234 <__adddf3>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4614      	mov	r4, r2
 8003172:	461d      	mov	r5, r3
 8003174:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003178:	f103 0318 	add.w	r3, r3, #24
 800317c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003180:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f9b3 	bl	80004f0 <__aeabi_f2d>
 800318a:	a31f      	add	r3, pc, #124	; (adr r3, 8003208 <Calcute_Ra+0x2080>)
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f7fd fa06 	bl	80005a0 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f7fd f848 	bl	8000230 <__aeabi_dsub>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4614      	mov	r4, r2
 80031a6:	461d      	mov	r5, r3
 80031a8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80031ac:	f103 0318 	add.w	r3, r3, #24
 80031b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031b4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fd f999 	bl	80004f0 <__aeabi_f2d>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd fb15 	bl	80007f4 <__aeabi_ddiv>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd fc95 	bl	8000b00 <__aeabi_d2f>
 80031d6:	4602      	mov	r2, r0
 80031d8:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80031dc:	f103 0318 	add.w	r3, r3, #24
 80031e0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80031e4:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    /*color samples under test_light, does not need values that under refer_light*/
    for(uint8_t i = 0; i < 8; i++)
 80031e8:	2300      	movs	r3, #0
 80031ea:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80031ee:	f102 0201 	add.w	r2, r2, #1
 80031f2:	7013      	strb	r3, [r2, #0]
 80031f4:	e0ef      	b.n	80033d6 <Calcute_Ra+0x224e>
 80031f6:	bf00      	nop
 80031f8:	ced91687 	.word	0xced91687
 80031fc:	3ffb53f7 	.word	0x3ffb53f7
 8003200:	d0e56042 	.word	0xd0e56042
 8003204:	3fd9db22 	.word	0x3fd9db22
 8003208:	0e560419 	.word	0x0e560419
 800320c:	3ff7b22d 	.word	0x3ff7b22d
 8003210:	41200000 	.word	0x41200000
    {
        sam_k[i].param_c = (4 - sam_k[i].param_u - 10 * sam_k[i].param_v) / sam_k[i].param_v;
 8003214:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003218:	f103 0301 	add.w	r3, r3, #1
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8003222:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8003226:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4619      	mov	r1, r3
 8003238:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 800323c:	f7fd fcb4 	bl	8000ba8 <__aeabi_fsub>
 8003240:	4603      	mov	r3, r0
 8003242:	461c      	mov	r4, r3
 8003244:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003248:	f103 0301 	add.w	r3, r3, #1
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8003252:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8003256:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4968      	ldr	r1, [pc, #416]	; (8003408 <Calcute_Ra+0x2280>)
 8003268:	4618      	mov	r0, r3
 800326a:	f7fd fda7 	bl	8000dbc <__aeabi_fmul>
 800326e:	4603      	mov	r3, r0
 8003270:	4619      	mov	r1, r3
 8003272:	4620      	mov	r0, r4
 8003274:	f7fd fc98 	bl	8000ba8 <__aeabi_fsub>
 8003278:	4603      	mov	r3, r0
 800327a:	4618      	mov	r0, r3
 800327c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003280:	f103 0301 	add.w	r3, r3, #1
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 800328a:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 800328e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003292:	fb01 f303 	mul.w	r3, r1, r3
 8003296:	4413      	add	r3, r2
 8003298:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80032a2:	f102 0201 	add.w	r2, r2, #1
 80032a6:	7814      	ldrb	r4, [r2, #0]
 80032a8:	4619      	mov	r1, r3
 80032aa:	f7fd fe3b 	bl	8000f24 <__aeabi_fdiv>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4619      	mov	r1, r3
 80032b2:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80032b6:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 80032ba:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80032be:	fb04 f303 	mul.w	r3, r4, r3
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80032c8:	6019      	str	r1, [r3, #0]
        sam_k[i].param_d = (1.708 * sam_k[i].param_v + 0.404 - 1.481 * sam_k[i].param_u) / sam_k[i].param_v;
 80032ca:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80032ce:	f103 0301 	add.w	r3, r3, #1
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 80032d8:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 80032dc:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f8ff 	bl	80004f0 <__aeabi_f2d>
 80032f2:	a33f      	add	r3, pc, #252	; (adr r3, 80033f0 <Calcute_Ra+0x2268>)
 80032f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f8:	f7fd f952 	bl	80005a0 <__aeabi_dmul>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	a33c      	add	r3, pc, #240	; (adr r3, 80033f8 <Calcute_Ra+0x2270>)
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f7fc ff93 	bl	8000234 <__adddf3>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4614      	mov	r4, r2
 8003314:	461d      	mov	r5, r3
 8003316:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800331a:	f103 0301 	add.w	r3, r3, #1
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8003324:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8003328:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f8d9 	bl	80004f0 <__aeabi_f2d>
 800333e:	a330      	add	r3, pc, #192	; (adr r3, 8003400 <Calcute_Ra+0x2278>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd f92c 	bl	80005a0 <__aeabi_dmul>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fc ff6e 	bl	8000230 <__aeabi_dsub>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4614      	mov	r4, r2
 800335a:	461d      	mov	r5, r3
 800335c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003360:	f103 0301 	add.w	r3, r3, #1
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 800336a:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 800336e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f8b6 	bl	80004f0 <__aeabi_f2d>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fd fa32 	bl	80007f4 <__aeabi_ddiv>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 8003398:	f101 0101 	add.w	r1, r1, #1
 800339c:	780c      	ldrb	r4, [r1, #0]
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	f7fd fbad 	bl	8000b00 <__aeabi_d2f>
 80033a6:	4601      	mov	r1, r0
 80033a8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80033ac:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 80033b0:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80033b4:	fb04 f303 	mul.w	r3, r4, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033be:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 80033c0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80033c4:	f103 0301 	add.w	r3, r3, #1
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	3301      	adds	r3, #1
 80033cc:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80033d0:	f102 0201 	add.w	r2, r2, #1
 80033d4:	7013      	strb	r3, [r2, #0]
 80033d6:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80033da:	f103 0301 	add.w	r3, r3, #1
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b07      	cmp	r3, #7
 80033e2:	f67f af17 	bls.w	8003214 <Calcute_Ra+0x208c>
    }
    /*correction*/
    for(uint8_t i = 0; i < 8; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80033ec:	7013      	strb	r3, [r2, #0]
 80033ee:	e1b9      	b.n	8003764 <Calcute_Ra+0x25dc>
 80033f0:	ced91687 	.word	0xced91687
 80033f4:	3ffb53f7 	.word	0x3ffb53f7
 80033f8:	d0e56042 	.word	0xd0e56042
 80033fc:	3fd9db22 	.word	0x3fd9db22
 8003400:	0e560419 	.word	0x0e560419
 8003404:	3ff7b22d 	.word	0x3ff7b22d
 8003408:	41200000 	.word	0x41200000
    {
        sam_k[i].param_u = (10.872 + 0.404 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - 4 * (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d)
 800340c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003410:	f103 0318 	add.w	r3, r3, #24
 8003414:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003418:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800341c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003420:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f7fd fd79 	bl	8000f24 <__aeabi_fdiv>
 8003432:	4603      	mov	r3, r0
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f85b 	bl	80004f0 <__aeabi_f2d>
 800343a:	a3d1      	add	r3, pc, #836	; (adr r3, 8003780 <Calcute_Ra+0x25f8>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f7fd f8ae 	bl	80005a0 <__aeabi_dmul>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8003456:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 800345a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd f840 	bl	80004f0 <__aeabi_f2d>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fd f892 	bl	80005a0 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	a3c0      	add	r3, pc, #768	; (adr r3, 8003788 <Calcute_Ra+0x2600>)
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f7fc fed3 	bl	8000234 <__adddf3>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4614      	mov	r4, r2
 8003494:	461d      	mov	r5, r3
 8003496:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800349a:	f103 0318 	add.w	r3, r3, #24
 800349e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80034a2:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80034a6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80034aa:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f7fd fd34 	bl	8000f24 <__aeabi_fdiv>
 80034bc:	4603      	mov	r3, r0
 80034be:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fc7a 	bl	8000dbc <__aeabi_fmul>
 80034c8:	4603      	mov	r3, r0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 80034d6:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 80034da:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7fd fc66 	bl	8000dbc <__aeabi_fmul>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fc fffc 	bl	80004f0 <__aeabi_f2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4620      	mov	r0, r4
 80034fe:	4629      	mov	r1, r5
 8003500:	f7fc fe96 	bl	8000230 <__aeabi_dsub>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4614      	mov	r4, r2
 800350a:	461d      	mov	r5, r3
                                / (16.518 + 1.481 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d);
 800350c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003510:	f103 0318 	add.w	r3, r3, #24
 8003514:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003518:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 800351c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003520:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7fd fcf9 	bl	8000f24 <__aeabi_fdiv>
 8003532:	4603      	mov	r3, r0
 8003534:	4618      	mov	r0, r3
 8003536:	f7fc ffdb 	bl	80004f0 <__aeabi_f2d>
 800353a:	a395      	add	r3, pc, #596	; (adr r3, 8003790 <Calcute_Ra+0x2608>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fd f82e 	bl	80005a0 <__aeabi_dmul>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4690      	mov	r8, r2
 800354a:	4699      	mov	r9, r3
 800354c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8003556:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 800355a:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc ffc0 	bl	80004f0 <__aeabi_f2d>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4640      	mov	r0, r8
 8003576:	4649      	mov	r1, r9
 8003578:	f7fd f812 	bl	80005a0 <__aeabi_dmul>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	a384      	add	r3, pc, #528	; (adr r3, 8003798 <Calcute_Ra+0x2610>)
 8003586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358a:	f7fc fe53 	bl	8000234 <__adddf3>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4690      	mov	r8, r2
 8003594:	4699      	mov	r9, r3
 8003596:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800359a:	f103 0318 	add.w	r3, r3, #24
 800359e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035a2:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80035a6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80035aa:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f7fd fcb4 	bl	8000f24 <__aeabi_fdiv>
 80035bc:	4603      	mov	r3, r0
 80035be:	4618      	mov	r0, r3
 80035c0:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 80035ca:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 80035ce:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4619      	mov	r1, r3
 80035e0:	f7fd fbec 	bl	8000dbc <__aeabi_fmul>
 80035e4:	4603      	mov	r3, r0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc ff82 	bl	80004f0 <__aeabi_f2d>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4640      	mov	r0, r8
 80035f2:	4649      	mov	r1, r9
 80035f4:	f7fc fe1c 	bl	8000230 <__aeabi_dsub>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4620      	mov	r0, r4
 80035fe:	4629      	mov	r1, r5
 8003600:	f7fd f8f8 	bl	80007f4 <__aeabi_ddiv>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
        sam_k[i].param_u = (10.872 + 0.404 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - 4 * (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d)
 8003608:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 800360c:	780c      	ldrb	r4, [r1, #0]
                                / (16.518 + 1.481 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d);
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	f7fd fa75 	bl	8000b00 <__aeabi_d2f>
 8003616:	4601      	mov	r1, r0
        sam_k[i].param_u = (10.872 + 0.404 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - 4 * (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d)
 8003618:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800361c:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8003620:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8003624:	fb04 f303 	mul.w	r3, r4, r3
 8003628:	4413      	add	r3, r2
 800362a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800362e:	6019      	str	r1, [r3, #0]
        sam_k[i].param_v = 5.520 / (16.518 + 1.481 * (ref_light.param_c / ATTRS.param_c) * sam_k[i].param_c - (ref_light.param_d / ATTRS.param_d) * sam_k[i].param_d);
 8003630:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003634:	f103 0318 	add.w	r3, r3, #24
 8003638:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800363c:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8003640:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003644:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800364e:	4619      	mov	r1, r3
 8003650:	4610      	mov	r0, r2
 8003652:	f7fd fc67 	bl	8000f24 <__aeabi_fdiv>
 8003656:	4603      	mov	r3, r0
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff49 	bl	80004f0 <__aeabi_f2d>
 800365e:	a34c      	add	r3, pc, #304	; (adr r3, 8003790 <Calcute_Ra+0x2608>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc ff9c 	bl	80005a0 <__aeabi_dmul>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4614      	mov	r4, r2
 800366e:	461d      	mov	r5, r3
 8003670:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 800367a:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 800367e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc ff2e 	bl	80004f0 <__aeabi_f2d>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f7fc ff80 	bl	80005a0 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	a33b      	add	r3, pc, #236	; (adr r3, 8003798 <Calcute_Ra+0x2610>)
 80036aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ae:	f7fc fdc1 	bl	8000234 <__adddf3>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4614      	mov	r4, r2
 80036b8:	461d      	mov	r5, r3
 80036ba:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80036be:	f103 0318 	add.w	r3, r3, #24
 80036c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036c6:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80036ca:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80036ce:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f7fd fc22 	bl	8000f24 <__aeabi_fdiv>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 80036ee:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 80036f2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80036f6:	fb01 f303 	mul.w	r3, r1, r3
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	f7fd fb5a 	bl	8000dbc <__aeabi_fmul>
 8003708:	4603      	mov	r3, r0
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc fef0 	bl	80004f0 <__aeabi_f2d>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fc fd8a 	bl	8000230 <__aeabi_dsub>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	a11f      	add	r1, pc, #124	; (adr r1, 80037a0 <Calcute_Ra+0x2618>)
 8003722:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003726:	f7fd f865 	bl	80007f4 <__aeabi_ddiv>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 8003732:	780c      	ldrb	r4, [r1, #0]
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	f7fd f9e2 	bl	8000b00 <__aeabi_d2f>
 800373c:	4601      	mov	r1, r0
 800373e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003742:	f5a3 6229 	sub.w	r2, r3, #2704	; 0xa90
 8003746:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 800374a:	fb04 f303 	mul.w	r3, r4, r3
 800374e:	4413      	add	r3, r2
 8003750:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003754:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 8; i++)
 8003756:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	3301      	adds	r3, #1
 800375e:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 8003762:	7013      	strb	r3, [r2, #0]
 8003764:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b07      	cmp	r3, #7
 800376c:	f67f ae4e 	bls.w	800340c <Calcute_Ra+0x2284>
    }

    /*forth, calculate W, U, V, delta_E to gain Ri then Ra*/
    for(uint8_t i = 0; i < 8; i++)
 8003770:	2300      	movs	r3, #0
 8003772:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8003776:	f102 021f 	add.w	r2, r2, #31
 800377a:	7013      	strb	r3, [r2, #0]
 800377c:	e193      	b.n	8003aa6 <Calcute_Ra+0x291e>
 800377e:	bf00      	nop
 8003780:	d0e56042 	.word	0xd0e56042
 8003784:	3fd9db22 	.word	0x3fd9db22
 8003788:	c8b43958 	.word	0xc8b43958
 800378c:	4025be76 	.word	0x4025be76
 8003790:	0e560419 	.word	0x0e560419
 8003794:	3ff7b22d 	.word	0x3ff7b22d
 8003798:	a5e353f8 	.word	0xa5e353f8
 800379c:	4030849b 	.word	0x4030849b
 80037a0:	e147ae14 	.word	0xe147ae14
 80037a4:	4016147a 	.word	0x4016147a
    {
        /*color samples under refer_light*/
        W_r[i] = 25 * pow(sam_r[i].tri_Y, 1 / 3) - 17;
 80037a8:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80037ac:	f103 031f 	add.w	r3, r3, #31
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80037b6:	f102 0218 	add.w	r2, r2, #24
 80037ba:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 80037be:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fc fe8e 	bl	80004f0 <__aeabi_f2d>
 80037d4:	f04f 0000 	mov.w	r0, #0
 80037d8:	49ba      	ldr	r1, [pc, #744]	; (8003ac4 <Calcute_Ra+0x293c>)
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	4bba      	ldr	r3, [pc, #744]	; (8003ac8 <Calcute_Ra+0x2940>)
 80037e0:	f7fc fede 	bl	80005a0 <__aeabi_dmul>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	4bb6      	ldr	r3, [pc, #728]	; (8003acc <Calcute_Ra+0x2944>)
 80037f2:	f7fc fd1d 	bl	8000230 <__aeabi_dsub>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	f507 51da 	add.w	r1, r7, #6976	; 0x1b40
 80037fe:	f101 011f 	add.w	r1, r1, #31
 8003802:	780c      	ldrb	r4, [r1, #0]
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	f7fd f97a 	bl	8000b00 <__aeabi_d2f>
 800380c:	4602      	mov	r2, r0
 800380e:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003812:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 8003816:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        U_r[i] = 13 * W_r[i] * (sam_r[i].param_u - ref_light.param_u);
 800381a:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 800381e:	f103 031f 	add.w	r3, r3, #31
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003828:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 800382c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003830:	49a7      	ldr	r1, [pc, #668]	; (8003ad0 <Calcute_Ra+0x2948>)
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd fac2 	bl	8000dbc <__aeabi_fmul>
 8003838:	4603      	mov	r3, r0
 800383a:	461d      	mov	r5, r3
 800383c:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003840:	f103 031f 	add.w	r3, r3, #31
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 800384a:	f102 0218 	add.w	r2, r2, #24
 800384e:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 8003852:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	4413      	add	r3, r2
 800385c:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003866:	f103 0318 	add.w	r3, r3, #24
 800386a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800386e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003872:	4619      	mov	r1, r3
 8003874:	4610      	mov	r0, r2
 8003876:	f7fd f997 	bl	8000ba8 <__aeabi_fsub>
 800387a:	4603      	mov	r3, r0
 800387c:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8003880:	f102 021f 	add.w	r2, r2, #31
 8003884:	7814      	ldrb	r4, [r2, #0]
 8003886:	4619      	mov	r1, r3
 8003888:	4628      	mov	r0, r5
 800388a:	f7fd fa97 	bl	8000dbc <__aeabi_fmul>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003896:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 800389a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        V_r[i] = 13 * W_r[i] * (sam_r[i].param_v - ref_light.param_v);
 800389e:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80038a2:	f103 031f 	add.w	r3, r3, #31
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80038ac:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 80038b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b4:	4986      	ldr	r1, [pc, #536]	; (8003ad0 <Calcute_Ra+0x2948>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fa80 	bl	8000dbc <__aeabi_fmul>
 80038bc:	4603      	mov	r3, r0
 80038be:	461d      	mov	r5, r3
 80038c0:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80038c4:	f103 031f 	add.w	r3, r3, #31
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	f507 52db 	add.w	r2, r7, #7008	; 0x1b60
 80038ce:	f102 0218 	add.w	r2, r2, #24
 80038d2:	f5a2 6263 	sub.w	r2, r2, #3632	; 0xe30
 80038d6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80038ea:	f103 0318 	add.w	r3, r3, #24
 80038ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038f2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80038f6:	4619      	mov	r1, r3
 80038f8:	4610      	mov	r0, r2
 80038fa:	f7fd f955 	bl	8000ba8 <__aeabi_fsub>
 80038fe:	4603      	mov	r3, r0
 8003900:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8003904:	f102 021f 	add.w	r2, r2, #31
 8003908:	7814      	ldrb	r4, [r2, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	4628      	mov	r0, r5
 800390e:	f7fd fa55 	bl	8000dbc <__aeabi_fmul>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800391a:	f5a3 6337 	sub.w	r3, r3, #2928	; 0xb70
 800391e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

        /*color samples under test_light*/
        W_k[i] = 25 * pow(sam_k[i].tri_Y, 1 / 3) - 17;
 8003922:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003926:	f103 031f 	add.w	r3, r3, #31
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8003930:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8003934:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7fc fdd3 	bl	80004f0 <__aeabi_f2d>
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	495d      	ldr	r1, [pc, #372]	; (8003ac4 <Calcute_Ra+0x293c>)
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	4b5c      	ldr	r3, [pc, #368]	; (8003ac8 <Calcute_Ra+0x2940>)
 8003956:	f7fc fe23 	bl	80005a0 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	4b59      	ldr	r3, [pc, #356]	; (8003acc <Calcute_Ra+0x2944>)
 8003968:	f7fc fc62 	bl	8000230 <__aeabi_dsub>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	f507 51da 	add.w	r1, r7, #6976	; 0x1b40
 8003974:	f101 011f 	add.w	r1, r1, #31
 8003978:	780c      	ldrb	r4, [r1, #0]
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	f7fd f8bf 	bl	8000b00 <__aeabi_d2f>
 8003982:	4602      	mov	r2, r0
 8003984:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003988:	f5a3 632d 	sub.w	r3, r3, #2768	; 0xad0
 800398c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        U_k[i] = 13 * W_k[i] * (sam_k[i].param_u - ref_light.param_u);
 8003990:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003994:	f103 031f 	add.w	r3, r3, #31
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800399e:	f5a3 632d 	sub.w	r3, r3, #2768	; 0xad0
 80039a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a6:	494a      	ldr	r1, [pc, #296]	; (8003ad0 <Calcute_Ra+0x2948>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd fa07 	bl	8000dbc <__aeabi_fmul>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461d      	mov	r5, r3
 80039b2:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 80039b6:	f103 031f 	add.w	r3, r3, #31
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 80039c0:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 80039c4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 80039d8:	f103 0318 	add.w	r3, r3, #24
 80039dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80039e0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f7fd f8de 	bl	8000ba8 <__aeabi_fsub>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 80039f2:	f102 021f 	add.w	r2, r2, #31
 80039f6:	7814      	ldrb	r4, [r2, #0]
 80039f8:	4619      	mov	r1, r3
 80039fa:	4628      	mov	r0, r5
 80039fc:	f7fd f9de 	bl	8000dbc <__aeabi_fmul>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003a08:	f5a3 6331 	sub.w	r3, r3, #2832	; 0xb10
 8003a0c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        V_k[i] = 13 * W_k[i] * (sam_k[i].param_v - ref_light.param_v);
 8003a10:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003a14:	f103 031f 	add.w	r3, r3, #31
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003a1e:	f5a3 632d 	sub.w	r3, r3, #2768	; 0xad0
 8003a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a26:	492a      	ldr	r1, [pc, #168]	; (8003ad0 <Calcute_Ra+0x2948>)
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd f9c7 	bl	8000dbc <__aeabi_fmul>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	461d      	mov	r5, r3
 8003a32:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003a36:	f103 031f 	add.w	r3, r3, #31
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	f607 3278 	addw	r2, r7, #2936	; 0xb78
 8003a40:	f5a2 6229 	sub.w	r2, r2, #2704	; 0xa90
 8003a44:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8003a58:	f103 0318 	add.w	r3, r3, #24
 8003a5c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003a60:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f7fd f89e 	bl	8000ba8 <__aeabi_fsub>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8003a72:	f102 021f 	add.w	r2, r2, #31
 8003a76:	7814      	ldrb	r4, [r2, #0]
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f7fd f99e 	bl	8000dbc <__aeabi_fmul>
 8003a80:	4603      	mov	r3, r0
 8003a82:	461a      	mov	r2, r3
 8003a84:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003a88:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 8003a8c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for(uint8_t i = 0; i < 8; i++)
 8003a90:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003a94:	f103 031f 	add.w	r3, r3, #31
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8003aa0:	f102 021f 	add.w	r2, r2, #31
 8003aa4:	7013      	strb	r3, [r2, #0]
 8003aa6:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003aaa:	f103 031f 	add.w	r3, r3, #31
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b07      	cmp	r3, #7
 8003ab2:	f67f ae79 	bls.w	80037a8 <Calcute_Ra+0x2620>
    }
    /*calculate delta_E and sum of Ri*/
    for(uint8_t i = 0; i < 8; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8003abc:	f102 021e 	add.w	r2, r2, #30
 8003ac0:	7013      	strb	r3, [r2, #0]
 8003ac2:	e113      	b.n	8003cec <Calcute_Ra+0x2b64>
 8003ac4:	3ff00000 	.word	0x3ff00000
 8003ac8:	40390000 	.word	0x40390000
 8003acc:	40310000 	.word	0x40310000
 8003ad0:	41500000 	.word	0x41500000
    {
        delta_E[i] = sqrt( (W_r[i] - W_k[i]) * (W_r[i] - W_k[i]) +
 8003ad4:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003ad8:	f103 031e 	add.w	r3, r3, #30
 8003adc:	781a      	ldrb	r2, [r3, #0]
 8003ade:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003ae2:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 8003ae6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003aea:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003aee:	f103 031e 	add.w	r3, r3, #30
 8003af2:	781a      	ldrb	r2, [r3, #0]
 8003af4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003af8:	f5a3 632d 	sub.w	r3, r3, #2768	; 0xad0
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f7fd f851 	bl	8000ba8 <__aeabi_fsub>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461c      	mov	r4, r3
 8003b0a:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003b0e:	f103 031e 	add.w	r3, r3, #30
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003b18:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 8003b1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b20:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003b24:	f103 031e 	add.w	r3, r3, #30
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003b2e:	f5a3 632d 	sub.w	r3, r3, #2768	; 0xad0
 8003b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b36:	4619      	mov	r1, r3
 8003b38:	f7fd f836 	bl	8000ba8 <__aeabi_fsub>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7fd f93b 	bl	8000dbc <__aeabi_fmul>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461c      	mov	r4, r3
                            (U_r[i] - U_k[i]) * (U_r[i] - U_k[i]) +
 8003b4a:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003b4e:	f103 031e 	add.w	r3, r3, #30
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003b58:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 8003b5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b60:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003b64:	f103 031e 	add.w	r3, r3, #30
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003b6e:	f5a3 6331 	sub.w	r3, r3, #2832	; 0xb10
 8003b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b76:	4619      	mov	r1, r3
 8003b78:	f7fd f816 	bl	8000ba8 <__aeabi_fsub>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461d      	mov	r5, r3
 8003b80:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003b84:	f103 031e 	add.w	r3, r3, #30
 8003b88:	781a      	ldrb	r2, [r3, #0]
 8003b8a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003b8e:	f5a3 6333 	sub.w	r3, r3, #2864	; 0xb30
 8003b92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003b96:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003b9a:	f103 031e 	add.w	r3, r3, #30
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003ba4:	f5a3 6331 	sub.w	r3, r3, #2832	; 0xb10
 8003ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bac:	4619      	mov	r1, r3
 8003bae:	f7fc fffb 	bl	8000ba8 <__aeabi_fsub>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7fd f900 	bl	8000dbc <__aeabi_fmul>
 8003bbc:	4603      	mov	r3, r0
        delta_E[i] = sqrt( (W_r[i] - W_k[i]) * (W_r[i] - W_k[i]) +
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7fc fff3 	bl	8000bac <__addsf3>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461c      	mov	r4, r3
                            (V_r[i] - V_k[i]) * (V_r[i] - V_k[i]) );
 8003bca:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003bce:	f103 031e 	add.w	r3, r3, #30
 8003bd2:	781a      	ldrb	r2, [r3, #0]
 8003bd4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003bd8:	f5a3 6337 	sub.w	r3, r3, #2928	; 0xb70
 8003bdc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003be0:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003be4:	f103 031e 	add.w	r3, r3, #30
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003bee:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 8003bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f7fc ffd6 	bl	8000ba8 <__aeabi_fsub>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	461d      	mov	r5, r3
 8003c00:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003c04:	f103 031e 	add.w	r3, r3, #30
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003c0e:	f5a3 6337 	sub.w	r3, r3, #2928	; 0xb70
 8003c12:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003c16:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003c1a:	f103 031e 	add.w	r3, r3, #30
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003c24:	f5a3 6335 	sub.w	r3, r3, #2896	; 0xb50
 8003c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f7fc ffbb 	bl	8000ba8 <__aeabi_fsub>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4619      	mov	r1, r3
 8003c36:	4628      	mov	r0, r5
 8003c38:	f7fd f8c0 	bl	8000dbc <__aeabi_fmul>
 8003c3c:	4603      	mov	r3, r0
                            (U_r[i] - U_k[i]) * (U_r[i] - U_k[i]) +
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4620      	mov	r0, r4
 8003c42:	f7fc ffb3 	bl	8000bac <__addsf3>
 8003c46:	4603      	mov	r3, r0
        delta_E[i] = sqrt( (W_r[i] - W_k[i]) * (W_r[i] - W_k[i]) +
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fc fc51 	bl	80004f0 <__aeabi_f2d>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	f004 ff6d 	bl	8008b34 <sqrt>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	f507 51da 	add.w	r1, r7, #6976	; 0x1b40
 8003c62:	f101 011e 	add.w	r1, r1, #30
 8003c66:	780c      	ldrb	r4, [r1, #0]
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f7fc ff48 	bl	8000b00 <__aeabi_d2f>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003c76:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 8003c7a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        sum_Ri += (100 - 4.6 * delta_E[i]);
 8003c7e:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003c82:	f103 031e 	add.w	r3, r3, #30
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003c8c:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 8003c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fc fc2b 	bl	80004f0 <__aeabi_f2d>
 8003c9a:	a329      	add	r3, pc, #164	; (adr r3, 8003d40 <Calcute_Ra+0x2bb8>)
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f7fc fc7e 	bl	80005a0 <__aeabi_dmul>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	f04f 0000 	mov.w	r0, #0
 8003cac:	4926      	ldr	r1, [pc, #152]	; (8003d48 <Calcute_Ra+0x2bc0>)
 8003cae:	f7fc fabf 	bl	8000230 <__aeabi_dsub>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 8003cba:	f101 0110 	add.w	r1, r1, #16
 8003cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cc2:	f7fc fab7 	bl	8000234 <__adddf3>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 8003cce:	f101 0110 	add.w	r1, r1, #16
 8003cd2:	e9c1 2300 	strd	r2, r3, [r1]
    for(uint8_t i = 0; i < 8; i++)
 8003cd6:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003cda:	f103 031e 	add.w	r3, r3, #30
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f507 52da 	add.w	r2, r7, #6976	; 0x1b40
 8003ce6:	f102 021e 	add.w	r2, r2, #30
 8003cea:	7013      	strb	r3, [r2, #0]
 8003cec:	f507 53da 	add.w	r3, r7, #6976	; 0x1b40
 8003cf0:	f103 031e 	add.w	r3, r3, #30
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b07      	cmp	r3, #7
 8003cf8:	f67f aeec 	bls.w	8003ad4 <Calcute_Ra+0x294c>
    }

    /*finally, gain Ra*/
    handle->Ra = sum_Ri / 8;
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <Calcute_Ra+0x2bc4>)
 8003d02:	f507 51db 	add.w	r1, r7, #7008	; 0x1b60
 8003d06:	f101 0110 	add.w	r1, r1, #16
 8003d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d0e:	f7fc fd71 	bl	80007f4 <__aeabi_ddiv>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc fef1 	bl	8000b00 <__aeabi_d2f>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003d24:	f6a3 3374 	subw	r3, r3, #2932	; 0xb74
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    return 0;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	f507 57db 	add.w	r7, r7, #7008	; 0x1b60
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d3e:	bf00      	nop
 8003d40:	66666666 	.word	0x66666666
 8003d44:	40126666 	.word	0x40126666
 8003d48:	40590000 	.word	0x40590000
 8003d4c:	40200000 	.word	0x40200000

08003d50 <My_Getdata_test>:

void My_Getdata_test(light_t *handle)
{   
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6178      	str	r0, [r7, #20]
	AS7341_ControlLed(true,10);
 8003d58:	210a      	movs	r1, #10
 8003d5a:	2001      	movs	r0, #1
 8003d5c:	f001 f855 	bl	8004e0a <AS7341_ControlLed>
    AS7341_startMeasure(eF1F4ClearNIR);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f000 fead 	bl	8004ac0 <AS7341_startMeasure>
    *(handle->pdata1) = AS7341_ReadSpectralDataOne();
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	681c      	ldr	r4, [r3, #0]
 8003d6a:	463b      	mov	r3, r7
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 ff3c 	bl	8004bea <AS7341_ReadSpectralDataOne>
 8003d72:	4622      	mov	r2, r4
 8003d74:	463b      	mov	r3, r7
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	6010      	str	r0, [r2, #0]
 8003d7e:	6051      	str	r1, [r2, #4]
 8003d80:	6093      	str	r3, [r2, #8]
    printf("channel1(405-425nm):\r\n");
 8003d82:	48a7      	ldr	r0, [pc, #668]	; (8004020 <My_Getdata_test+0x2d0>)
 8003d84:	f003 fe84 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata1->channel1);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	48a4      	ldr	r0, [pc, #656]	; (8004024 <My_Getdata_test+0x2d4>)
 8003d92:	f003 fdf7 	bl	8007984 <iprintf>
    printf("channel2(435-455nm):\r\n");
 8003d96:	48a4      	ldr	r0, [pc, #656]	; (8004028 <My_Getdata_test+0x2d8>)
 8003d98:	f003 fe7a 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata1->channel2);
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	885b      	ldrh	r3, [r3, #2]
 8003da2:	4619      	mov	r1, r3
 8003da4:	489f      	ldr	r0, [pc, #636]	; (8004024 <My_Getdata_test+0x2d4>)
 8003da6:	f003 fded 	bl	8007984 <iprintf>
    printf("channel3(470-490nm):\r\n");
 8003daa:	48a0      	ldr	r0, [pc, #640]	; (800402c <My_Getdata_test+0x2dc>)
 8003dac:	f003 fe70 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata1->channel3);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	889b      	ldrh	r3, [r3, #4]
 8003db6:	4619      	mov	r1, r3
 8003db8:	489a      	ldr	r0, [pc, #616]	; (8004024 <My_Getdata_test+0x2d4>)
 8003dba:	f003 fde3 	bl	8007984 <iprintf>
    printf("channel4(505-525nm):\r\n");   
 8003dbe:	489c      	ldr	r0, [pc, #624]	; (8004030 <My_Getdata_test+0x2e0>)
 8003dc0:	f003 fe66 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata1->channel4);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	88db      	ldrh	r3, [r3, #6]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4895      	ldr	r0, [pc, #596]	; (8004024 <My_Getdata_test+0x2d4>)
 8003dce:	f003 fdd9 	bl	8007984 <iprintf>
    AS7341_startMeasure(eF5F8ClearNIR);
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	f000 fe74 	bl	8004ac0 <AS7341_startMeasure>
    *(handle->pdata2) =AS7341_ReadSpectralDataTwo();
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	685c      	ldr	r4, [r3, #4]
 8003ddc:	463b      	mov	r3, r7
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 ff31 	bl	8004c46 <AS7341_ReadSpectralDataTwo>
 8003de4:	4622      	mov	r2, r4
 8003de6:	463b      	mov	r3, r7
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	6859      	ldr	r1, [r3, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	6010      	str	r0, [r2, #0]
 8003df0:	6051      	str	r1, [r2, #4]
 8003df2:	6093      	str	r3, [r2, #8]
    printf("channel5(545-565nm):\r\n");
 8003df4:	488f      	ldr	r0, [pc, #572]	; (8004034 <My_Getdata_test+0x2e4>)
 8003df6:	f003 fe4b 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata2->channel5);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	4619      	mov	r1, r3
 8003e02:	4888      	ldr	r0, [pc, #544]	; (8004024 <My_Getdata_test+0x2d4>)
 8003e04:	f003 fdbe 	bl	8007984 <iprintf>
    printf("channel6(580-600nm):\r\n");
 8003e08:	488b      	ldr	r0, [pc, #556]	; (8004038 <My_Getdata_test+0x2e8>)
 8003e0a:	f003 fe41 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata2->channel6);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	885b      	ldrh	r3, [r3, #2]
 8003e14:	4619      	mov	r1, r3
 8003e16:	4883      	ldr	r0, [pc, #524]	; (8004024 <My_Getdata_test+0x2d4>)
 8003e18:	f003 fdb4 	bl	8007984 <iprintf>
    printf("channel7(620-640nm):\r\n");
 8003e1c:	4887      	ldr	r0, [pc, #540]	; (800403c <My_Getdata_test+0x2ec>)
 8003e1e:	f003 fe37 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata2->channel7);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	889b      	ldrh	r3, [r3, #4]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	487e      	ldr	r0, [pc, #504]	; (8004024 <My_Getdata_test+0x2d4>)
 8003e2c:	f003 fdaa 	bl	8007984 <iprintf>
    printf("channel8(670-690nm):\r\n");
 8003e30:	4883      	ldr	r0, [pc, #524]	; (8004040 <My_Getdata_test+0x2f0>)
 8003e32:	f003 fe2d 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata2->channel8);
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	88db      	ldrh	r3, [r3, #6]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4879      	ldr	r0, [pc, #484]	; (8004024 <My_Getdata_test+0x2d4>)
 8003e40:	f003 fda0 	bl	8007984 <iprintf>
    printf("Clear:\r\n");
 8003e44:	487f      	ldr	r0, [pc, #508]	; (8004044 <My_Getdata_test+0x2f4>)
 8003e46:	f003 fe23 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata2->CLEAR);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	891b      	ldrh	r3, [r3, #8]
 8003e50:	4619      	mov	r1, r3
 8003e52:	4874      	ldr	r0, [pc, #464]	; (8004024 <My_Getdata_test+0x2d4>)
 8003e54:	f003 fd96 	bl	8007984 <iprintf>
    printf("NIR:\r\n");
 8003e58:	487b      	ldr	r0, [pc, #492]	; (8004048 <My_Getdata_test+0x2f8>)
 8003e5a:	f003 fe19 	bl	8007a90 <puts>
    printf("%d\r\n",handle->pdata2->NIR);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	895b      	ldrh	r3, [r3, #10]
 8003e64:	4619      	mov	r1, r3
 8003e66:	486f      	ldr	r0, [pc, #444]	; (8004024 <My_Getdata_test+0x2d4>)
 8003e68:	f003 fd8c 	bl	8007984 <iprintf>
    printf("--------------------------\r\n");
 8003e6c:	4877      	ldr	r0, [pc, #476]	; (800404c <My_Getdata_test+0x2fc>)
 8003e6e:	f003 fe0f 	bl	8007a90 <puts>
    DEV_Delay_ms(500);
 8003e72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e76:	f000 fffb 	bl	8004e70 <DEV_Delay_ms>
    handle->light_attrs.spectral[0] = (handle->pdata1->channel1) / (ITIME * GAIN);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fc fb23 	bl	80004cc <__aeabi_i2d>
 8003e86:	a364      	add	r3, pc, #400	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8c:	f7fc fcb2 	bl	80007f4 <__aeabi_ddiv>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	f7fc fe32 	bl	8000b00 <__aeabi_d2f>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	60da      	str	r2, [r3, #12]
    handle->light_attrs.spectral[1] = (handle->pdata1->channel2) / (ITIME * GAIN);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	885b      	ldrh	r3, [r3, #2]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc fb0f 	bl	80004cc <__aeabi_i2d>
 8003eae:	a35a      	add	r3, pc, #360	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	f7fc fc9e 	bl	80007f4 <__aeabi_ddiv>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	f7fc fe1e 	bl	8000b00 <__aeabi_d2f>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	611a      	str	r2, [r3, #16]
    handle->light_attrs.spectral[2] = (handle->pdata1->channel3) / (ITIME * GAIN);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	889b      	ldrh	r3, [r3, #4]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fafb 	bl	80004cc <__aeabi_i2d>
 8003ed6:	a350      	add	r3, pc, #320	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc fc8a 	bl	80007f4 <__aeabi_ddiv>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f7fc fe0a 	bl	8000b00 <__aeabi_d2f>
 8003eec:	4602      	mov	r2, r0
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	615a      	str	r2, [r3, #20]
    handle->light_attrs.spectral[3] = (handle->pdata1->channel4) / (ITIME * GAIN);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	88db      	ldrh	r3, [r3, #6]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fae7 	bl	80004cc <__aeabi_i2d>
 8003efe:	a346      	add	r3, pc, #280	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f04:	f7fc fc76 	bl	80007f4 <__aeabi_ddiv>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f7fc fdf6 	bl	8000b00 <__aeabi_d2f>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	619a      	str	r2, [r3, #24]
    handle->light_attrs.spectral[4] = (handle->pdata2->channel5) / (ITIME * GAIN);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fad3 	bl	80004cc <__aeabi_i2d>
 8003f26:	a33c      	add	r3, pc, #240	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f7fc fc62 	bl	80007f4 <__aeabi_ddiv>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f7fc fde2 	bl	8000b00 <__aeabi_d2f>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	61da      	str	r2, [r3, #28]
    handle->light_attrs.spectral[5] = (handle->pdata2->channel6) / (ITIME * GAIN);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	885b      	ldrh	r3, [r3, #2]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fc fabf 	bl	80004cc <__aeabi_i2d>
 8003f4e:	a332      	add	r3, pc, #200	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f7fc fc4e 	bl	80007f4 <__aeabi_ddiv>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f7fc fdce 	bl	8000b00 <__aeabi_d2f>
 8003f64:	4602      	mov	r2, r0
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	621a      	str	r2, [r3, #32]
    handle->light_attrs.spectral[6] = (handle->pdata2->channel7) / (ITIME * GAIN);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	889b      	ldrh	r3, [r3, #4]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc faab 	bl	80004cc <__aeabi_i2d>
 8003f76:	a328      	add	r3, pc, #160	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc fc3a 	bl	80007f4 <__aeabi_ddiv>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	f7fc fdba 	bl	8000b00 <__aeabi_d2f>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
    handle->light_attrs.spectral[7] = (handle->pdata2->channel8) / (ITIME * GAIN);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	88db      	ldrh	r3, [r3, #6]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fc fa97 	bl	80004cc <__aeabi_i2d>
 8003f9e:	a31e      	add	r3, pc, #120	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f7fc fc26 	bl	80007f4 <__aeabi_ddiv>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f7fc fda6 	bl	8000b00 <__aeabi_d2f>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28
    handle->light_attrs.spectral[8] = (handle->pdata1->CLEAR) / (ITIME * GAIN);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	891b      	ldrh	r3, [r3, #8]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fa83 	bl	80004cc <__aeabi_i2d>
 8003fc6:	a314      	add	r3, pc, #80	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc fc12 	bl	80007f4 <__aeabi_ddiv>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f7fc fd92 	bl	8000b00 <__aeabi_d2f>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	62da      	str	r2, [r3, #44]	; 0x2c
    handle->light_attrs.spectral[9] = (handle->pdata1->NIR) / (ITIME * GAIN);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	895b      	ldrh	r3, [r3, #10]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc fa6f 	bl	80004cc <__aeabi_i2d>
 8003fee:	a30a      	add	r3, pc, #40	; (adr r3, 8004018 <My_Getdata_test+0x2c8>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc fbfe 	bl	80007f4 <__aeabi_ddiv>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	f7fc fd7e 	bl	8000b00 <__aeabi_d2f>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
    
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	bd90      	pop	{r4, r7, pc}
 8004012:	bf00      	nop
 8004014:	f3af 8000 	nop.w
 8004018:	00000000 	.word	0x00000000
 800401c:	41312330 	.word	0x41312330
 8004020:	08008cf4 	.word	0x08008cf4
 8004024:	08008d0c 	.word	0x08008d0c
 8004028:	08008d14 	.word	0x08008d14
 800402c:	08008d2c 	.word	0x08008d2c
 8004030:	08008d44 	.word	0x08008d44
 8004034:	08008d5c 	.word	0x08008d5c
 8004038:	08008d74 	.word	0x08008d74
 800403c:	08008d8c 	.word	0x08008d8c
 8004040:	08008da4 	.word	0x08008da4
 8004044:	08008dbc 	.word	0x08008dbc
 8004048:	08008dc4 	.word	0x08008dc4
 800404c:	08008dcc 	.word	0x08008dcc

08004050 <Device_Init>:

void Device_Init(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
    AS7341_Init(eSpm);
 8004054:	2000      	movs	r0, #0
 8004056:	f000 fbd9 	bl	800480c <AS7341_Init>
	AS7341_ATIME_config(ATIME);
 800405a:	2064      	movs	r0, #100	; 0x64
 800405c:	f000 fe42 	bl	8004ce4 <AS7341_ATIME_config>
	AS7341_ASTEP_config(ASTEP);
 8004060:	f240 30e7 	movw	r0, #999	; 0x3e7
 8004064:	f000 fe4c 	bl	8004d00 <AS7341_ASTEP_config>
	AS7341_AGAIN_config(AGAIN);
 8004068:	2006      	movs	r0, #6
 800406a:	f000 fe62 	bl	8004d32 <AS7341_AGAIN_config>
	AS7341_EnableLED(false);// LED Enable
 800406e:	2000      	movs	r0, #0
 8004070:	f000 fe72 	bl	8004d58 <AS7341_EnableLED>
    AS7341_ControlLed(true,10);//Turn on or off the LED and set the brightness of the LED
 8004074:	210a      	movs	r1, #10
 8004076:	2001      	movs	r0, #1
 8004078:	f000 fec7 	bl	8004e0a <AS7341_ControlLed>
	
}
 800407c:	bf00      	nop
 800407e:	bd80      	pop	{r7, pc}

08004080 <TemCalculate>:

UWORD TemCalculate(light_t *handle)
{
 8004080:	b5b0      	push	{r4, r5, r7, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	float X = 0,
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
		Y = 0,
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	623b      	str	r3, [r7, #32]
		Z = 0,
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
		x = 0,
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	61bb      	str	r3, [r7, #24]
		y = 0,
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
		n = 0,
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
		cdc = 0;
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	60fb      	str	r3, [r7, #12]

	X = 0.39814*handle->pdata1->channel1 + 1.29540*handle->pdata1->channel2 + 0.36956*handle->pdata1->channel3 + 0.10902*handle->pdata1->channel4 +
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fc fa07 	bl	80004cc <__aeabi_i2d>
 80040be:	a3d0      	add	r3, pc, #832	; (adr r3, 8004400 <TemCalculate+0x380>)
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f7fc fa6c 	bl	80005a0 <__aeabi_dmul>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4614      	mov	r4, r2
 80040ce:	461d      	mov	r5, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	885b      	ldrh	r3, [r3, #2]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fc f9f8 	bl	80004cc <__aeabi_i2d>
 80040dc:	a3ca      	add	r3, pc, #808	; (adr r3, 8004408 <TemCalculate+0x388>)
 80040de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e2:	f7fc fa5d 	bl	80005a0 <__aeabi_dmul>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4620      	mov	r0, r4
 80040ec:	4629      	mov	r1, r5
 80040ee:	f7fc f8a1 	bl	8000234 <__adddf3>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4614      	mov	r4, r2
 80040f8:	461d      	mov	r5, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	889b      	ldrh	r3, [r3, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	f7fc f9e3 	bl	80004cc <__aeabi_i2d>
 8004106:	a3c2      	add	r3, pc, #776	; (adr r3, 8004410 <TemCalculate+0x390>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	f7fc fa48 	bl	80005a0 <__aeabi_dmul>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	f7fc f88c 	bl	8000234 <__adddf3>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4614      	mov	r4, r2
 8004122:	461d      	mov	r5, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	88db      	ldrh	r3, [r3, #6]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fc f9ce 	bl	80004cc <__aeabi_i2d>
 8004130:	a3b9      	add	r3, pc, #740	; (adr r3, 8004418 <TemCalculate+0x398>)
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f7fc fa33 	bl	80005a0 <__aeabi_dmul>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f7fc f877 	bl	8000234 <__adddf3>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4614      	mov	r4, r2
 800414c:	461d      	mov	r5, r3
			0.71942*handle->pdata2->channel5 + 1.78180*handle->pdata2->channel6 + 1.10110*handle->pdata2->channel7 - 0.03991*handle->pdata2->channel8 -
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc f9b9 	bl	80004cc <__aeabi_i2d>
 800415a:	a3b1      	add	r3, pc, #708	; (adr r3, 8004420 <TemCalculate+0x3a0>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	f7fc fa1e 	bl	80005a0 <__aeabi_dmul>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
	X = 0.39814*handle->pdata1->channel1 + 1.29540*handle->pdata1->channel2 + 0.36956*handle->pdata1->channel3 + 0.10902*handle->pdata1->channel4 +
 8004168:	4620      	mov	r0, r4
 800416a:	4629      	mov	r1, r5
 800416c:	f7fc f862 	bl	8000234 <__adddf3>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4614      	mov	r4, r2
 8004176:	461d      	mov	r5, r3
			0.71942*handle->pdata2->channel5 + 1.78180*handle->pdata2->channel6 + 1.10110*handle->pdata2->channel7 - 0.03991*handle->pdata2->channel8 -
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	885b      	ldrh	r3, [r3, #2]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc f9a4 	bl	80004cc <__aeabi_i2d>
 8004184:	a3a8      	add	r3, pc, #672	; (adr r3, 8004428 <TemCalculate+0x3a8>)
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f7fc fa09 	bl	80005a0 <__aeabi_dmul>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4620      	mov	r0, r4
 8004194:	4629      	mov	r1, r5
 8004196:	f7fc f84d 	bl	8000234 <__adddf3>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4614      	mov	r4, r2
 80041a0:	461d      	mov	r5, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc f98f 	bl	80004cc <__aeabi_i2d>
 80041ae:	a3a0      	add	r3, pc, #640	; (adr r3, 8004430 <TemCalculate+0x3b0>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f7fc f9f4 	bl	80005a0 <__aeabi_dmul>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4620      	mov	r0, r4
 80041be:	4629      	mov	r1, r5
 80041c0:	f7fc f838 	bl	8000234 <__adddf3>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4614      	mov	r4, r2
 80041ca:	461d      	mov	r5, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	88db      	ldrh	r3, [r3, #6]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fc f97a 	bl	80004cc <__aeabi_i2d>
 80041d8:	a397      	add	r3, pc, #604	; (adr r3, 8004438 <TemCalculate+0x3b8>)
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f7fc f9df 	bl	80005a0 <__aeabi_dmul>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f7fc f821 	bl	8000230 <__aeabi_dsub>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4614      	mov	r4, r2
 80041f4:	461d      	mov	r5, r3
			0.27597*handle->pdata2->CLEAR - 0.02347*handle->pdata2->NIR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	891b      	ldrh	r3, [r3, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fc f965 	bl	80004cc <__aeabi_i2d>
 8004202:	a38f      	add	r3, pc, #572	; (adr r3, 8004440 <TemCalculate+0x3c0>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f7fc f9ca 	bl	80005a0 <__aeabi_dmul>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
			0.71942*handle->pdata2->channel5 + 1.78180*handle->pdata2->channel6 + 1.10110*handle->pdata2->channel7 - 0.03991*handle->pdata2->channel8 -
 8004210:	4620      	mov	r0, r4
 8004212:	4629      	mov	r1, r5
 8004214:	f7fc f80c 	bl	8000230 <__aeabi_dsub>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
			0.27597*handle->pdata2->CLEAR - 0.02347*handle->pdata2->NIR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	895b      	ldrh	r3, [r3, #10]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc f950 	bl	80004cc <__aeabi_i2d>
 800422c:	a386      	add	r3, pc, #536	; (adr r3, 8004448 <TemCalculate+0x3c8>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f7fc f9b5 	bl	80005a0 <__aeabi_dmul>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4620      	mov	r0, r4
 800423c:	4629      	mov	r1, r5
 800423e:	f7fb fff7 	bl	8000230 <__aeabi_dsub>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
	X = 0.39814*handle->pdata1->channel1 + 1.29540*handle->pdata1->channel2 + 0.36956*handle->pdata1->channel3 + 0.10902*handle->pdata1->channel4 +
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	f7fc fc59 	bl	8000b00 <__aeabi_d2f>
 800424e:	4603      	mov	r3, r0
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
	Y = 0.01396*handle->pdata1->channel1 + 0.16748*handle->pdata1->channel2 + 0.23538*handle->pdata1->channel3 + 1.42750*handle->pdata1->channel4 +
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc f937 	bl	80004cc <__aeabi_i2d>
 800425e:	a37c      	add	r3, pc, #496	; (adr r3, 8004450 <TemCalculate+0x3d0>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc f99c 	bl	80005a0 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4614      	mov	r4, r2
 800426e:	461d      	mov	r5, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	885b      	ldrh	r3, [r3, #2]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc f928 	bl	80004cc <__aeabi_i2d>
 800427c:	a376      	add	r3, pc, #472	; (adr r3, 8004458 <TemCalculate+0x3d8>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f7fc f98d 	bl	80005a0 <__aeabi_dmul>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4620      	mov	r0, r4
 800428c:	4629      	mov	r1, r5
 800428e:	f7fb ffd1 	bl	8000234 <__adddf3>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4614      	mov	r4, r2
 8004298:	461d      	mov	r5, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	889b      	ldrh	r3, [r3, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc f913 	bl	80004cc <__aeabi_i2d>
 80042a6:	a36e      	add	r3, pc, #440	; (adr r3, 8004460 <TemCalculate+0x3e0>)
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	f7fc f978 	bl	80005a0 <__aeabi_dmul>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4620      	mov	r0, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	f7fb ffbc 	bl	8000234 <__adddf3>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4614      	mov	r4, r2
 80042c2:	461d      	mov	r5, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	88db      	ldrh	r3, [r3, #6]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc f8fe 	bl	80004cc <__aeabi_i2d>
 80042d0:	a365      	add	r3, pc, #404	; (adr r3, 8004468 <TemCalculate+0x3e8>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc f963 	bl	80005a0 <__aeabi_dmul>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4620      	mov	r0, r4
 80042e0:	4629      	mov	r1, r5
 80042e2:	f7fb ffa7 	bl	8000234 <__adddf3>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4614      	mov	r4, r2
 80042ec:	461d      	mov	r5, r3
				1.88670*handle->pdata2->channel5 + 1.14200*handle->pdata2->channel6 + 0.46497*handle->pdata2->channel7 - 0.02702*handle->pdata2->channel8 -
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc f8e9 	bl	80004cc <__aeabi_i2d>
 80042fa:	a35d      	add	r3, pc, #372	; (adr r3, 8004470 <TemCalculate+0x3f0>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f7fc f94e 	bl	80005a0 <__aeabi_dmul>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
	Y = 0.01396*handle->pdata1->channel1 + 0.16748*handle->pdata1->channel2 + 0.23538*handle->pdata1->channel3 + 1.42750*handle->pdata1->channel4 +
 8004308:	4620      	mov	r0, r4
 800430a:	4629      	mov	r1, r5
 800430c:	f7fb ff92 	bl	8000234 <__adddf3>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4614      	mov	r4, r2
 8004316:	461d      	mov	r5, r3
				1.88670*handle->pdata2->channel5 + 1.14200*handle->pdata2->channel6 + 0.46497*handle->pdata2->channel7 - 0.02702*handle->pdata2->channel8 -
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	885b      	ldrh	r3, [r3, #2]
 800431e:	4618      	mov	r0, r3
 8004320:	f7fc f8d4 	bl	80004cc <__aeabi_i2d>
 8004324:	a354      	add	r3, pc, #336	; (adr r3, 8004478 <TemCalculate+0x3f8>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f7fc f939 	bl	80005a0 <__aeabi_dmul>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4620      	mov	r0, r4
 8004334:	4629      	mov	r1, r5
 8004336:	f7fb ff7d 	bl	8000234 <__adddf3>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4614      	mov	r4, r2
 8004340:	461d      	mov	r5, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	889b      	ldrh	r3, [r3, #4]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc f8bf 	bl	80004cc <__aeabi_i2d>
 800434e:	a34c      	add	r3, pc, #304	; (adr r3, 8004480 <TemCalculate+0x400>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f7fc f924 	bl	80005a0 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4620      	mov	r0, r4
 800435e:	4629      	mov	r1, r5
 8004360:	f7fb ff68 	bl	8000234 <__adddf3>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4614      	mov	r4, r2
 800436a:	461d      	mov	r5, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	88db      	ldrh	r3, [r3, #6]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fc f8aa 	bl	80004cc <__aeabi_i2d>
 8004378:	a343      	add	r3, pc, #268	; (adr r3, 8004488 <TemCalculate+0x408>)
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f7fc f90f 	bl	80005a0 <__aeabi_dmul>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4620      	mov	r0, r4
 8004388:	4629      	mov	r1, r5
 800438a:	f7fb ff51 	bl	8000230 <__aeabi_dsub>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4614      	mov	r4, r2
 8004394:	461d      	mov	r5, r3
				0.24468*handle->pdata2->CLEAR - 0.01993*handle->pdata2->NIR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	891b      	ldrh	r3, [r3, #8]
 800439c:	4618      	mov	r0, r3
 800439e:	f7fc f895 	bl	80004cc <__aeabi_i2d>
 80043a2:	a33b      	add	r3, pc, #236	; (adr r3, 8004490 <TemCalculate+0x410>)
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f7fc f8fa 	bl	80005a0 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
				1.88670*handle->pdata2->channel5 + 1.14200*handle->pdata2->channel6 + 0.46497*handle->pdata2->channel7 - 0.02702*handle->pdata2->channel8 -
 80043b0:	4620      	mov	r0, r4
 80043b2:	4629      	mov	r1, r5
 80043b4:	f7fb ff3c 	bl	8000230 <__aeabi_dsub>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	461d      	mov	r5, r3
				0.24468*handle->pdata2->CLEAR - 0.01993*handle->pdata2->NIR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	895b      	ldrh	r3, [r3, #10]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fc f880 	bl	80004cc <__aeabi_i2d>
 80043cc:	a332      	add	r3, pc, #200	; (adr r3, 8004498 <TemCalculate+0x418>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fc f8e5 	bl	80005a0 <__aeabi_dmul>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4620      	mov	r0, r4
 80043dc:	4629      	mov	r1, r5
 80043de:	f7fb ff27 	bl	8000230 <__aeabi_dsub>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
	Y = 0.01396*handle->pdata1->channel1 + 0.16748*handle->pdata1->channel2 + 0.23538*handle->pdata1->channel3 + 1.42750*handle->pdata1->channel4 +
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	f7fc fb89 	bl	8000b00 <__aeabi_d2f>
 80043ee:	4603      	mov	r3, r0
 80043f0:	623b      	str	r3, [r7, #32]
	Z = 1.95010*handle->pdata1->channel1 + 6.45490*handle->pdata1->channel2 + 2.78010*handle->pdata1->channel3 + 0.18501*handle->pdata1->channel4 +
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fc f867 	bl	80004cc <__aeabi_i2d>
 80043fe:	e04f      	b.n	80044a0 <TemCalculate+0x420>
 8004400:	31ceaf25 	.word	0x31ceaf25
 8004404:	3fd97b20 	.word	0x3fd97b20
 8004408:	59b3d07d 	.word	0x59b3d07d
 800440c:	3ff4b9f5 	.word	0x3ff4b9f5
 8004410:	fc7a3982 	.word	0xfc7a3982
 8004414:	3fd7a6de 	.word	0x3fd7a6de
 8004418:	169c23b8 	.word	0x169c23b8
 800441c:	3fbbe8bc 	.word	0x3fbbe8bc
 8004420:	1782d384 	.word	0x1782d384
 8004424:	3fe7057d 	.word	0x3fe7057d
 8004428:	b780346e 	.word	0xb780346e
 800442c:	3ffc8240 	.word	0x3ffc8240
 8004430:	089a0275 	.word	0x089a0275
 8004434:	3ff19e1b 	.word	0x3ff19e1b
 8004438:	61911490 	.word	0x61911490
 800443c:	3fa46f15 	.word	0x3fa46f15
 8004440:	132b55ef 	.word	0x132b55ef
 8004444:	3fd1a97e 	.word	0x3fd1a97e
 8004448:	09bf9c63 	.word	0x09bf9c63
 800444c:	3f980885 	.word	0x3f980885
 8004450:	7b9e0610 	.word	0x7b9e0610
 8004454:	3f8c970f 	.word	0x3f8c970f
 8004458:	115df655 	.word	0x115df655
 800445c:	3fc56ffc 	.word	0x3fc56ffc
 8004460:	8d10f51b 	.word	0x8d10f51b
 8004464:	3fce20ee 	.word	0x3fce20ee
 8004468:	3d70a3d7 	.word	0x3d70a3d7
 800446c:	3ff6d70a 	.word	0x3ff6d70a
 8004470:	56d5cfab 	.word	0x56d5cfab
 8004474:	3ffe2fec 	.word	0x3ffe2fec
 8004478:	cac08312 	.word	0xcac08312
 800447c:	3ff245a1 	.word	0x3ff245a1
 8004480:	87e7c06e 	.word	0x87e7c06e
 8004484:	3fddc211 	.word	0x3fddc211
 8004488:	815a07b3 	.word	0x815a07b3
 800448c:	3f9bab21 	.word	0x3f9bab21
 8004490:	9afe1da8 	.word	0x9afe1da8
 8004494:	3fcf51ac 	.word	0x3fcf51ac
 8004498:	a8d64d7f 	.word	0xa8d64d7f
 800449c:	3f946887 	.word	0x3f946887
 80044a0:	a3ad      	add	r3, pc, #692	; (adr r3, 8004758 <TemCalculate+0x6d8>)
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f7fc f87b 	bl	80005a0 <__aeabi_dmul>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4614      	mov	r4, r2
 80044b0:	461d      	mov	r5, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	885b      	ldrh	r3, [r3, #2]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc f807 	bl	80004cc <__aeabi_i2d>
 80044be:	a3a8      	add	r3, pc, #672	; (adr r3, 8004760 <TemCalculate+0x6e0>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f86c 	bl	80005a0 <__aeabi_dmul>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4620      	mov	r0, r4
 80044ce:	4629      	mov	r1, r5
 80044d0:	f7fb feb0 	bl	8000234 <__adddf3>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4614      	mov	r4, r2
 80044da:	461d      	mov	r5, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	889b      	ldrh	r3, [r3, #4]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fb fff2 	bl	80004cc <__aeabi_i2d>
 80044e8:	a39f      	add	r3, pc, #636	; (adr r3, 8004768 <TemCalculate+0x6e8>)
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f7fc f857 	bl	80005a0 <__aeabi_dmul>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4620      	mov	r0, r4
 80044f8:	4629      	mov	r1, r5
 80044fa:	f7fb fe9b 	bl	8000234 <__adddf3>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4614      	mov	r4, r2
 8004504:	461d      	mov	r5, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	88db      	ldrh	r3, [r3, #6]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffdd 	bl	80004cc <__aeabi_i2d>
 8004512:	a397      	add	r3, pc, #604	; (adr r3, 8004770 <TemCalculate+0x6f0>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fc f842 	bl	80005a0 <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	f7fb fe86 	bl	8000234 <__adddf3>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4614      	mov	r4, r2
 800452e:	461d      	mov	r5, r3
				0.15325*handle->pdata2->channel5 + 0.09539*handle->pdata2->channel6 + 0.10563*handle->pdata2->channel7 + 0.08866*handle->pdata2->channel8 -
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fb ffc8 	bl	80004cc <__aeabi_i2d>
 800453c:	a38e      	add	r3, pc, #568	; (adr r3, 8004778 <TemCalculate+0x6f8>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f7fc f82d 	bl	80005a0 <__aeabi_dmul>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
	Z = 1.95010*handle->pdata1->channel1 + 6.45490*handle->pdata1->channel2 + 2.78010*handle->pdata1->channel3 + 0.18501*handle->pdata1->channel4 +
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f7fb fe71 	bl	8000234 <__adddf3>
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4614      	mov	r4, r2
 8004558:	461d      	mov	r5, r3
				0.15325*handle->pdata2->channel5 + 0.09539*handle->pdata2->channel6 + 0.10563*handle->pdata2->channel7 + 0.08866*handle->pdata2->channel8 -
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	885b      	ldrh	r3, [r3, #2]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fb ffb3 	bl	80004cc <__aeabi_i2d>
 8004566:	a386      	add	r3, pc, #536	; (adr r3, 8004780 <TemCalculate+0x700>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f7fc f818 	bl	80005a0 <__aeabi_dmul>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4620      	mov	r0, r4
 8004576:	4629      	mov	r1, r5
 8004578:	f7fb fe5c 	bl	8000234 <__adddf3>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4614      	mov	r4, r2
 8004582:	461d      	mov	r5, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	889b      	ldrh	r3, [r3, #4]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb ff9e 	bl	80004cc <__aeabi_i2d>
 8004590:	a37d      	add	r3, pc, #500	; (adr r3, 8004788 <TemCalculate+0x708>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fc f803 	bl	80005a0 <__aeabi_dmul>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f7fb fe47 	bl	8000234 <__adddf3>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4614      	mov	r4, r2
 80045ac:	461d      	mov	r5, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	88db      	ldrh	r3, [r3, #6]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fb ff89 	bl	80004cc <__aeabi_i2d>
 80045ba:	a375      	add	r3, pc, #468	; (adr r3, 8004790 <TemCalculate+0x710>)
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f7fb ffee 	bl	80005a0 <__aeabi_dmul>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4620      	mov	r0, r4
 80045ca:	4629      	mov	r1, r5
 80045cc:	f7fb fe32 	bl	8000234 <__adddf3>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4614      	mov	r4, r2
 80045d6:	461d      	mov	r5, r3
				0.61140*handle->pdata2->CLEAR - 0.00938*handle->pdata2->NIR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	891b      	ldrh	r3, [r3, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fb ff74 	bl	80004cc <__aeabi_i2d>
 80045e4:	a36c      	add	r3, pc, #432	; (adr r3, 8004798 <TemCalculate+0x718>)
 80045e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ea:	f7fb ffd9 	bl	80005a0 <__aeabi_dmul>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
				0.15325*handle->pdata2->channel5 + 0.09539*handle->pdata2->channel6 + 0.10563*handle->pdata2->channel7 + 0.08866*handle->pdata2->channel8 -
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fb fe1b 	bl	8000230 <__aeabi_dsub>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4614      	mov	r4, r2
 8004600:	461d      	mov	r5, r3
				0.61140*handle->pdata2->CLEAR - 0.00938*handle->pdata2->NIR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	895b      	ldrh	r3, [r3, #10]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb ff5f 	bl	80004cc <__aeabi_i2d>
 800460e:	a364      	add	r3, pc, #400	; (adr r3, 80047a0 <TemCalculate+0x720>)
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f7fb ffc4 	bl	80005a0 <__aeabi_dmul>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4620      	mov	r0, r4
 800461e:	4629      	mov	r1, r5
 8004620:	f7fb fe06 	bl	8000230 <__aeabi_dsub>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
	Z = 1.95010*handle->pdata1->channel1 + 6.45490*handle->pdata1->channel2 + 2.78010*handle->pdata1->channel3 + 0.18501*handle->pdata1->channel4 +
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	f7fc fa68 	bl	8000b00 <__aeabi_d2f>
 8004630:	4603      	mov	r3, r0
 8004632:	61fb      	str	r3, [r7, #28]

	if ((X+Y+Z) != 0)
 8004634:	6a39      	ldr	r1, [r7, #32]
 8004636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004638:	f7fc fab8 	bl	8000bac <__addsf3>
 800463c:	4603      	mov	r3, r0
 800463e:	69f9      	ldr	r1, [r7, #28]
 8004640:	4618      	mov	r0, r3
 8004642:	f7fc fab3 	bl	8000bac <__addsf3>
 8004646:	4603      	mov	r3, r0
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f7fc fd49 	bl	80010e4 <__aeabi_fcmpeq>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d179      	bne.n	800474c <TemCalculate+0x6cc>
	{
		x = X/(X+Y+Z);
 8004658:	6a39      	ldr	r1, [r7, #32]
 800465a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800465c:	f7fc faa6 	bl	8000bac <__addsf3>
 8004660:	4603      	mov	r3, r0
 8004662:	69f9      	ldr	r1, [r7, #28]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fc faa1 	bl	8000bac <__addsf3>
 800466a:	4603      	mov	r3, r0
 800466c:	4619      	mov	r1, r3
 800466e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004670:	f7fc fc58 	bl	8000f24 <__aeabi_fdiv>
 8004674:	4603      	mov	r3, r0
 8004676:	61bb      	str	r3, [r7, #24]
		y = Y/(X+Y+Z);
 8004678:	6a39      	ldr	r1, [r7, #32]
 800467a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800467c:	f7fc fa96 	bl	8000bac <__addsf3>
 8004680:	4603      	mov	r3, r0
 8004682:	69f9      	ldr	r1, [r7, #28]
 8004684:	4618      	mov	r0, r3
 8004686:	f7fc fa91 	bl	8000bac <__addsf3>
 800468a:	4603      	mov	r3, r0
 800468c:	4619      	mov	r1, r3
 800468e:	6a38      	ldr	r0, [r7, #32]
 8004690:	f7fc fc48 	bl	8000f24 <__aeabi_fdiv>
 8004694:	4603      	mov	r3, r0
 8004696:	617b      	str	r3, [r7, #20]
	}
	else
		return 0;


	n = (x-0.3320)/(0.1858-y);
 8004698:	69b8      	ldr	r0, [r7, #24]
 800469a:	f7fb ff29 	bl	80004f0 <__aeabi_f2d>
 800469e:	a342      	add	r3, pc, #264	; (adr r3, 80047a8 <TemCalculate+0x728>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f7fb fdc4 	bl	8000230 <__aeabi_dsub>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4614      	mov	r4, r2
 80046ae:	461d      	mov	r5, r3
 80046b0:	6978      	ldr	r0, [r7, #20]
 80046b2:	f7fb ff1d 	bl	80004f0 <__aeabi_f2d>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	a13d      	add	r1, pc, #244	; (adr r1, 80047b0 <TemCalculate+0x730>)
 80046bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046c0:	f7fb fdb6 	bl	8000230 <__aeabi_dsub>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4620      	mov	r0, r4
 80046ca:	4629      	mov	r1, r5
 80046cc:	f7fc f892 	bl	80007f4 <__aeabi_ddiv>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f7fc fa12 	bl	8000b00 <__aeabi_d2f>
 80046dc:	4603      	mov	r3, r0
 80046de:	613b      	str	r3, [r7, #16]
	cdc = 437*n*n*n + 3601*n*n + 6831*n + 5517;
 80046e0:	4935      	ldr	r1, [pc, #212]	; (80047b8 <TemCalculate+0x738>)
 80046e2:	6938      	ldr	r0, [r7, #16]
 80046e4:	f7fc fb6a 	bl	8000dbc <__aeabi_fmul>
 80046e8:	4603      	mov	r3, r0
 80046ea:	6939      	ldr	r1, [r7, #16]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fc fb65 	bl	8000dbc <__aeabi_fmul>
 80046f2:	4603      	mov	r3, r0
 80046f4:	6939      	ldr	r1, [r7, #16]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fc fb60 	bl	8000dbc <__aeabi_fmul>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461c      	mov	r4, r3
 8004700:	492e      	ldr	r1, [pc, #184]	; (80047bc <TemCalculate+0x73c>)
 8004702:	6938      	ldr	r0, [r7, #16]
 8004704:	f7fc fb5a 	bl	8000dbc <__aeabi_fmul>
 8004708:	4603      	mov	r3, r0
 800470a:	6939      	ldr	r1, [r7, #16]
 800470c:	4618      	mov	r0, r3
 800470e:	f7fc fb55 	bl	8000dbc <__aeabi_fmul>
 8004712:	4603      	mov	r3, r0
 8004714:	4619      	mov	r1, r3
 8004716:	4620      	mov	r0, r4
 8004718:	f7fc fa48 	bl	8000bac <__addsf3>
 800471c:	4603      	mov	r3, r0
 800471e:	461c      	mov	r4, r3
 8004720:	4927      	ldr	r1, [pc, #156]	; (80047c0 <TemCalculate+0x740>)
 8004722:	6938      	ldr	r0, [r7, #16]
 8004724:	f7fc fb4a 	bl	8000dbc <__aeabi_fmul>
 8004728:	4603      	mov	r3, r0
 800472a:	4619      	mov	r1, r3
 800472c:	4620      	mov	r0, r4
 800472e:	f7fc fa3d 	bl	8000bac <__addsf3>
 8004732:	4603      	mov	r3, r0
 8004734:	4923      	ldr	r1, [pc, #140]	; (80047c4 <TemCalculate+0x744>)
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc fa38 	bl	8000bac <__addsf3>
 800473c:	4603      	mov	r3, r0
 800473e:	60fb      	str	r3, [r7, #12]

	return (UWORD)cdc;
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f7fc fd01 	bl	8001148 <__aeabi_f2uiz>
 8004746:	4603      	mov	r3, r0
 8004748:	b29b      	uxth	r3, r3
 800474a:	e000      	b.n	800474e <TemCalculate+0x6ce>
		return 0;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3728      	adds	r7, #40	; 0x28
 8004752:	46bd      	mov	sp, r7
 8004754:	bdb0      	pop	{r4, r5, r7, pc}
 8004756:	bf00      	nop
 8004758:	0ebedfa4 	.word	0x0ebedfa4
 800475c:	3fff339c 	.word	0x3fff339c
 8004760:	4e3bcd36 	.word	0x4e3bcd36
 8004764:	4019d1d1 	.word	0x4019d1d1
 8004768:	119ce076 	.word	0x119ce076
 800476c:	40063da5 	.word	0x40063da5
 8004770:	5db76b3c 	.word	0x5db76b3c
 8004774:	3fc7ae68 	.word	0x3fc7ae68
 8004778:	2d0e5604 	.word	0x2d0e5604
 800477c:	3fc39db2 	.word	0x3fc39db2
 8004780:	a25d8d7a 	.word	0xa25d8d7a
 8004784:	3fb86b7a 	.word	0x3fb86b7a
 8004788:	5379fa98 	.word	0x5379fa98
 800478c:	3fbb0a91 	.word	0x3fbb0a91
 8004790:	f8769ec3 	.word	0xf8769ec3
 8004794:	3fb6b26b 	.word	0x3fb6b26b
 8004798:	bb98c7e3 	.word	0xbb98c7e3
 800479c:	3fe39096 	.word	0x3fe39096
 80047a0:	49e44fa0 	.word	0x49e44fa0
 80047a4:	3f8335d2 	.word	0x3f8335d2
 80047a8:	ed916873 	.word	0xed916873
 80047ac:	3fd53f7c 	.word	0x3fd53f7c
 80047b0:	5dcc63f1 	.word	0x5dcc63f1
 80047b4:	3fc7c84b 	.word	0x3fc7c84b
 80047b8:	43da8000 	.word	0x43da8000
 80047bc:	45611000 	.word	0x45611000
 80047c0:	45d57800 	.word	0x45d57800
 80047c4:	45ac6800 	.word	0x45ac6800

080047c8 <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	4603      	mov	r3, r0
 80047d0:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fb95 	bl	8004f04 <I2C_Read_Byte>
 80047da:	4603      	mov	r3, r0
 80047dc:	b2db      	uxtb	r3, r3
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	4603      	mov	r3, r0
 80047ee:	460a      	mov	r2, r1
 80047f0:	71fb      	strb	r3, [r7, #7]
 80047f2:	4613      	mov	r3, r2
 80047f4:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 80047f6:	79ba      	ldrb	r2, [r7, #6]
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fb5d 	bl	8004ebc <I2C_Write_Byte>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 8004816:	2072      	movs	r0, #114	; 0x72
 8004818:	f000 fb3c 	bl	8004e94 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 800481c:	2001      	movs	r0, #1
 800481e:	f000 f80b 	bl	8004838 <AS7341_Enable>
	measureMode=mode;
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <AS7341_Init+0x28>)
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	7013      	strb	r3, [r2, #0]
	return 0;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	200000a4 	.word	0x200000a4

08004838 <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8004840:	2080      	movs	r0, #128	; 0x80
 8004842:	f7ff ffc1 	bl	80047c8 <AS7341_Read_Byte>
 8004846:	4603      	mov	r3, r0
 8004848:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d104      	bne.n	800485a <AS7341_Enable+0x22>
    data = data | (1<<0);
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
 8004858:	e003      	b.n	8004862 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	4619      	mov	r1, r3
 8004866:	2080      	movs	r0, #128	; 0x80
 8004868:	f7ff ffbd 	bl	80047e6 <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 800486c:	4805      	ldr	r0, [pc, #20]	; (8004884 <AS7341_Enable+0x4c>)
 800486e:	f003 f90f 	bl	8007a90 <puts>
    AS7341_Write_Byte(0x00, 0x30);
 8004872:	2130      	movs	r1, #48	; 0x30
 8004874:	2000      	movs	r0, #0
 8004876:	f7ff ffb6 	bl	80047e6 <AS7341_Write_Byte>
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	08008de8 	.word	0x08008de8

08004888 <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8004890:	2080      	movs	r0, #128	; 0x80
 8004892:	f7ff ff99 	bl	80047c8 <AS7341_Read_Byte>
 8004896:	4603      	mov	r3, r0
 8004898:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d104      	bne.n	80048aa <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	e003      	b.n	80048b2 <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	f023 0302 	bic.w	r3, r3, #2
 80048b0:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	4619      	mov	r1, r3
 80048b6:	2080      	movs	r0, #128	; 0x80
 80048b8:	f7ff ff95 	bl	80047e6 <AS7341_Write_Byte>
}
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 80048cc:	2080      	movs	r0, #128	; 0x80
 80048ce:	f7ff ff7b 	bl	80047c8 <AS7341_Read_Byte>
 80048d2:	4603      	mov	r3, r0
 80048d4:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d104      	bne.n	80048e6 <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	f043 0310 	orr.w	r3, r3, #16
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e003      	b.n	80048ee <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	f023 0310 	bic.w	r3, r3, #16
 80048ec:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	4619      	mov	r1, r3
 80048f2:	2080      	movs	r0, #128	; 0x80
 80048f4:	f7ff ff77 	bl	80047e6 <AS7341_Write_Byte>
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 800490a:	2001      	movs	r0, #1
 800490c:	f000 fa5a 	bl	8004dc4 <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 8004910:	2070      	movs	r0, #112	; 0x70
 8004912:	f7ff ff59 	bl	80047c8 <AS7341_Read_Byte>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d015      	beq.n	800494c <AS7341_Config+0x4c>
 8004920:	2b03      	cmp	r3, #3
 8004922:	dc18      	bgt.n	8004956 <AS7341_Config+0x56>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <AS7341_Config+0x2e>
 8004928:	2b01      	cmp	r3, #1
 800492a:	d005      	beq.n	8004938 <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 800492c:	e013      	b.n	8004956 <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 800492e:	7bfb      	ldrb	r3, [r7, #15]
 8004930:	f023 0303 	bic.w	r3, r3, #3
 8004934:	73fb      	strb	r3, [r7, #15]
	break;
 8004936:	e00f      	b.n	8004958 <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 8004938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800493c:	f023 0303 	bic.w	r3, r3, #3
 8004940:	b25b      	sxtb	r3, r3
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	b25b      	sxtb	r3, r3
 8004948:	73fb      	strb	r3, [r7, #15]
	break;
 800494a:	e005      	b.n	8004958 <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	f043 0303 	orr.w	r3, r3, #3
 8004952:	73fb      	strb	r3, [r7, #15]
	break;
 8004954:	e000      	b.n	8004958 <AS7341_Config+0x58>
    default : break;
 8004956:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	4619      	mov	r1, r3
 800495c:	2070      	movs	r0, #112	; 0x70
 800495e:	f7ff ff42 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8004962:	2000      	movs	r0, #0
 8004964:	f000 fa2e 	bl	8004dc4 <AS7341_SetBank>
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 8004974:	2130      	movs	r1, #48	; 0x30
 8004976:	2000      	movs	r0, #0
 8004978:	f7ff ff35 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 800497c:	2101      	movs	r1, #1
 800497e:	2001      	movs	r0, #1
 8004980:	f7ff ff31 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8004984:	2100      	movs	r1, #0
 8004986:	2002      	movs	r0, #2
 8004988:	f7ff ff2d 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 800498c:	2100      	movs	r1, #0
 800498e:	2003      	movs	r0, #3
 8004990:	f7ff ff29 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 8004994:	2100      	movs	r1, #0
 8004996:	2004      	movs	r0, #4
 8004998:	f7ff ff25 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 800499c:	2142      	movs	r1, #66	; 0x42
 800499e:	2005      	movs	r0, #5
 80049a0:	f7ff ff21 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 80049a4:	2100      	movs	r1, #0
 80049a6:	2006      	movs	r0, #6
 80049a8:	f7ff ff1d 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 80049ac:	2100      	movs	r1, #0
 80049ae:	2007      	movs	r0, #7
 80049b0:	f7ff ff19 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80049b4:	2150      	movs	r1, #80	; 0x50
 80049b6:	2008      	movs	r0, #8
 80049b8:	f7ff ff15 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 80049bc:	2100      	movs	r1, #0
 80049be:	2009      	movs	r0, #9
 80049c0:	f7ff ff11 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 80049c4:	2100      	movs	r1, #0
 80049c6:	200a      	movs	r0, #10
 80049c8:	f7ff ff0d 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 80049cc:	2100      	movs	r1, #0
 80049ce:	200b      	movs	r0, #11
 80049d0:	f7ff ff09 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 80049d4:	2120      	movs	r1, #32
 80049d6:	200c      	movs	r0, #12
 80049d8:	f7ff ff05 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 80049dc:	2104      	movs	r1, #4
 80049de:	200d      	movs	r0, #13
 80049e0:	f7ff ff01 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 80049e4:	2100      	movs	r1, #0
 80049e6:	200e      	movs	r0, #14
 80049e8:	f7ff fefd 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 80049ec:	2130      	movs	r1, #48	; 0x30
 80049ee:	200f      	movs	r0, #15
 80049f0:	f7ff fef9 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 80049f4:	2101      	movs	r1, #1
 80049f6:	2010      	movs	r0, #16
 80049f8:	f7ff fef5 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 80049fc:	2150      	movs	r1, #80	; 0x50
 80049fe:	2011      	movs	r0, #17
 8004a00:	f7ff fef1 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8004a04:	2100      	movs	r1, #0
 8004a06:	2012      	movs	r0, #18
 8004a08:	f7ff feed 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8004a0c:	2106      	movs	r1, #6
 8004a0e:	2013      	movs	r0, #19
 8004a10:	f7ff fee9 	bl	80047e6 <AS7341_Write_Byte>
}
 8004a14:	bf00      	nop
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f7ff fee1 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 8004a24:	2100      	movs	r1, #0
 8004a26:	2001      	movs	r0, #1
 8004a28:	f7ff fedd 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	2002      	movs	r0, #2
 8004a30:	f7ff fed9 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 8004a34:	2140      	movs	r1, #64	; 0x40
 8004a36:	2003      	movs	r0, #3
 8004a38:	f7ff fed5 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	2004      	movs	r0, #4
 8004a40:	f7ff fed1 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 8004a44:	2100      	movs	r1, #0
 8004a46:	2005      	movs	r0, #5
 8004a48:	f7ff fecd 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 8004a4c:	2110      	movs	r1, #16
 8004a4e:	2006      	movs	r0, #6
 8004a50:	f7ff fec9 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 8004a54:	2103      	movs	r1, #3
 8004a56:	2007      	movs	r0, #7
 8004a58:	f7ff fec5 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8004a5c:	2150      	movs	r1, #80	; 0x50
 8004a5e:	2008      	movs	r0, #8
 8004a60:	f7ff fec1 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 8004a64:	2110      	movs	r1, #16
 8004a66:	2009      	movs	r0, #9
 8004a68:	f7ff febd 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	200a      	movs	r0, #10
 8004a70:	f7ff feb9 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8004a74:	2100      	movs	r1, #0
 8004a76:	200b      	movs	r0, #11
 8004a78:	f7ff feb5 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	200c      	movs	r0, #12
 8004a80:	f7ff feb1 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 8004a84:	2100      	movs	r1, #0
 8004a86:	200d      	movs	r0, #13
 8004a88:	f7ff fead 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 8004a8c:	2124      	movs	r1, #36	; 0x24
 8004a8e:	200e      	movs	r0, #14
 8004a90:	f7ff fea9 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 8004a94:	2100      	movs	r1, #0
 8004a96:	200f      	movs	r0, #15
 8004a98:	f7ff fea5 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2010      	movs	r0, #16
 8004aa0:	f7ff fea1 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8004aa4:	2150      	movs	r1, #80	; 0x50
 8004aa6:	2011      	movs	r0, #17
 8004aa8:	f7ff fe9d 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8004aac:	2100      	movs	r1, #0
 8004aae:	2012      	movs	r0, #18
 8004ab0:	f7ff fe99 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8004ab4:	2106      	movs	r1, #6
 8004ab6:	2013      	movs	r0, #19
 8004ab8:	f7ff fe95 	bl	80047e6 <AS7341_Write_Byte>
}
 8004abc:	bf00      	nop
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 8004ace:	20a9      	movs	r0, #169	; 0xa9
 8004ad0:	f7ff fe7a 	bl	80047c8 <AS7341_Read_Byte>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	f023 0310 	bic.w	r3, r3, #16
 8004ade:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	20a9      	movs	r0, #169	; 0xa9
 8004ae6:	f7ff fe7e 	bl	80047e6 <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 8004aea:	2000      	movs	r0, #0
 8004aec:	f7ff fecc 	bl	8004888 <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8004af0:	2110      	movs	r1, #16
 8004af2:	20af      	movs	r0, #175	; 0xaf
 8004af4:	f7ff fe77 	bl	80047e6 <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d102      	bne.n	8004b04 <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8004afe:	f7ff ff37 	bl	8004970 <F1F4_Clear_NIR>
 8004b02:	e004      	b.n	8004b0e <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 8004b0a:	f7ff ff85 	bl	8004a18 <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 8004b0e:	2001      	movs	r0, #1
 8004b10:	f7ff fed8 	bl	80048c4 <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 8004b14:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <AS7341_startMeasure+0xa0>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d106      	bne.n	8004b2a <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	f000 f8c0 	bl	8004ca2 <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8004b22:	2001      	movs	r0, #1
 8004b24:	f7ff feec 	bl	8004900 <AS7341_Config>
 8004b28:	e006      	b.n	8004b38 <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <AS7341_startMeasure+0xa0>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8004b32:	2000      	movs	r0, #0
 8004b34:	f7ff fee4 	bl	8004900 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f7ff fea5 	bl	8004888 <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <AS7341_startMeasure+0xa0>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 8004b46:	e002      	b.n	8004b4e <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f000 f991 	bl	8004e70 <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 8004b4e:	f000 f809 	bl	8004b64 <AS7341_MeasureComplete>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f7      	beq.n	8004b48 <AS7341_startMeasure+0x88>
        }
      }
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	200000a4 	.word	0x200000a4

08004b64 <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 8004b6a:	20a3      	movs	r0, #163	; 0xa3
 8004b6c:	f7ff fe2c 	bl	80047c8 <AS7341_Read_Byte>
 8004b70:	4603      	mov	r3, r0
 8004b72:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <AS7341_MeasureComplete+0x1e>
		return true;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8004b82:	2300      	movs	r3, #0
	}
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8004b96:	2300      	movs	r3, #0
 8004b98:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	3b6b      	subs	r3, #107	; 0x6b
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fe0f 	bl	80047c8 <AS7341_Read_Byte>
 8004baa:	4603      	mov	r3, r0
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	334b      	adds	r3, #75	; 0x4b
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff fe04 	bl	80047c8 <AS7341_Read_Byte>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 8004bc6:	897b      	ldrh	r3, [r7, #10]
 8004bc8:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 8004bca:	89fb      	ldrh	r3, [r7, #14]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	b21a      	sxth	r2, r3
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	b21b      	sxth	r3, r3
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b21b      	sxth	r3, r3
 8004bd8:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 8004bda:	2032      	movs	r0, #50	; 0x32
 8004bdc:	f000 f948 	bl	8004e70 <DEV_Delay_ms>
  return channelData;
 8004be0:	89fb      	ldrh	r3, [r7, #14]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 8004bea:	b590      	push	{r4, r7, lr}
 8004bec:	b087      	sub	sp, #28
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7ff ffca 	bl	8004b8c <AS7341_GetChannelData>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	f7ff ffc5 	bl	8004b8c <AS7341_GetChannelData>
 8004c02:	4603      	mov	r3, r0
 8004c04:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 8004c06:	2002      	movs	r0, #2
 8004c08:	f7ff ffc0 	bl	8004b8c <AS7341_GetChannelData>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8004c10:	2003      	movs	r0, #3
 8004c12:	f7ff ffbb 	bl	8004b8c <AS7341_GetChannelData>
 8004c16:	4603      	mov	r3, r0
 8004c18:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8004c1a:	2004      	movs	r0, #4
 8004c1c:	f7ff ffb6 	bl	8004b8c <AS7341_GetChannelData>
 8004c20:	4603      	mov	r3, r0
 8004c22:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8004c24:	2005      	movs	r0, #5
 8004c26:	f7ff ffb1 	bl	8004b8c <AS7341_GetChannelData>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	82fb      	strh	r3, [r7, #22]
  return data;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	461c      	mov	r4, r3
 8004c32:	f107 030c 	add.w	r3, r7, #12
 8004c36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c38:	6020      	str	r0, [r4, #0]
 8004c3a:	6061      	str	r1, [r4, #4]
 8004c3c:	60a2      	str	r2, [r4, #8]
}
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}

08004c46 <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8004c46:	b590      	push	{r4, r7, lr}
 8004c48:	b087      	sub	sp, #28
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7ff ff9c 	bl	8004b8c <AS7341_GetChannelData>
 8004c54:	4603      	mov	r3, r0
 8004c56:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f7ff ff97 	bl	8004b8c <AS7341_GetChannelData>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8004c62:	2002      	movs	r0, #2
 8004c64:	f7ff ff92 	bl	8004b8c <AS7341_GetChannelData>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8004c6c:	2003      	movs	r0, #3
 8004c6e:	f7ff ff8d 	bl	8004b8c <AS7341_GetChannelData>
 8004c72:	4603      	mov	r3, r0
 8004c74:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8004c76:	2004      	movs	r0, #4
 8004c78:	f7ff ff88 	bl	8004b8c <AS7341_GetChannelData>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8004c80:	2005      	movs	r0, #5
 8004c82:	f7ff ff83 	bl	8004b8c <AS7341_GetChannelData>
 8004c86:	4603      	mov	r3, r0
 8004c88:	82fb      	strh	r3, [r7, #22]
  return data;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	461c      	mov	r4, r3
 8004c8e:	f107 030c 	add.w	r3, r7, #12
 8004c92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c94:	6020      	str	r0, [r4, #0]
 8004c96:	6061      	str	r1, [r4, #4]
 8004c98:	60a2      	str	r2, [r4, #8]
}
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	371c      	adds	r7, #28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd90      	pop	{r4, r7, pc}

08004ca2 <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8004cac:	20be      	movs	r0, #190	; 0xbe
 8004cae:	f7ff fd8b 	bl	80047c8 <AS7341_Read_Byte>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	f043 0304 	orr.w	r3, r3, #4
 8004cc2:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d103      	bne.n	8004cd2 <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	20be      	movs	r0, #190	; 0xbe
 8004cd8:	f7ff fd85 	bl	80047e6 <AS7341_Write_Byte>
}
 8004cdc:	bf00      	nop
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	2081      	movs	r0, #129	; 0x81
 8004cf4:	f7ff fd77 	bl	80047e6 <AS7341_Write_Byte>
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	20ca      	movs	r0, #202	; 0xca
 8004d1c:	f7ff fd63 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	4619      	mov	r1, r3
 8004d24:	20cb      	movs	r0, #203	; 0xcb
 8004d26:	f7ff fd5e 	bl	80047e6 <AS7341_Write_Byte>
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	4603      	mov	r3, r0
 8004d3a:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	2b0a      	cmp	r3, #10
 8004d40:	d901      	bls.n	8004d46 <AS7341_AGAIN_config+0x14>
 8004d42:	230a      	movs	r3, #10
 8004d44:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	20aa      	movs	r0, #170	; 0xaa
 8004d4c:	f7ff fd4b 	bl	80047e6 <AS7341_Write_Byte>
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <AS7341_EnableLED>:
function:	enable led
info：true		: Enable
			false		: Anergy
******************************************************************************/
void AS7341_EnableLED(int flag)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UBYTE data=0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	73fb      	strb	r3, [r7, #15]
  UBYTE data1=0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	73bb      	strb	r3, [r7, #14]
  AS7341_SetBank(1);
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f000 f82b 	bl	8004dc4 <AS7341_SetBank>
  data = AS7341_Read_Byte(AS7341_CONFIG);
 8004d6e:	2070      	movs	r0, #112	; 0x70
 8004d70:	f7ff fd2a 	bl	80047c8 <AS7341_Read_Byte>
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]
  data1 = AS7341_Read_Byte(AS7341_LED);
 8004d78:	2074      	movs	r0, #116	; 0x74
 8004d7a:	f7ff fd25 	bl	80047c8 <AS7341_Read_Byte>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	73bb      	strb	r3, [r7, #14]
  if(flag== true)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d104      	bne.n	8004d92 <AS7341_EnableLED+0x3a>
	{
    data = data | 0x08;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	f043 0308 	orr.w	r3, r3, #8
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	e00c      	b.n	8004dac <AS7341_EnableLED+0x54>
	} 
	else 
	{
    data = data & 0xf7;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	f023 0308 	bic.w	r3, r3, #8
 8004d98:	73fb      	strb	r3, [r7, #15]
    data1 = data1 & 0x7f;
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da0:	73bb      	strb	r3, [r7, #14]
		AS7341_Write_Byte(AS7341_LED,data1);
 8004da2:	7bbb      	ldrb	r3, [r7, #14]
 8004da4:	4619      	mov	r1, r3
 8004da6:	2074      	movs	r0, #116	; 0x74
 8004da8:	f7ff fd1d 	bl	80047e6 <AS7341_Write_Byte>
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	4619      	mov	r1, r3
 8004db0:	2070      	movs	r0, #112	; 0x70
 8004db2:	f7ff fd18 	bl	80047e6 <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8004db6:	2000      	movs	r0, #0
 8004db8:	f000 f804 	bl	8004dc4 <AS7341_SetBank>
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8004dd2:	20a9      	movs	r0, #169	; 0xa9
 8004dd4:	f7ff fcf8 	bl	80047c8 <AS7341_Read_Byte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 8004ddc:	79fb      	ldrb	r3, [r7, #7]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d103      	bne.n	8004dea <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	f043 0310 	orr.w	r3, r3, #16
 8004de8:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	f023 0310 	bic.w	r3, r3, #16
 8004df6:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	20a9      	movs	r0, #169	; 0xa9
 8004dfe:	f7ff fcf2 	bl	80047e6 <AS7341_Write_Byte>
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <AS7341_ControlLed>:
info：   LED 			 :   true  : LED ON
											 false : LED OFF
         current   :  intensity control
******************************************************************************/
void AS7341_ControlLed(UBYTE LED,UBYTE current)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	4603      	mov	r3, r0
 8004e12:	460a      	mov	r2, r1
 8004e14:	71fb      	strb	r3, [r7, #7]
 8004e16:	4613      	mov	r3, r2
 8004e18:	71bb      	strb	r3, [r7, #6]
  UBYTE data=0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  if(current < 1) current = 1;
 8004e1e:	79bb      	ldrb	r3, [r7, #6]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <AS7341_ControlLed+0x1e>
 8004e24:	2301      	movs	r3, #1
 8004e26:	71bb      	strb	r3, [r7, #6]
    current--;
 8004e28:	79bb      	ldrb	r3, [r7, #6]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	71bb      	strb	r3, [r7, #6]
  if(current > 19) current = 19;
 8004e2e:	79bb      	ldrb	r3, [r7, #6]
 8004e30:	2b13      	cmp	r3, #19
 8004e32:	d901      	bls.n	8004e38 <AS7341_ControlLed+0x2e>
 8004e34:	2313      	movs	r3, #19
 8004e36:	71bb      	strb	r3, [r7, #6]
  AS7341_SetBank(1); 
 8004e38:	2001      	movs	r0, #1
 8004e3a:	f7ff ffc3 	bl	8004dc4 <AS7341_SetBank>
	if(LED == true)	
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d104      	bne.n	8004e4e <AS7341_ControlLed+0x44>
		data = 0x80 | current;
 8004e44:	79bb      	ldrb	r3, [r7, #6]
 8004e46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e001      	b.n	8004e52 <AS7341_ControlLed+0x48>
	else	
		data = current;
 8004e4e:	79bb      	ldrb	r3, [r7, #6]
 8004e50:	73fb      	strb	r3, [r7, #15]
  AS7341_Write_Byte(AS7341_LED,data);
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	4619      	mov	r1, r3
 8004e56:	2074      	movs	r0, #116	; 0x74
 8004e58:	f7ff fcc5 	bl	80047e6 <AS7341_Write_Byte>
  DEV_Delay_ms(100);
 8004e5c:	2064      	movs	r0, #100	; 0x64
 8004e5e:	f000 f807 	bl	8004e70 <DEV_Delay_ms>
  AS7341_SetBank(0);
 8004e62:	2000      	movs	r0, #0
 8004e64:	f7ff ffae 	bl	8004dc4 <AS7341_SetBank>
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fc41 	bl	8005700 <HAL_Delay>
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <GPIO_Config>:


void GPIO_Config(void)
{
 8004e86:	b480      	push	{r7}
 8004e88:	af00      	add	r7, sp, #0
    //DEV_GPIO_Mode(INT_PIN, 0);
}
 8004e8a:	bf00      	nop
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
	...

08004e94 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <DEV_I2C_Init+0x20>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8004ea4:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <DEV_I2C_Init+0x24>)
 8004ea6:	79fb      	ldrb	r3, [r7, #7]
 8004ea8:	7013      	strb	r3, [r2, #0]
#endif
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr
 8004eb4:	200000a5 	.word	0x200000a5
 8004eb8:	200000a6 	.word	0x200000a6

08004ebc <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af04      	add	r7, sp, #16
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	71fb      	strb	r3, [r7, #7]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 8004ecc:	2300      	movs	r3, #0
 8004ece:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8004ed0:	79bb      	ldrb	r3, [r7, #6]
 8004ed2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8004ed4:	4b09      	ldr	r3, [pc, #36]	; (8004efc <I2C_Write_Byte+0x40>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b299      	uxth	r1, r3
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	2320      	movs	r3, #32
 8004ee0:	9302      	str	r3, [sp, #8]
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	f107 030c 	add.w	r3, r7, #12
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	2301      	movs	r3, #1
 8004eee:	4804      	ldr	r0, [pc, #16]	; (8004f00 <I2C_Write_Byte+0x44>)
 8004ef0:	f000 ffe6 	bl	8005ec0 <HAL_I2C_Mem_Write>
#endif
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	200000a6 	.word	0x200000a6
 8004f00:	200000a8 	.word	0x200000a8

08004f04 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af04      	add	r7, sp, #16
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 8004f0e:	2300      	movs	r3, #0
 8004f10:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <I2C_Read_Byte+0x3c>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	b299      	uxth	r1, r3
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	2320      	movs	r3, #32
 8004f22:	9302      	str	r3, [sp, #8]
 8004f24:	2301      	movs	r3, #1
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	f107 030c 	add.w	r3, r7, #12
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4804      	ldr	r0, [pc, #16]	; (8004f44 <I2C_Read_Byte+0x40>)
 8004f32:	f001 f8bf 	bl	80060b4 <HAL_I2C_Mem_Read>
	return Buf[0];
 8004f36:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	200000a6 	.word	0x200000a6
 8004f44:	200000a8 	.word	0x200000a8

08004f48 <DEV_ModuleInit>:
function:	Module Initialize, the library and initialize the pins, SPI protocol
parameter:
Info:
******************************************************************************/
UBYTE DEV_ModuleInit(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
		GPIO_Config();
 8004f4c:	f7ff ff9b 	bl	8004e86 <GPIO_Config>
    DEV_I2C_Init(0x39<<1);
 8004f50:	2072      	movs	r0, #114	; 0x72
 8004f52:	f7ff ff9f 	bl	8004e94 <DEV_I2C_Init>
    return 0;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <MX_GPIO_Init+0x40>)
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <MX_GPIO_Init+0x40>)
 8004f68:	f043 0308 	orr.w	r3, r3, #8
 8004f6c:	6193      	str	r3, [r2, #24]
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <MX_GPIO_Init+0x40>)
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7a:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <MX_GPIO_Init+0x40>)
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	4a07      	ldr	r2, [pc, #28]	; (8004f9c <MX_GPIO_Init+0x40>)
 8004f80:	f043 0304 	orr.w	r3, r3, #4
 8004f84:	6193      	str	r3, [r2, #24]
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <MX_GPIO_Init+0x40>)
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]

}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	40021000 	.word	0x40021000

08004fa0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fa6:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <MX_I2C1_Init+0x54>)
 8004fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fac:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <MX_I2C1_Init+0x58>)
 8004fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004fd6:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004fdc:	4804      	ldr	r0, [pc, #16]	; (8004ff0 <MX_I2C1_Init+0x50>)
 8004fde:	f000 fe2b 	bl	8005c38 <HAL_I2C_Init>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004fe8:	f000 f92b 	bl	8005242 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004fec:	bf00      	nop
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200000a8 	.word	0x200000a8
 8004ff4:	40005400 	.word	0x40005400
 8004ff8:	000186a0 	.word	0x000186a0

08004ffc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005000:	4b12      	ldr	r3, [pc, #72]	; (800504c <MX_I2C2_Init+0x50>)
 8005002:	4a13      	ldr	r2, [pc, #76]	; (8005050 <MX_I2C2_Init+0x54>)
 8005004:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005006:	4b11      	ldr	r3, [pc, #68]	; (800504c <MX_I2C2_Init+0x50>)
 8005008:	4a12      	ldr	r2, [pc, #72]	; (8005054 <MX_I2C2_Init+0x58>)
 800500a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <MX_I2C2_Init+0x50>)
 800500e:	2200      	movs	r2, #0
 8005010:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005012:	4b0e      	ldr	r3, [pc, #56]	; (800504c <MX_I2C2_Init+0x50>)
 8005014:	2200      	movs	r2, #0
 8005016:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <MX_I2C2_Init+0x50>)
 800501a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800501e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005020:	4b0a      	ldr	r3, [pc, #40]	; (800504c <MX_I2C2_Init+0x50>)
 8005022:	2200      	movs	r2, #0
 8005024:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005026:	4b09      	ldr	r3, [pc, #36]	; (800504c <MX_I2C2_Init+0x50>)
 8005028:	2200      	movs	r2, #0
 800502a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <MX_I2C2_Init+0x50>)
 800502e:	2200      	movs	r2, #0
 8005030:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <MX_I2C2_Init+0x50>)
 8005034:	2200      	movs	r2, #0
 8005036:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005038:	4804      	ldr	r0, [pc, #16]	; (800504c <MX_I2C2_Init+0x50>)
 800503a:	f000 fdfd 	bl	8005c38 <HAL_I2C_Init>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005044:	f000 f8fd 	bl	8005242 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005048:	bf00      	nop
 800504a:	bd80      	pop	{r7, pc}
 800504c:	200000fc 	.word	0x200000fc
 8005050:	40005800 	.word	0x40005800
 8005054:	000186a0 	.word	0x000186a0

08005058 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	f107 0318 	add.w	r3, r7, #24
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a2b      	ldr	r2, [pc, #172]	; (8005120 <HAL_I2C_MspInit+0xc8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d124      	bne.n	80050c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005078:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	4a29      	ldr	r2, [pc, #164]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 800507e:	f043 0308 	orr.w	r3, r3, #8
 8005082:	6193      	str	r3, [r2, #24]
 8005084:	4b27      	ldr	r3, [pc, #156]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005090:	23c0      	movs	r3, #192	; 0xc0
 8005092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005094:	2312      	movs	r3, #18
 8005096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005098:	2303      	movs	r3, #3
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509c:	f107 0318 	add.w	r3, r7, #24
 80050a0:	4619      	mov	r1, r3
 80050a2:	4821      	ldr	r0, [pc, #132]	; (8005128 <HAL_I2C_MspInit+0xd0>)
 80050a4:	f000 fc34 	bl	8005910 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050a8:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 80050ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050b2:	61d3      	str	r3, [r2, #28]
 80050b4:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80050c0:	e029      	b.n	8005116 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a19      	ldr	r2, [pc, #100]	; (800512c <HAL_I2C_MspInit+0xd4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d124      	bne.n	8005116 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050cc:	4b15      	ldr	r3, [pc, #84]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	4a14      	ldr	r2, [pc, #80]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 80050d2:	f043 0308 	orr.w	r3, r3, #8
 80050d6:	6193      	str	r3, [r2, #24]
 80050d8:	4b12      	ldr	r3, [pc, #72]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80050e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050ea:	2312      	movs	r3, #18
 80050ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ee:	2303      	movs	r3, #3
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f2:	f107 0318 	add.w	r3, r7, #24
 80050f6:	4619      	mov	r1, r3
 80050f8:	480b      	ldr	r0, [pc, #44]	; (8005128 <HAL_I2C_MspInit+0xd0>)
 80050fa:	f000 fc09 	bl	8005910 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80050fe:	4b09      	ldr	r3, [pc, #36]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	4a08      	ldr	r2, [pc, #32]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 8005104:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005108:	61d3      	str	r3, [r2, #28]
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_I2C_MspInit+0xcc>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
}
 8005116:	bf00      	nop
 8005118:	3728      	adds	r7, #40	; 0x28
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40005400 	.word	0x40005400
 8005124:	40021000 	.word	0x40021000
 8005128:	40010c00 	.word	0x40010c00
 800512c:	40005800 	.word	0x40005800

08005130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b0e6      	sub	sp, #408	; 0x198
 8005134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  light_t test = {0};
 8005136:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800513a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800513e:	4618      	mov	r0, r3
 8005140:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8005144:	461a      	mov	r2, r3
 8005146:	2100      	movs	r1, #0
 8005148:	f002 fc14 	bl	8007974 <memset>
	  test.pdata1 = &data1;
 800514c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8005150:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005154:	4a17      	ldr	r2, [pc, #92]	; (80051b4 <main+0x84>)
 8005156:	601a      	str	r2, [r3, #0]
	  test.pdata2 = &data2;
 8005158:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800515c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <main+0x88>)
 8005162:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005164:	f000 fa6a 	bl	800563c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005168:	f000 f82a 	bl	80051c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800516c:	f7ff fef6 	bl	8004f5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8005170:	f7ff ff16 	bl	8004fa0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005174:	f7ff ff42 	bl	8004ffc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8005178:	f000 f9c4 	bl	8005504 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 800517c:	480f      	ldr	r0, [pc, #60]	; (80051bc <main+0x8c>)
 800517e:	f000 f865 	bl	800524c <RetargetInit>
  DEV_ModuleInit();
 8005182:	f7ff fee1 	bl	8004f48 <DEV_ModuleInit>
  Device_Init();
 8005186:	f7fe ff63 	bl	8004050 <Device_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  TemCalculate(data1,data2);
	  My_Getdata_test(&test);
 800518a:	463b      	mov	r3, r7
 800518c:	4618      	mov	r0, r3
 800518e:	f7fe fddf 	bl	8003d50 <My_Getdata_test>
	  test.light_attrs.cdc = TemCalculate(&test);
 8005192:	463b      	mov	r3, r7
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe ff73 	bl	8004080 <TemCalculate>
 800519a:	4603      	mov	r3, r0
 800519c:	461a      	mov	r2, r3
 800519e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80051a2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80051a6:	811a      	strh	r2, [r3, #8]
	  Calcute_Ra(&test);
 80051a8:	463b      	mov	r3, r7
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb ffec 	bl	8001188 <Calcute_Ra>
	  My_Getdata_test(&test);
 80051b0:	e7eb      	b.n	800518a <main+0x5a>
 80051b2:	bf00      	nop
 80051b4:	2000008c 	.word	0x2000008c
 80051b8:	20000098 	.word	0x20000098
 80051bc:	20000158 	.word	0x20000158

080051c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b090      	sub	sp, #64	; 0x40
 80051c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051c6:	f107 0318 	add.w	r3, r7, #24
 80051ca:	2228      	movs	r2, #40	; 0x28
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f002 fbd0 	bl	8007974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051d4:	1d3b      	adds	r3, r7, #4
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	605a      	str	r2, [r3, #4]
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	60da      	str	r2, [r3, #12]
 80051e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051e2:	2302      	movs	r3, #2
 80051e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051e6:	2301      	movs	r3, #1
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051ea:	2310      	movs	r3, #16
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051ee:	2302      	movs	r3, #2
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80051f2:	2300      	movs	r3, #0
 80051f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80051f6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051fc:	f107 0318 	add.w	r3, r7, #24
 8005200:	4618      	mov	r0, r3
 8005202:	f001 fd19 	bl	8006c38 <HAL_RCC_OscConfig>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800520c:	f000 f819 	bl	8005242 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005210:	230f      	movs	r3, #15
 8005212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005214:	2302      	movs	r3, #2
 8005216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800521c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	2102      	movs	r1, #2
 800522a:	4618      	mov	r0, r3
 800522c:	f001 ff86 	bl	800713c <HAL_RCC_ClockConfig>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8005236:	f000 f804 	bl	8005242 <Error_Handler>
  }
}
 800523a:	bf00      	nop
 800523c:	3740      	adds	r7, #64	; 0x40
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005246:	b672      	cpsid	i
}
 8005248:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800524a:	e7fe      	b.n	800524a <Error_Handler+0x8>

0800524c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8005254:	4a07      	ldr	r2, [pc, #28]	; (8005274 <RetargetInit+0x28>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800525a:	4b07      	ldr	r3, [pc, #28]	; (8005278 <RetargetInit+0x2c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6898      	ldr	r0, [r3, #8]
 8005260:	2300      	movs	r3, #0
 8005262:	2202      	movs	r2, #2
 8005264:	2100      	movs	r1, #0
 8005266:	f002 fc1b 	bl	8007aa0 <setvbuf>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000150 	.word	0x20000150
 8005278:	2000000c 	.word	0x2000000c

0800527c <_isatty>:

int _isatty(int fd) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	db04      	blt.n	8005294 <_isatty+0x18>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b02      	cmp	r3, #2
 800528e:	dc01      	bgt.n	8005294 <_isatty+0x18>
    return 1;
 8005290:	2301      	movs	r3, #1
 8005292:	e005      	b.n	80052a0 <_isatty+0x24>

  errno = EBADF;
 8005294:	f002 fb44 	bl	8007920 <__errno>
 8005298:	4603      	mov	r3, r0
 800529a:	2209      	movs	r2, #9
 800529c:	601a      	str	r2, [r3, #0]
  return 0;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <_write>:

int _write(int fd, char* ptr, int len) {
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d002      	beq.n	80052c0 <_write+0x18>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d111      	bne.n	80052e4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <_write+0x54>)
 80052c2:	6818      	ldr	r0, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	f04f 33ff 	mov.w	r3, #4294967295
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	f002 f91a 	bl	8007506 <HAL_UART_Transmit>
 80052d2:	4603      	mov	r3, r0
 80052d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <_write+0x38>
      return len;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	e008      	b.n	80052f2 <_write+0x4a>
    else
      return EIO;
 80052e0:	2305      	movs	r3, #5
 80052e2:	e006      	b.n	80052f2 <_write+0x4a>
  }
  errno = EBADF;
 80052e4:	f002 fb1c 	bl	8007920 <__errno>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2209      	movs	r2, #9
 80052ec:	601a      	str	r2, [r3, #0]
  return -1;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000150 	.word	0x20000150

08005300 <_close>:

int _close(int fd) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	db04      	blt.n	8005318 <_close+0x18>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b02      	cmp	r3, #2
 8005312:	dc01      	bgt.n	8005318 <_close+0x18>
    return 0;
 8005314:	2300      	movs	r3, #0
 8005316:	e006      	b.n	8005326 <_close+0x26>

  errno = EBADF;
 8005318:	f002 fb02 	bl	8007920 <__errno>
 800531c:	4603      	mov	r3, r0
 800531e:	2209      	movs	r2, #9
 8005320:	601a      	str	r2, [r3, #0]
  return -1;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800533a:	f002 faf1 	bl	8007920 <__errno>
 800533e:	4603      	mov	r3, r0
 8005340:	2209      	movs	r2, #9
 8005342:	601a      	str	r2, [r3, #0]
  return -1;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <_read>:

int _read(int fd, char* ptr, int len) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d110      	bne.n	8005384 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8005362:	4b0e      	ldr	r3, [pc, #56]	; (800539c <_read+0x4c>)
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
 800536a:	2201      	movs	r2, #1
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	f002 f95c 	bl	800762a <HAL_UART_Receive>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8005376:	7dfb      	ldrb	r3, [r7, #23]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <_read+0x30>
      return 1;
 800537c:	2301      	movs	r3, #1
 800537e:	e008      	b.n	8005392 <_read+0x42>
    else
      return EIO;
 8005380:	2305      	movs	r3, #5
 8005382:	e006      	b.n	8005392 <_read+0x42>
  }
  errno = EBADF;
 8005384:	f002 facc 	bl	8007920 <__errno>
 8005388:	4603      	mov	r3, r0
 800538a:	2209      	movs	r2, #9
 800538c:	601a      	str	r2, [r3, #0]
  return -1;
 800538e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000150 	.word	0x20000150

080053a0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	db08      	blt.n	80053c2 <_fstat+0x22>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	dc05      	bgt.n	80053c2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053bc:	605a      	str	r2, [r3, #4]
    return 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	e005      	b.n	80053ce <_fstat+0x2e>
  }

  errno = EBADF;
 80053c2:	f002 faad 	bl	8007920 <__errno>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2209      	movs	r2, #9
 80053ca:	601a      	str	r2, [r3, #0]
  return 0;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80053de:	4b15      	ldr	r3, [pc, #84]	; (8005434 <HAL_MspInit+0x5c>)
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	4a14      	ldr	r2, [pc, #80]	; (8005434 <HAL_MspInit+0x5c>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6193      	str	r3, [r2, #24]
 80053ea:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_MspInit+0x5c>)
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <HAL_MspInit+0x5c>)
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <HAL_MspInit+0x5c>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	61d3      	str	r3, [r2, #28]
 8005402:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <HAL_MspInit+0x5c>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	607b      	str	r3, [r7, #4]
 800540c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800540e:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_MspInit+0x60>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	4a04      	ldr	r2, [pc, #16]	; (8005438 <HAL_MspInit+0x60>)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	40021000 	.word	0x40021000
 8005438:	40010000 	.word	0x40010000

0800543c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005440:	e7fe      	b.n	8005440 <NMI_Handler+0x4>

08005442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005442:	b480      	push	{r7}
 8005444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005446:	e7fe      	b.n	8005446 <HardFault_Handler+0x4>

08005448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800544c:	e7fe      	b.n	800544c <MemManage_Handler+0x4>

0800544e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800544e:	b480      	push	{r7}
 8005450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005452:	e7fe      	b.n	8005452 <BusFault_Handler+0x4>

08005454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005458:	e7fe      	b.n	8005458 <UsageFault_Handler+0x4>

0800545a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800545e:	bf00      	nop
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr

08005466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005466:	b480      	push	{r7}
 8005468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr

08005472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005472:	b480      	push	{r7}
 8005474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005476:	bf00      	nop
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005482:	f000 f921 	bl	80056c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005494:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <_sbrk+0x5c>)
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <_sbrk+0x60>)
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <_sbrk+0x64>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054a8:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <_sbrk+0x64>)
 80054aa:	4a12      	ldr	r2, [pc, #72]	; (80054f4 <_sbrk+0x68>)
 80054ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054ae:	4b10      	ldr	r3, [pc, #64]	; (80054f0 <_sbrk+0x64>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d207      	bcs.n	80054cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054bc:	f002 fa30 	bl	8007920 <__errno>
 80054c0:	4603      	mov	r3, r0
 80054c2:	220c      	movs	r2, #12
 80054c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	e009      	b.n	80054e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <_sbrk+0x64>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <_sbrk+0x64>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	4a05      	ldr	r2, [pc, #20]	; (80054f0 <_sbrk+0x64>)
 80054dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20010000 	.word	0x20010000
 80054ec:	00000400 	.word	0x00000400
 80054f0:	20000154 	.word	0x20000154
 80054f4:	200001b0 	.word	0x200001b0

080054f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054fc:	bf00      	nop
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005508:	4b11      	ldr	r3, [pc, #68]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 800550a:	4a12      	ldr	r2, [pc, #72]	; (8005554 <MX_USART1_UART_Init+0x50>)
 800550c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 8005510:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005516:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 8005518:	2200      	movs	r2, #0
 800551a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 800551e:	2200      	movs	r2, #0
 8005520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005522:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 8005524:	2200      	movs	r2, #0
 8005526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005528:	4b09      	ldr	r3, [pc, #36]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 800552a:	220c      	movs	r2, #12
 800552c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800552e:	4b08      	ldr	r3, [pc, #32]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 8005530:	2200      	movs	r2, #0
 8005532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 8005536:	2200      	movs	r2, #0
 8005538:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800553a:	4805      	ldr	r0, [pc, #20]	; (8005550 <MX_USART1_UART_Init+0x4c>)
 800553c:	f001 ff96 	bl	800746c <HAL_UART_Init>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005546:	f7ff fe7c 	bl	8005242 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000158 	.word	0x20000158
 8005554:	40013800 	.word	0x40013800

08005558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005560:	f107 0310 	add.w	r3, r7, #16
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	605a      	str	r2, [r3, #4]
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1c      	ldr	r2, [pc, #112]	; (80055e4 <HAL_UART_MspInit+0x8c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d131      	bne.n	80055dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005578:	4b1b      	ldr	r3, [pc, #108]	; (80055e8 <HAL_UART_MspInit+0x90>)
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_UART_MspInit+0x90>)
 800557e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005582:	6193      	str	r3, [r2, #24]
 8005584:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <HAL_UART_MspInit+0x90>)
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005590:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <HAL_UART_MspInit+0x90>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <HAL_UART_MspInit+0x90>)
 8005596:	f043 0304 	orr.w	r3, r3, #4
 800559a:	6193      	str	r3, [r2, #24]
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_UART_MspInit+0x90>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ae:	2302      	movs	r3, #2
 80055b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055b2:	2303      	movs	r3, #3
 80055b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b6:	f107 0310 	add.w	r3, r7, #16
 80055ba:	4619      	mov	r1, r3
 80055bc:	480b      	ldr	r0, [pc, #44]	; (80055ec <HAL_UART_MspInit+0x94>)
 80055be:	f000 f9a7 	bl	8005910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80055c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055cc:	2300      	movs	r3, #0
 80055ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d0:	f107 0310 	add.w	r3, r7, #16
 80055d4:	4619      	mov	r1, r3
 80055d6:	4805      	ldr	r0, [pc, #20]	; (80055ec <HAL_UART_MspInit+0x94>)
 80055d8:	f000 f99a 	bl	8005910 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80055dc:	bf00      	nop
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40013800 	.word	0x40013800
 80055e8:	40021000 	.word	0x40021000
 80055ec:	40010800 	.word	0x40010800

080055f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055f0:	480c      	ldr	r0, [pc, #48]	; (8005624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055f2:	490d      	ldr	r1, [pc, #52]	; (8005628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055f4:	4a0d      	ldr	r2, [pc, #52]	; (800562c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055f8:	e002      	b.n	8005600 <LoopCopyDataInit>

080055fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055fe:	3304      	adds	r3, #4

08005600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005604:	d3f9      	bcc.n	80055fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005606:	4a0a      	ldr	r2, [pc, #40]	; (8005630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005608:	4c0a      	ldr	r4, [pc, #40]	; (8005634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800560a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800560c:	e001      	b.n	8005612 <LoopFillZerobss>

0800560e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800560e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005610:	3204      	adds	r2, #4

08005612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005614:	d3fb      	bcc.n	800560e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005616:	f7ff ff6f 	bl	80054f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800561a:	f002 f987 	bl	800792c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800561e:	f7ff fd87 	bl	8005130 <main>
  bx lr
 8005622:	4770      	bx	lr
  ldr r0, =_sdata
 8005624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005628:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800562c:	08009850 	.word	0x08009850
  ldr r2, =_sbss
 8005630:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005634:	200001b0 	.word	0x200001b0

08005638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005638:	e7fe      	b.n	8005638 <ADC1_2_IRQHandler>
	...

0800563c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005640:	4b08      	ldr	r3, [pc, #32]	; (8005664 <HAL_Init+0x28>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a07      	ldr	r2, [pc, #28]	; (8005664 <HAL_Init+0x28>)
 8005646:	f043 0310 	orr.w	r3, r3, #16
 800564a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800564c:	2003      	movs	r0, #3
 800564e:	f000 f92b 	bl	80058a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005652:	200f      	movs	r0, #15
 8005654:	f000 f808 	bl	8005668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005658:	f7ff febe 	bl	80053d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40022000 	.word	0x40022000

08005668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005670:	4b12      	ldr	r3, [pc, #72]	; (80056bc <HAL_InitTick+0x54>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <HAL_InitTick+0x58>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4619      	mov	r1, r3
 800567a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800567e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005682:	fbb2 f3f3 	udiv	r3, r2, r3
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f935 	bl	80058f6 <HAL_SYSTICK_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e00e      	b.n	80056b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d80a      	bhi.n	80056b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800569c:	2200      	movs	r2, #0
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	f000 f90b 	bl	80058be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056a8:	4a06      	ldr	r2, [pc, #24]	; (80056c4 <HAL_InitTick+0x5c>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e000      	b.n	80056b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20000000 	.word	0x20000000
 80056c0:	20000008 	.word	0x20000008
 80056c4:	20000004 	.word	0x20000004

080056c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c8:	b480      	push	{r7}
 80056ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_IncTick+0x1c>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_IncTick+0x20>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4413      	add	r3, r2
 80056d8:	4a03      	ldr	r2, [pc, #12]	; (80056e8 <HAL_IncTick+0x20>)
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr
 80056e4:	20000008 	.word	0x20000008
 80056e8:	2000019c 	.word	0x2000019c

080056ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return uwTick;
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <HAL_GetTick+0x10>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr
 80056fc:	2000019c 	.word	0x2000019c

08005700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005708:	f7ff fff0 	bl	80056ec <HAL_GetTick>
 800570c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005718:	d005      	beq.n	8005726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HAL_Delay+0x44>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4413      	add	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005726:	bf00      	nop
 8005728:	f7ff ffe0 	bl	80056ec <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	429a      	cmp	r2, r3
 8005736:	d8f7      	bhi.n	8005728 <HAL_Delay+0x28>
  {
  }
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000008 	.word	0x20000008

08005748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <__NVIC_SetPriorityGrouping+0x44>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005764:	4013      	ands	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800577a:	4a04      	ldr	r2, [pc, #16]	; (800578c <__NVIC_SetPriorityGrouping+0x44>)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	60d3      	str	r3, [r2, #12]
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	bc80      	pop	{r7}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	e000ed00 	.word	0xe000ed00

08005790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005794:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	f003 0307 	and.w	r3, r3, #7
}
 800579e:	4618      	mov	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	db0a      	blt.n	80057d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	490c      	ldr	r1, [pc, #48]	; (80057f8 <__NVIC_SetPriority+0x4c>)
 80057c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ca:	0112      	lsls	r2, r2, #4
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	440b      	add	r3, r1
 80057d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057d4:	e00a      	b.n	80057ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4908      	ldr	r1, [pc, #32]	; (80057fc <__NVIC_SetPriority+0x50>)
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	3b04      	subs	r3, #4
 80057e4:	0112      	lsls	r2, r2, #4
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	440b      	add	r3, r1
 80057ea:	761a      	strb	r2, [r3, #24]
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000e100 	.word	0xe000e100
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	; 0x24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f1c3 0307 	rsb	r3, r3, #7
 800581a:	2b04      	cmp	r3, #4
 800581c:	bf28      	it	cs
 800581e:	2304      	movcs	r3, #4
 8005820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3304      	adds	r3, #4
 8005826:	2b06      	cmp	r3, #6
 8005828:	d902      	bls.n	8005830 <NVIC_EncodePriority+0x30>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3b03      	subs	r3, #3
 800582e:	e000      	b.n	8005832 <NVIC_EncodePriority+0x32>
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005834:	f04f 32ff 	mov.w	r2, #4294967295
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43da      	mvns	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	401a      	ands	r2, r3
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005848:	f04f 31ff 	mov.w	r1, #4294967295
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	fa01 f303 	lsl.w	r3, r1, r3
 8005852:	43d9      	mvns	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005858:	4313      	orrs	r3, r2
         );
}
 800585a:	4618      	mov	r0, r3
 800585c:	3724      	adds	r7, #36	; 0x24
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005874:	d301      	bcc.n	800587a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005876:	2301      	movs	r3, #1
 8005878:	e00f      	b.n	800589a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <SysTick_Config+0x40>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3b01      	subs	r3, #1
 8005880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005882:	210f      	movs	r1, #15
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	f7ff ff90 	bl	80057ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <SysTick_Config+0x40>)
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <SysTick_Config+0x40>)
 8005894:	2207      	movs	r2, #7
 8005896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	e000e010 	.word	0xe000e010

080058a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff ff49 	bl	8005748 <__NVIC_SetPriorityGrouping>
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4603      	mov	r3, r0
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058d0:	f7ff ff5e 	bl	8005790 <__NVIC_GetPriorityGrouping>
 80058d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff ff90 	bl	8005800 <NVIC_EncodePriority>
 80058e0:	4602      	mov	r2, r0
 80058e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff5f 	bl	80057ac <__NVIC_SetPriority>
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ffb0 	bl	8005864 <SysTick_Config>
 8005904:	4603      	mov	r3, r0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005910:	b480      	push	{r7}
 8005912:	b08b      	sub	sp, #44	; 0x2c
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800591a:	2300      	movs	r3, #0
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005922:	e179      	b.n	8005c18 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005924:	2201      	movs	r2, #1
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	4013      	ands	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	429a      	cmp	r2, r3
 800593e:	f040 8168 	bne.w	8005c12 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	4a96      	ldr	r2, [pc, #600]	; (8005ba0 <HAL_GPIO_Init+0x290>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d05e      	beq.n	8005a0a <HAL_GPIO_Init+0xfa>
 800594c:	4a94      	ldr	r2, [pc, #592]	; (8005ba0 <HAL_GPIO_Init+0x290>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d875      	bhi.n	8005a3e <HAL_GPIO_Init+0x12e>
 8005952:	4a94      	ldr	r2, [pc, #592]	; (8005ba4 <HAL_GPIO_Init+0x294>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d058      	beq.n	8005a0a <HAL_GPIO_Init+0xfa>
 8005958:	4a92      	ldr	r2, [pc, #584]	; (8005ba4 <HAL_GPIO_Init+0x294>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d86f      	bhi.n	8005a3e <HAL_GPIO_Init+0x12e>
 800595e:	4a92      	ldr	r2, [pc, #584]	; (8005ba8 <HAL_GPIO_Init+0x298>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d052      	beq.n	8005a0a <HAL_GPIO_Init+0xfa>
 8005964:	4a90      	ldr	r2, [pc, #576]	; (8005ba8 <HAL_GPIO_Init+0x298>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d869      	bhi.n	8005a3e <HAL_GPIO_Init+0x12e>
 800596a:	4a90      	ldr	r2, [pc, #576]	; (8005bac <HAL_GPIO_Init+0x29c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d04c      	beq.n	8005a0a <HAL_GPIO_Init+0xfa>
 8005970:	4a8e      	ldr	r2, [pc, #568]	; (8005bac <HAL_GPIO_Init+0x29c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d863      	bhi.n	8005a3e <HAL_GPIO_Init+0x12e>
 8005976:	4a8e      	ldr	r2, [pc, #568]	; (8005bb0 <HAL_GPIO_Init+0x2a0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d046      	beq.n	8005a0a <HAL_GPIO_Init+0xfa>
 800597c:	4a8c      	ldr	r2, [pc, #560]	; (8005bb0 <HAL_GPIO_Init+0x2a0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d85d      	bhi.n	8005a3e <HAL_GPIO_Init+0x12e>
 8005982:	2b12      	cmp	r3, #18
 8005984:	d82a      	bhi.n	80059dc <HAL_GPIO_Init+0xcc>
 8005986:	2b12      	cmp	r3, #18
 8005988:	d859      	bhi.n	8005a3e <HAL_GPIO_Init+0x12e>
 800598a:	a201      	add	r2, pc, #4	; (adr r2, 8005990 <HAL_GPIO_Init+0x80>)
 800598c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005990:	08005a0b 	.word	0x08005a0b
 8005994:	080059e5 	.word	0x080059e5
 8005998:	080059f7 	.word	0x080059f7
 800599c:	08005a39 	.word	0x08005a39
 80059a0:	08005a3f 	.word	0x08005a3f
 80059a4:	08005a3f 	.word	0x08005a3f
 80059a8:	08005a3f 	.word	0x08005a3f
 80059ac:	08005a3f 	.word	0x08005a3f
 80059b0:	08005a3f 	.word	0x08005a3f
 80059b4:	08005a3f 	.word	0x08005a3f
 80059b8:	08005a3f 	.word	0x08005a3f
 80059bc:	08005a3f 	.word	0x08005a3f
 80059c0:	08005a3f 	.word	0x08005a3f
 80059c4:	08005a3f 	.word	0x08005a3f
 80059c8:	08005a3f 	.word	0x08005a3f
 80059cc:	08005a3f 	.word	0x08005a3f
 80059d0:	08005a3f 	.word	0x08005a3f
 80059d4:	080059ed 	.word	0x080059ed
 80059d8:	08005a01 	.word	0x08005a01
 80059dc:	4a75      	ldr	r2, [pc, #468]	; (8005bb4 <HAL_GPIO_Init+0x2a4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80059e2:	e02c      	b.n	8005a3e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	623b      	str	r3, [r7, #32]
          break;
 80059ea:	e029      	b.n	8005a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	3304      	adds	r3, #4
 80059f2:	623b      	str	r3, [r7, #32]
          break;
 80059f4:	e024      	b.n	8005a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	3308      	adds	r3, #8
 80059fc:	623b      	str	r3, [r7, #32]
          break;
 80059fe:	e01f      	b.n	8005a40 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	330c      	adds	r3, #12
 8005a06:	623b      	str	r3, [r7, #32]
          break;
 8005a08:	e01a      	b.n	8005a40 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a12:	2304      	movs	r3, #4
 8005a14:	623b      	str	r3, [r7, #32]
          break;
 8005a16:	e013      	b.n	8005a40 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d105      	bne.n	8005a2c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a20:	2308      	movs	r3, #8
 8005a22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	611a      	str	r2, [r3, #16]
          break;
 8005a2a:	e009      	b.n	8005a40 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	615a      	str	r2, [r3, #20]
          break;
 8005a36:	e003      	b.n	8005a40 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	623b      	str	r3, [r7, #32]
          break;
 8005a3c:	e000      	b.n	8005a40 <HAL_GPIO_Init+0x130>
          break;
 8005a3e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2bff      	cmp	r3, #255	; 0xff
 8005a44:	d801      	bhi.n	8005a4a <HAL_GPIO_Init+0x13a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	e001      	b.n	8005a4e <HAL_GPIO_Init+0x13e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	2bff      	cmp	r3, #255	; 0xff
 8005a54:	d802      	bhi.n	8005a5c <HAL_GPIO_Init+0x14c>
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	e002      	b.n	8005a62 <HAL_GPIO_Init+0x152>
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	3b08      	subs	r3, #8
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	210f      	movs	r1, #15
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	6a39      	ldr	r1, [r7, #32]
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80c1 	beq.w	8005c12 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005a90:	4b49      	ldr	r3, [pc, #292]	; (8005bb8 <HAL_GPIO_Init+0x2a8>)
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	4a48      	ldr	r2, [pc, #288]	; (8005bb8 <HAL_GPIO_Init+0x2a8>)
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	6193      	str	r3, [r2, #24]
 8005a9c:	4b46      	ldr	r3, [pc, #280]	; (8005bb8 <HAL_GPIO_Init+0x2a8>)
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005aa8:	4a44      	ldr	r2, [pc, #272]	; (8005bbc <HAL_GPIO_Init+0x2ac>)
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	089b      	lsrs	r3, r3, #2
 8005aae:	3302      	adds	r3, #2
 8005ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	220f      	movs	r2, #15
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a3c      	ldr	r2, [pc, #240]	; (8005bc0 <HAL_GPIO_Init+0x2b0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d01f      	beq.n	8005b14 <HAL_GPIO_Init+0x204>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a3b      	ldr	r2, [pc, #236]	; (8005bc4 <HAL_GPIO_Init+0x2b4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d019      	beq.n	8005b10 <HAL_GPIO_Init+0x200>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a3a      	ldr	r2, [pc, #232]	; (8005bc8 <HAL_GPIO_Init+0x2b8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d013      	beq.n	8005b0c <HAL_GPIO_Init+0x1fc>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a39      	ldr	r2, [pc, #228]	; (8005bcc <HAL_GPIO_Init+0x2bc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00d      	beq.n	8005b08 <HAL_GPIO_Init+0x1f8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a38      	ldr	r2, [pc, #224]	; (8005bd0 <HAL_GPIO_Init+0x2c0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <HAL_GPIO_Init+0x1f4>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a37      	ldr	r2, [pc, #220]	; (8005bd4 <HAL_GPIO_Init+0x2c4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d101      	bne.n	8005b00 <HAL_GPIO_Init+0x1f0>
 8005afc:	2305      	movs	r3, #5
 8005afe:	e00a      	b.n	8005b16 <HAL_GPIO_Init+0x206>
 8005b00:	2306      	movs	r3, #6
 8005b02:	e008      	b.n	8005b16 <HAL_GPIO_Init+0x206>
 8005b04:	2304      	movs	r3, #4
 8005b06:	e006      	b.n	8005b16 <HAL_GPIO_Init+0x206>
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e004      	b.n	8005b16 <HAL_GPIO_Init+0x206>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e002      	b.n	8005b16 <HAL_GPIO_Init+0x206>
 8005b10:	2301      	movs	r3, #1
 8005b12:	e000      	b.n	8005b16 <HAL_GPIO_Init+0x206>
 8005b14:	2300      	movs	r3, #0
 8005b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b18:	f002 0203 	and.w	r2, r2, #3
 8005b1c:	0092      	lsls	r2, r2, #2
 8005b1e:	4093      	lsls	r3, r2
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b26:	4925      	ldr	r1, [pc, #148]	; (8005bbc <HAL_GPIO_Init+0x2ac>)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	089b      	lsrs	r3, r3, #2
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4924      	ldr	r1, [pc, #144]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]
 8005b4c:	e006      	b.n	8005b5c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b4e:	4b22      	ldr	r3, [pc, #136]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	43db      	mvns	r3, r3
 8005b56:	4920      	ldr	r1, [pc, #128]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d006      	beq.n	8005b76 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005b68:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	491a      	ldr	r1, [pc, #104]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
 8005b74:	e006      	b.n	8005b84 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	4916      	ldr	r1, [pc, #88]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b80:	4013      	ands	r3, r2
 8005b82:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d025      	beq.n	8005bdc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	4910      	ldr	r1, [pc, #64]	; (8005bd8 <HAL_GPIO_Init+0x2c8>)
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	608b      	str	r3, [r1, #8]
 8005b9c:	e025      	b.n	8005bea <HAL_GPIO_Init+0x2da>
 8005b9e:	bf00      	nop
 8005ba0:	10320000 	.word	0x10320000
 8005ba4:	10310000 	.word	0x10310000
 8005ba8:	10220000 	.word	0x10220000
 8005bac:	10210000 	.word	0x10210000
 8005bb0:	10120000 	.word	0x10120000
 8005bb4:	10110000 	.word	0x10110000
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010800 	.word	0x40010800
 8005bc4:	40010c00 	.word	0x40010c00
 8005bc8:	40011000 	.word	0x40011000
 8005bcc:	40011400 	.word	0x40011400
 8005bd0:	40011800 	.word	0x40011800
 8005bd4:	40011c00 	.word	0x40011c00
 8005bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005bdc:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <HAL_GPIO_Init+0x324>)
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	4913      	ldr	r1, [pc, #76]	; (8005c34 <HAL_GPIO_Init+0x324>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005bf6:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <HAL_GPIO_Init+0x324>)
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	490e      	ldr	r1, [pc, #56]	; (8005c34 <HAL_GPIO_Init+0x324>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60cb      	str	r3, [r1, #12]
 8005c02:	e006      	b.n	8005c12 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c04:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <HAL_GPIO_Init+0x324>)
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	4909      	ldr	r1, [pc, #36]	; (8005c34 <HAL_GPIO_Init+0x324>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	3301      	adds	r3, #1
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f47f ae7e 	bne.w	8005924 <HAL_GPIO_Init+0x14>
  }
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	372c      	adds	r7, #44	; 0x2c
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr
 8005c34:	40010400 	.word	0x40010400

08005c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e12b      	b.n	8005ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff f9fa 	bl	8005058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2224      	movs	r2, #36	; 0x24
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c9c:	f001 fba0 	bl	80073e0 <HAL_RCC_GetPCLK1Freq>
 8005ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4a81      	ldr	r2, [pc, #516]	; (8005eac <HAL_I2C_Init+0x274>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d807      	bhi.n	8005cbc <HAL_I2C_Init+0x84>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4a80      	ldr	r2, [pc, #512]	; (8005eb0 <HAL_I2C_Init+0x278>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	bf94      	ite	ls
 8005cb4:	2301      	movls	r3, #1
 8005cb6:	2300      	movhi	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	e006      	b.n	8005cca <HAL_I2C_Init+0x92>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a7d      	ldr	r2, [pc, #500]	; (8005eb4 <HAL_I2C_Init+0x27c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	bf94      	ite	ls
 8005cc4:	2301      	movls	r3, #1
 8005cc6:	2300      	movhi	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e0e7      	b.n	8005ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a78      	ldr	r2, [pc, #480]	; (8005eb8 <HAL_I2C_Init+0x280>)
 8005cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cda:	0c9b      	lsrs	r3, r3, #18
 8005cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	4a6a      	ldr	r2, [pc, #424]	; (8005eac <HAL_I2C_Init+0x274>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d802      	bhi.n	8005d0c <HAL_I2C_Init+0xd4>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	e009      	b.n	8005d20 <HAL_I2C_Init+0xe8>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	4a69      	ldr	r2, [pc, #420]	; (8005ebc <HAL_I2C_Init+0x284>)
 8005d18:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1c:	099b      	lsrs	r3, r3, #6
 8005d1e:	3301      	adds	r3, #1
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6812      	ldr	r2, [r2, #0]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	495c      	ldr	r1, [pc, #368]	; (8005eac <HAL_I2C_Init+0x274>)
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	d819      	bhi.n	8005d74 <HAL_I2C_Init+0x13c>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1e59      	subs	r1, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d54:	400b      	ands	r3, r1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_I2C_Init+0x138>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	1e59      	subs	r1, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d68:	3301      	adds	r3, #1
 8005d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6e:	e051      	b.n	8005e14 <HAL_I2C_Init+0x1dc>
 8005d70:	2304      	movs	r3, #4
 8005d72:	e04f      	b.n	8005e14 <HAL_I2C_Init+0x1dc>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d111      	bne.n	8005da0 <HAL_I2C_Init+0x168>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1e58      	subs	r0, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6859      	ldr	r1, [r3, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	440b      	add	r3, r1
 8005d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d8e:	3301      	adds	r3, #1
 8005d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	e012      	b.n	8005dc6 <HAL_I2C_Init+0x18e>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1e58      	subs	r0, r3, #1
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6859      	ldr	r1, [r3, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	0099      	lsls	r1, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005db6:	3301      	adds	r3, #1
 8005db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_Init+0x196>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e022      	b.n	8005e14 <HAL_I2C_Init+0x1dc>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10e      	bne.n	8005df4 <HAL_I2C_Init+0x1bc>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1e58      	subs	r0, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6859      	ldr	r1, [r3, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	440b      	add	r3, r1
 8005de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005de8:	3301      	adds	r3, #1
 8005dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005df2:	e00f      	b.n	8005e14 <HAL_I2C_Init+0x1dc>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1e58      	subs	r0, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6859      	ldr	r1, [r3, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	0099      	lsls	r1, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	6809      	ldr	r1, [r1, #0]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6911      	ldr	r1, [r2, #16]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	68d2      	ldr	r2, [r2, #12]
 8005e4e:	4311      	orrs	r1, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695a      	ldr	r2, [r3, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	000186a0 	.word	0x000186a0
 8005eb0:	001e847f 	.word	0x001e847f
 8005eb4:	003d08ff 	.word	0x003d08ff
 8005eb8:	431bde83 	.word	0x431bde83
 8005ebc:	10624dd3 	.word	0x10624dd3

08005ec0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	4608      	mov	r0, r1
 8005eca:	4611      	mov	r1, r2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4603      	mov	r3, r0
 8005ed0:	817b      	strh	r3, [r7, #10]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	813b      	strh	r3, [r7, #8]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005eda:	f7ff fc07 	bl	80056ec <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	f040 80d9 	bne.w	80060a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2319      	movs	r3, #25
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	496d      	ldr	r1, [pc, #436]	; (80060ac <HAL_I2C_Mem_Write+0x1ec>)
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fcc1 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005f04:	2302      	movs	r3, #2
 8005f06:	e0cc      	b.n	80060a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_I2C_Mem_Write+0x56>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e0c5      	b.n	80060a2 <HAL_I2C_Mem_Write+0x1e2>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d007      	beq.n	8005f3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2221      	movs	r2, #33	; 0x21
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2240      	movs	r2, #64	; 0x40
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a3a      	ldr	r2, [r7, #32]
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a4d      	ldr	r2, [pc, #308]	; (80060b0 <HAL_I2C_Mem_Write+0x1f0>)
 8005f7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f7e:	88f8      	ldrh	r0, [r7, #6]
 8005f80:	893a      	ldrh	r2, [r7, #8]
 8005f82:	8979      	ldrh	r1, [r7, #10]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 faf8 	bl	8006584 <I2C_RequestMemoryWrite>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d052      	beq.n	8006040 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e081      	b.n	80060a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 fd42 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d107      	bne.n	8005fc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e06b      	b.n	80060a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	781a      	ldrb	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b04      	cmp	r3, #4
 8006006:	d11b      	bne.n	8006040 <HAL_I2C_Mem_Write+0x180>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	d017      	beq.n	8006040 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1aa      	bne.n	8005f9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fd2e 	bl	8006aae <I2C_WaitOnBTFFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00d      	beq.n	8006074 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	2b04      	cmp	r3, #4
 800605e:	d107      	bne.n	8006070 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e016      	b.n	80060a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	00100002 	.word	0x00100002
 80060b0:	ffff0000 	.word	0xffff0000

080060b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08c      	sub	sp, #48	; 0x30
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	461a      	mov	r2, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	460b      	mov	r3, r1
 80060c8:	813b      	strh	r3, [r7, #8]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060d2:	f7ff fb0b 	bl	80056ec <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	f040 8244 	bne.w	800656e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	2319      	movs	r3, #25
 80060ec:	2201      	movs	r2, #1
 80060ee:	4982      	ldr	r1, [pc, #520]	; (80062f8 <HAL_I2C_Mem_Read+0x244>)
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fbc5 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
 80060fe:	e237      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_I2C_Mem_Read+0x5a>
 800610a:	2302      	movs	r3, #2
 800610c:	e230      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d007      	beq.n	8006134 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0201 	orr.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2222      	movs	r2, #34	; 0x22
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2240      	movs	r2, #64	; 0x40
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a62      	ldr	r2, [pc, #392]	; (80062fc <HAL_I2C_Mem_Read+0x248>)
 8006174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006176:	88f8      	ldrh	r0, [r7, #6]
 8006178:	893a      	ldrh	r2, [r7, #8]
 800617a:	8979      	ldrh	r1, [r7, #10]
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	4603      	mov	r3, r0
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 fa92 	bl	80066b0 <I2C_RequestMemoryRead>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e1ec      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	2b00      	cmp	r3, #0
 800619c:	d113      	bne.n	80061c6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e1c0      	b.n	8006548 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d11e      	bne.n	800620c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061de:	b672      	cpsid	i
}
 80061e0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006206:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006208:	b662      	cpsie	i
}
 800620a:	e035      	b.n	8006278 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006210:	2b02      	cmp	r3, #2
 8006212:	d11e      	bne.n	8006252 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006222:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006224:	b672      	cpsid	i
}
 8006226:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800624e:	b662      	cpsie	i
}
 8006250:	e012      	b.n	8006278 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006260:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006278:	e166      	b.n	8006548 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627e:	2b03      	cmp	r3, #3
 8006280:	f200 811f 	bhi.w	80064c2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006288:	2b01      	cmp	r3, #1
 800628a:	d123      	bne.n	80062d4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800628c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fc4d 	bl	8006b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e167      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	3b01      	subs	r3, #1
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d2:	e139      	b.n	8006548 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d152      	bne.n	8006382 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	2200      	movs	r2, #0
 80062e4:	4906      	ldr	r1, [pc, #24]	; (8006300 <HAL_I2C_Mem_Read+0x24c>)
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 faca 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e13c      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
 80062f6:	bf00      	nop
 80062f8:	00100002 	.word	0x00100002
 80062fc:	ffff0000 	.word	0xffff0000
 8006300:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006304:	b672      	cpsid	i
}
 8006306:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691a      	ldr	r2, [r3, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800634a:	b662      	cpsie	i
}
 800634c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006380:	e0e2      	b.n	8006548 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006388:	2200      	movs	r2, #0
 800638a:	497b      	ldr	r1, [pc, #492]	; (8006578 <HAL_I2C_Mem_Read+0x4c4>)
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 fa77 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e0e9      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063ac:	b672      	cpsid	i
}
 80063ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80063e2:	4b66      	ldr	r3, [pc, #408]	; (800657c <HAL_I2C_Mem_Read+0x4c8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	4a65      	ldr	r2, [pc, #404]	; (8006580 <HAL_I2C_Mem_Read+0x4cc>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	0a1a      	lsrs	r2, r3, #8
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	00da      	lsls	r2, r3, #3
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	3b01      	subs	r3, #1
 8006400:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d118      	bne.n	800643a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800642a:	b662      	cpsie	i
}
 800642c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e09a      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d1d9      	bne.n	80063fc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800648a:	b662      	cpsie	i
}
 800648c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064c0:	e042      	b.n	8006548 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fb32 	bl	8006b30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e04c      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691a      	ldr	r2, [r3, #16]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f2:	3b01      	subs	r3, #1
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b04      	cmp	r3, #4
 8006514:	d118      	bne.n	8006548 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	f47f ae94 	bne.w	800627a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	e000      	b.n	8006570 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800656e:	2302      	movs	r3, #2
  }
}
 8006570:	4618      	mov	r0, r3
 8006572:	3728      	adds	r7, #40	; 0x28
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	00010004 	.word	0x00010004
 800657c:	20000000 	.word	0x20000000
 8006580:	14f8b589 	.word	0x14f8b589

08006584 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	461a      	mov	r2, r3
 8006592:	4603      	mov	r3, r0
 8006594:	817b      	strh	r3, [r7, #10]
 8006596:	460b      	mov	r3, r1
 8006598:	813b      	strh	r3, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f960 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00d      	beq.n	80065e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d4:	d103      	bne.n	80065de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e05f      	b.n	80066a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065e2:	897b      	ldrh	r3, [r7, #10]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	492d      	ldr	r1, [pc, #180]	; (80066ac <I2C_RequestMemoryWrite+0x128>)
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f998 	bl	800692e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e04c      	b.n	80066a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006620:	6a39      	ldr	r1, [r7, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fa02 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00d      	beq.n	800664a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	2b04      	cmp	r3, #4
 8006634:	d107      	bne.n	8006646 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e02b      	b.n	80066a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800664a:	88fb      	ldrh	r3, [r7, #6]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d105      	bne.n	800665c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006650:	893b      	ldrh	r3, [r7, #8]
 8006652:	b2da      	uxtb	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]
 800665a:	e021      	b.n	80066a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800665c:	893b      	ldrh	r3, [r7, #8]
 800665e:	0a1b      	lsrs	r3, r3, #8
 8006660:	b29b      	uxth	r3, r3
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800666a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666c:	6a39      	ldr	r1, [r7, #32]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 f9dc 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00d      	beq.n	8006696 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	2b04      	cmp	r3, #4
 8006680:	d107      	bne.n	8006692 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e005      	b.n	80066a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006696:	893b      	ldrh	r3, [r7, #8]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	00010002 	.word	0x00010002

080066b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	4608      	mov	r0, r1
 80066ba:	4611      	mov	r1, r2
 80066bc:	461a      	mov	r2, r3
 80066be:	4603      	mov	r3, r0
 80066c0:	817b      	strh	r3, [r7, #10]
 80066c2:	460b      	mov	r3, r1
 80066c4:	813b      	strh	r3, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f8c2 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006710:	d103      	bne.n	800671a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e0aa      	b.n	8006874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800671e:	897b      	ldrh	r3, [r7, #10]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800672c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	4952      	ldr	r1, [pc, #328]	; (800687c <I2C_RequestMemoryRead+0x1cc>)
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f8fa 	bl	800692e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e097      	b.n	8006874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800675a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675c:	6a39      	ldr	r1, [r7, #32]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f964 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2b04      	cmp	r3, #4
 8006770:	d107      	bne.n	8006782 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006780:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e076      	b.n	8006874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d105      	bne.n	8006798 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800678c:	893b      	ldrh	r3, [r7, #8]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	611a      	str	r2, [r3, #16]
 8006796:	e021      	b.n	80067dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006798:	893b      	ldrh	r3, [r7, #8]
 800679a:	0a1b      	lsrs	r3, r3, #8
 800679c:	b29b      	uxth	r3, r3
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a8:	6a39      	ldr	r1, [r7, #32]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f93e 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00d      	beq.n	80067d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	2b04      	cmp	r3, #4
 80067bc:	d107      	bne.n	80067ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e050      	b.n	8006874 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067d2:	893b      	ldrh	r3, [r7, #8]
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067de:	6a39      	ldr	r1, [r7, #32]
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f923 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00d      	beq.n	8006808 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d107      	bne.n	8006804 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006802:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e035      	b.n	8006874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006816:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	2200      	movs	r2, #0
 8006820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f82b 	bl	8006880 <I2C_WaitOnFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00d      	beq.n	800684c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800683e:	d103      	bne.n	8006848 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006846:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e013      	b.n	8006874 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800684c:	897b      	ldrh	r3, [r7, #10]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	6a3a      	ldr	r2, [r7, #32]
 8006860:	4906      	ldr	r1, [pc, #24]	; (800687c <I2C_RequestMemoryRead+0x1cc>)
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 f863 	bl	800692e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	00010002 	.word	0x00010002

08006880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006890:	e025      	b.n	80068de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d021      	beq.n	80068de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689a:	f7fe ff27 	bl	80056ec <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d302      	bcc.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d116      	bne.n	80068de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	f043 0220 	orr.w	r2, r3, #32
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e023      	b.n	8006926 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	0c1b      	lsrs	r3, r3, #16
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d10d      	bne.n	8006904 <I2C_WaitOnFlagUntilTimeout+0x84>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	43da      	mvns	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bf0c      	ite	eq
 80068fa:	2301      	moveq	r3, #1
 80068fc:	2300      	movne	r3, #0
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	461a      	mov	r2, r3
 8006902:	e00c      	b.n	800691e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	43da      	mvns	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4013      	ands	r3, r2
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	bf0c      	ite	eq
 8006916:	2301      	moveq	r3, #1
 8006918:	2300      	movne	r3, #0
 800691a:	b2db      	uxtb	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	429a      	cmp	r2, r3
 8006922:	d0b6      	beq.n	8006892 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
 800693a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800693c:	e051      	b.n	80069e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694c:	d123      	bne.n	8006996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006966:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	f043 0204 	orr.w	r2, r3, #4
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e046      	b.n	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d021      	beq.n	80069e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699e:	f7fe fea5 	bl	80056ec <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d302      	bcc.n	80069b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d116      	bne.n	80069e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	f043 0220 	orr.w	r2, r3, #32
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e020      	b.n	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	0c1b      	lsrs	r3, r3, #16
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d10c      	bne.n	8006a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	43da      	mvns	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4013      	ands	r3, r2
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bf14      	ite	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	2300      	moveq	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	e00b      	b.n	8006a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	43da      	mvns	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4013      	ands	r3, r2
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bf14      	ite	ne
 8006a18:	2301      	movne	r3, #1
 8006a1a:	2300      	moveq	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d18d      	bne.n	800693e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a38:	e02d      	b.n	8006a96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f8ce 	bl	8006bdc <I2C_IsAcknowledgeFailed>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e02d      	b.n	8006aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d021      	beq.n	8006a96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a52:	f7fe fe4b 	bl	80056ec <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d302      	bcc.n	8006a68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d116      	bne.n	8006a96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f043 0220 	orr.w	r2, r3, #32
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e007      	b.n	8006aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa0:	2b80      	cmp	r3, #128	; 0x80
 8006aa2:	d1ca      	bne.n	8006a3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006aba:	e02d      	b.n	8006b18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f88d 	bl	8006bdc <I2C_IsAcknowledgeFailed>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e02d      	b.n	8006b28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad2:	d021      	beq.n	8006b18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad4:	f7fe fe0a 	bl	80056ec <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d302      	bcc.n	8006aea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d116      	bne.n	8006b18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e007      	b.n	8006b28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f003 0304 	and.w	r3, r3, #4
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d1ca      	bne.n	8006abc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b3c:	e042      	b.n	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b10      	cmp	r3, #16
 8006b4a:	d119      	bne.n	8006b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0210 	mvn.w	r2, #16
 8006b54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e029      	b.n	8006bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b80:	f7fe fdb4 	bl	80056ec <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d302      	bcc.n	8006b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d116      	bne.n	8006bc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e007      	b.n	8006bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d1b5      	bne.n	8006b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf2:	d11b      	bne.n	8006c2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	f043 0204 	orr.w	r2, r3, #4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e000      	b.n	8006c2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e272      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 8087 	beq.w	8006d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c58:	4b92      	ldr	r3, [pc, #584]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f003 030c 	and.w	r3, r3, #12
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d00c      	beq.n	8006c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c64:	4b8f      	ldr	r3, [pc, #572]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f003 030c 	and.w	r3, r3, #12
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d112      	bne.n	8006c96 <HAL_RCC_OscConfig+0x5e>
 8006c70:	4b8c      	ldr	r3, [pc, #560]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7c:	d10b      	bne.n	8006c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c7e:	4b89      	ldr	r3, [pc, #548]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d06c      	beq.n	8006d64 <HAL_RCC_OscConfig+0x12c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d168      	bne.n	8006d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e24c      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c9e:	d106      	bne.n	8006cae <HAL_RCC_OscConfig+0x76>
 8006ca0:	4b80      	ldr	r3, [pc, #512]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a7f      	ldr	r2, [pc, #508]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	e02e      	b.n	8006d0c <HAL_RCC_OscConfig+0xd4>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x98>
 8006cb6:	4b7b      	ldr	r3, [pc, #492]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a7a      	ldr	r2, [pc, #488]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4b78      	ldr	r3, [pc, #480]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a77      	ldr	r2, [pc, #476]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	e01d      	b.n	8006d0c <HAL_RCC_OscConfig+0xd4>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cd8:	d10c      	bne.n	8006cf4 <HAL_RCC_OscConfig+0xbc>
 8006cda:	4b72      	ldr	r3, [pc, #456]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a71      	ldr	r2, [pc, #452]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	4b6f      	ldr	r3, [pc, #444]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a6e      	ldr	r2, [pc, #440]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cf0:	6013      	str	r3, [r2, #0]
 8006cf2:	e00b      	b.n	8006d0c <HAL_RCC_OscConfig+0xd4>
 8006cf4:	4b6b      	ldr	r3, [pc, #428]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6a      	ldr	r2, [pc, #424]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	4b68      	ldr	r3, [pc, #416]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a67      	ldr	r2, [pc, #412]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d013      	beq.n	8006d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d14:	f7fe fcea 	bl	80056ec <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d1c:	f7fe fce6 	bl	80056ec <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	; 0x64
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e200      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d2e:	4b5d      	ldr	r3, [pc, #372]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0xe4>
 8006d3a:	e014      	b.n	8006d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d3c:	f7fe fcd6 	bl	80056ec <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d44:	f7fe fcd2 	bl	80056ec <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b64      	cmp	r3, #100	; 0x64
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e1ec      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d56:	4b53      	ldr	r3, [pc, #332]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x10c>
 8006d62:	e000      	b.n	8006d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d063      	beq.n	8006e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d72:	4b4c      	ldr	r3, [pc, #304]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f003 030c 	and.w	r3, r3, #12
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00b      	beq.n	8006d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006d7e:	4b49      	ldr	r3, [pc, #292]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f003 030c 	and.w	r3, r3, #12
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d11c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x18c>
 8006d8a:	4b46      	ldr	r3, [pc, #280]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d116      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d96:	4b43      	ldr	r3, [pc, #268]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d005      	beq.n	8006dae <HAL_RCC_OscConfig+0x176>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d001      	beq.n	8006dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e1c0      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dae:	4b3d      	ldr	r3, [pc, #244]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	4939      	ldr	r1, [pc, #228]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dc2:	e03a      	b.n	8006e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d020      	beq.n	8006e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dcc:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <HAL_RCC_OscConfig+0x270>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dd2:	f7fe fc8b 	bl	80056ec <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dda:	f7fe fc87 	bl	80056ec <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e1a1      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dec:	4b2d      	ldr	r3, [pc, #180]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0f0      	beq.n	8006dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006df8:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4927      	ldr	r1, [pc, #156]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	600b      	str	r3, [r1, #0]
 8006e0c:	e015      	b.n	8006e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e0e:	4b26      	ldr	r3, [pc, #152]	; (8006ea8 <HAL_RCC_OscConfig+0x270>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7fe fc6a 	bl	80056ec <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e1c:	f7fe fc66 	bl	80056ec <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e180      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d03a      	beq.n	8006ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d019      	beq.n	8006e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e4e:	4b17      	ldr	r3, [pc, #92]	; (8006eac <HAL_RCC_OscConfig+0x274>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e54:	f7fe fc4a 	bl	80056ec <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e5c:	f7fe fc46 	bl	80056ec <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e160      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <HAL_RCC_OscConfig+0x26c>)
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f000 fad8 	bl	8007430 <RCC_Delay>
 8006e80:	e01c      	b.n	8006ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e82:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <HAL_RCC_OscConfig+0x274>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e88:	f7fe fc30 	bl	80056ec <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e8e:	e00f      	b.n	8006eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e90:	f7fe fc2c 	bl	80056ec <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d908      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e146      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
 8006ea2:	bf00      	nop
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	42420000 	.word	0x42420000
 8006eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eb0:	4b92      	ldr	r3, [pc, #584]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e9      	bne.n	8006e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80a6 	beq.w	8007016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ece:	4b8b      	ldr	r3, [pc, #556]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10d      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eda:	4b88      	ldr	r3, [pc, #544]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	4a87      	ldr	r2, [pc, #540]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee4:	61d3      	str	r3, [r2, #28]
 8006ee6:	4b85      	ldr	r3, [pc, #532]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eee:	60bb      	str	r3, [r7, #8]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef6:	4b82      	ldr	r3, [pc, #520]	; (8007100 <HAL_RCC_OscConfig+0x4c8>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d118      	bne.n	8006f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f02:	4b7f      	ldr	r3, [pc, #508]	; (8007100 <HAL_RCC_OscConfig+0x4c8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a7e      	ldr	r2, [pc, #504]	; (8007100 <HAL_RCC_OscConfig+0x4c8>)
 8006f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f0e:	f7fe fbed 	bl	80056ec <HAL_GetTick>
 8006f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f14:	e008      	b.n	8006f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f16:	f7fe fbe9 	bl	80056ec <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b64      	cmp	r3, #100	; 0x64
 8006f22:	d901      	bls.n	8006f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e103      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f28:	4b75      	ldr	r3, [pc, #468]	; (8007100 <HAL_RCC_OscConfig+0x4c8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d106      	bne.n	8006f4a <HAL_RCC_OscConfig+0x312>
 8006f3c:	4b6f      	ldr	r3, [pc, #444]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	4a6e      	ldr	r2, [pc, #440]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	6213      	str	r3, [r2, #32]
 8006f48:	e02d      	b.n	8006fa6 <HAL_RCC_OscConfig+0x36e>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10c      	bne.n	8006f6c <HAL_RCC_OscConfig+0x334>
 8006f52:	4b6a      	ldr	r3, [pc, #424]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	4a69      	ldr	r2, [pc, #420]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f58:	f023 0301 	bic.w	r3, r3, #1
 8006f5c:	6213      	str	r3, [r2, #32]
 8006f5e:	4b67      	ldr	r3, [pc, #412]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	4a66      	ldr	r2, [pc, #408]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f64:	f023 0304 	bic.w	r3, r3, #4
 8006f68:	6213      	str	r3, [r2, #32]
 8006f6a:	e01c      	b.n	8006fa6 <HAL_RCC_OscConfig+0x36e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	2b05      	cmp	r3, #5
 8006f72:	d10c      	bne.n	8006f8e <HAL_RCC_OscConfig+0x356>
 8006f74:	4b61      	ldr	r3, [pc, #388]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	4a60      	ldr	r2, [pc, #384]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f7a:	f043 0304 	orr.w	r3, r3, #4
 8006f7e:	6213      	str	r3, [r2, #32]
 8006f80:	4b5e      	ldr	r3, [pc, #376]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	4a5d      	ldr	r2, [pc, #372]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	6213      	str	r3, [r2, #32]
 8006f8c:	e00b      	b.n	8006fa6 <HAL_RCC_OscConfig+0x36e>
 8006f8e:	4b5b      	ldr	r3, [pc, #364]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	4a5a      	ldr	r2, [pc, #360]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6213      	str	r3, [r2, #32]
 8006f9a:	4b58      	ldr	r3, [pc, #352]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	4a57      	ldr	r2, [pc, #348]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006fa0:	f023 0304 	bic.w	r3, r3, #4
 8006fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d015      	beq.n	8006fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fae:	f7fe fb9d 	bl	80056ec <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb4:	e00a      	b.n	8006fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fb6:	f7fe fb99 	bl	80056ec <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e0b1      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fcc:	4b4b      	ldr	r3, [pc, #300]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0ee      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x37e>
 8006fd8:	e014      	b.n	8007004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fda:	f7fe fb87 	bl	80056ec <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fe0:	e00a      	b.n	8006ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe2:	f7fe fb83 	bl	80056ec <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e09b      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ff8:	4b40      	ldr	r3, [pc, #256]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1ee      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007004:	7dfb      	ldrb	r3, [r7, #23]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d105      	bne.n	8007016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800700a:	4b3c      	ldr	r3, [pc, #240]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	4a3b      	ldr	r2, [pc, #236]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8007010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007014:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 8087 	beq.w	800712e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007020:	4b36      	ldr	r3, [pc, #216]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f003 030c 	and.w	r3, r3, #12
 8007028:	2b08      	cmp	r3, #8
 800702a:	d061      	beq.n	80070f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d146      	bne.n	80070c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007034:	4b33      	ldr	r3, [pc, #204]	; (8007104 <HAL_RCC_OscConfig+0x4cc>)
 8007036:	2200      	movs	r2, #0
 8007038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703a:	f7fe fb57 	bl	80056ec <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007042:	f7fe fb53 	bl	80056ec <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e06d      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007054:	4b29      	ldr	r3, [pc, #164]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f0      	bne.n	8007042 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007068:	d108      	bne.n	800707c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800706a:	4b24      	ldr	r3, [pc, #144]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	4921      	ldr	r1, [pc, #132]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800707c:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a19      	ldr	r1, [r3, #32]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	430b      	orrs	r3, r1
 800708e:	491b      	ldr	r1, [pc, #108]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 8007090:	4313      	orrs	r3, r2
 8007092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007094:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <HAL_RCC_OscConfig+0x4cc>)
 8007096:	2201      	movs	r2, #1
 8007098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709a:	f7fe fb27 	bl	80056ec <HAL_GetTick>
 800709e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070a0:	e008      	b.n	80070b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a2:	f7fe fb23 	bl	80056ec <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e03d      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070b4:	4b11      	ldr	r3, [pc, #68]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0f0      	beq.n	80070a2 <HAL_RCC_OscConfig+0x46a>
 80070c0:	e035      	b.n	800712e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070c2:	4b10      	ldr	r3, [pc, #64]	; (8007104 <HAL_RCC_OscConfig+0x4cc>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c8:	f7fe fb10 	bl	80056ec <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070d0:	f7fe fb0c 	bl	80056ec <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e026      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070e2:	4b06      	ldr	r3, [pc, #24]	; (80070fc <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0x498>
 80070ee:	e01e      	b.n	800712e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d107      	bne.n	8007108 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e019      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
 80070fc:	40021000 	.word	0x40021000
 8007100:	40007000 	.word	0x40007000
 8007104:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007108:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <HAL_RCC_OscConfig+0x500>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	429a      	cmp	r2, r3
 800711a:	d106      	bne.n	800712a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007126:	429a      	cmp	r2, r3
 8007128:	d001      	beq.n	800712e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40021000 	.word	0x40021000

0800713c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e0d0      	b.n	80072f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007150:	4b6a      	ldr	r3, [pc, #424]	; (80072fc <HAL_RCC_ClockConfig+0x1c0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	429a      	cmp	r2, r3
 800715c:	d910      	bls.n	8007180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800715e:	4b67      	ldr	r3, [pc, #412]	; (80072fc <HAL_RCC_ClockConfig+0x1c0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f023 0207 	bic.w	r2, r3, #7
 8007166:	4965      	ldr	r1, [pc, #404]	; (80072fc <HAL_RCC_ClockConfig+0x1c0>)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	4313      	orrs	r3, r2
 800716c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800716e:	4b63      	ldr	r3, [pc, #396]	; (80072fc <HAL_RCC_ClockConfig+0x1c0>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0307 	and.w	r3, r3, #7
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	429a      	cmp	r2, r3
 800717a:	d001      	beq.n	8007180 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e0b8      	b.n	80072f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d020      	beq.n	80071ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d005      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007198:	4b59      	ldr	r3, [pc, #356]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	4a58      	ldr	r2, [pc, #352]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 800719e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0308 	and.w	r3, r3, #8
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071b0:	4b53      	ldr	r3, [pc, #332]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4a52      	ldr	r2, [pc, #328]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80071b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80071ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071bc:	4b50      	ldr	r3, [pc, #320]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	494d      	ldr	r1, [pc, #308]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d040      	beq.n	800725c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d107      	bne.n	80071f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e2:	4b47      	ldr	r3, [pc, #284]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d115      	bne.n	800721a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e07f      	b.n	80072f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d107      	bne.n	800720a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071fa:	4b41      	ldr	r3, [pc, #260]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e073      	b.n	80072f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800720a:	4b3d      	ldr	r3, [pc, #244]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d101      	bne.n	800721a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e06b      	b.n	80072f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800721a:	4b39      	ldr	r3, [pc, #228]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f023 0203 	bic.w	r2, r3, #3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	4936      	ldr	r1, [pc, #216]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 8007228:	4313      	orrs	r3, r2
 800722a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800722c:	f7fe fa5e 	bl	80056ec <HAL_GetTick>
 8007230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007232:	e00a      	b.n	800724a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007234:	f7fe fa5a 	bl	80056ec <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007242:	4293      	cmp	r3, r2
 8007244:	d901      	bls.n	800724a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e053      	b.n	80072f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800724a:	4b2d      	ldr	r3, [pc, #180]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f003 020c 	and.w	r2, r3, #12
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	429a      	cmp	r2, r3
 800725a:	d1eb      	bne.n	8007234 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800725c:	4b27      	ldr	r3, [pc, #156]	; (80072fc <HAL_RCC_ClockConfig+0x1c0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d210      	bcs.n	800728c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800726a:	4b24      	ldr	r3, [pc, #144]	; (80072fc <HAL_RCC_ClockConfig+0x1c0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f023 0207 	bic.w	r2, r3, #7
 8007272:	4922      	ldr	r1, [pc, #136]	; (80072fc <HAL_RCC_ClockConfig+0x1c0>)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	4313      	orrs	r3, r2
 8007278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800727a:	4b20      	ldr	r3, [pc, #128]	; (80072fc <HAL_RCC_ClockConfig+0x1c0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d001      	beq.n	800728c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e032      	b.n	80072f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d008      	beq.n	80072aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007298:	4b19      	ldr	r3, [pc, #100]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	4916      	ldr	r1, [pc, #88]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0308 	and.w	r3, r3, #8
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	490e      	ldr	r1, [pc, #56]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072ca:	f000 f821 	bl	8007310 <HAL_RCC_GetSysClockFreq>
 80072ce:	4602      	mov	r2, r0
 80072d0:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <HAL_RCC_ClockConfig+0x1c4>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	091b      	lsrs	r3, r3, #4
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	490a      	ldr	r1, [pc, #40]	; (8007304 <HAL_RCC_ClockConfig+0x1c8>)
 80072dc:	5ccb      	ldrb	r3, [r1, r3]
 80072de:	fa22 f303 	lsr.w	r3, r2, r3
 80072e2:	4a09      	ldr	r2, [pc, #36]	; (8007308 <HAL_RCC_ClockConfig+0x1cc>)
 80072e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072e6:	4b09      	ldr	r3, [pc, #36]	; (800730c <HAL_RCC_ClockConfig+0x1d0>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe f9bc 	bl	8005668 <HAL_InitTick>

  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40022000 	.word	0x40022000
 8007300:	40021000 	.word	0x40021000
 8007304:	08009798 	.word	0x08009798
 8007308:	20000000 	.word	0x20000000
 800730c:	20000004 	.word	0x20000004

08007310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007310:	b490      	push	{r4, r7}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007316:	4b29      	ldr	r3, [pc, #164]	; (80073bc <HAL_RCC_GetSysClockFreq+0xac>)
 8007318:	1d3c      	adds	r4, r7, #4
 800731a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800731c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007320:	f240 2301 	movw	r3, #513	; 0x201
 8007324:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	61fb      	str	r3, [r7, #28]
 800732a:	2300      	movs	r3, #0
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800733a:	4b21      	ldr	r3, [pc, #132]	; (80073c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f003 030c 	and.w	r3, r3, #12
 8007346:	2b04      	cmp	r3, #4
 8007348:	d002      	beq.n	8007350 <HAL_RCC_GetSysClockFreq+0x40>
 800734a:	2b08      	cmp	r3, #8
 800734c:	d003      	beq.n	8007356 <HAL_RCC_GetSysClockFreq+0x46>
 800734e:	e02b      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007350:	4b1c      	ldr	r3, [pc, #112]	; (80073c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007352:	623b      	str	r3, [r7, #32]
      break;
 8007354:	e02b      	b.n	80073ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	0c9b      	lsrs	r3, r3, #18
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	3328      	adds	r3, #40	; 0x28
 8007360:	443b      	add	r3, r7
 8007362:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007366:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d012      	beq.n	8007398 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007372:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	0c5b      	lsrs	r3, r3, #17
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	3328      	adds	r3, #40	; 0x28
 800737e:	443b      	add	r3, r7
 8007380:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007384:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	4a0e      	ldr	r2, [pc, #56]	; (80073c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800738a:	fb03 f202 	mul.w	r2, r3, r2
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
 8007396:	e004      	b.n	80073a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4a0b      	ldr	r2, [pc, #44]	; (80073c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800739c:	fb02 f303 	mul.w	r3, r2, r3
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	623b      	str	r3, [r7, #32]
      break;
 80073a6:	e002      	b.n	80073ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073a8:	4b06      	ldr	r3, [pc, #24]	; (80073c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80073aa:	623b      	str	r3, [r7, #32]
      break;
 80073ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ae:	6a3b      	ldr	r3, [r7, #32]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3728      	adds	r7, #40	; 0x28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bc90      	pop	{r4, r7}
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	08008e50 	.word	0x08008e50
 80073c0:	40021000 	.word	0x40021000
 80073c4:	007a1200 	.word	0x007a1200
 80073c8:	003d0900 	.word	0x003d0900

080073cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <HAL_RCC_GetHCLKFreq+0x10>)
 80073d2:	681b      	ldr	r3, [r3, #0]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr
 80073dc:	20000000 	.word	0x20000000

080073e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073e4:	f7ff fff2 	bl	80073cc <HAL_RCC_GetHCLKFreq>
 80073e8:	4602      	mov	r2, r0
 80073ea:	4b05      	ldr	r3, [pc, #20]	; (8007400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	0a1b      	lsrs	r3, r3, #8
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	4903      	ldr	r1, [pc, #12]	; (8007404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073f6:	5ccb      	ldrb	r3, [r1, r3]
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40021000 	.word	0x40021000
 8007404:	080097a8 	.word	0x080097a8

08007408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800740c:	f7ff ffde 	bl	80073cc <HAL_RCC_GetHCLKFreq>
 8007410:	4602      	mov	r2, r0
 8007412:	4b05      	ldr	r3, [pc, #20]	; (8007428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	0adb      	lsrs	r3, r3, #11
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	4903      	ldr	r1, [pc, #12]	; (800742c <HAL_RCC_GetPCLK2Freq+0x24>)
 800741e:	5ccb      	ldrb	r3, [r1, r3]
 8007420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007424:	4618      	mov	r0, r3
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40021000 	.word	0x40021000
 800742c:	080097a8 	.word	0x080097a8

08007430 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007438:	4b0a      	ldr	r3, [pc, #40]	; (8007464 <RCC_Delay+0x34>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <RCC_Delay+0x38>)
 800743e:	fba2 2303 	umull	r2, r3, r2, r3
 8007442:	0a5b      	lsrs	r3, r3, #9
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	fb02 f303 	mul.w	r3, r2, r3
 800744a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800744c:	bf00      	nop
  }
  while (Delay --);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	1e5a      	subs	r2, r3, #1
 8007452:	60fa      	str	r2, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1f9      	bne.n	800744c <RCC_Delay+0x1c>
}
 8007458:	bf00      	nop
 800745a:	bf00      	nop
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	bc80      	pop	{r7}
 8007462:	4770      	bx	lr
 8007464:	20000000 	.word	0x20000000
 8007468:	10624dd3 	.word	0x10624dd3

0800746c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e03f      	b.n	80074fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fe f860 	bl	8005558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2224      	movs	r2, #36	; 0x24
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f9a7 	bl	8007804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695a      	ldr	r2, [r3, #20]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b08a      	sub	sp, #40	; 0x28
 800750a:	af02      	add	r7, sp, #8
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	603b      	str	r3, [r7, #0]
 8007512:	4613      	mov	r3, r2
 8007514:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b20      	cmp	r3, #32
 8007524:	d17c      	bne.n	8007620 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d002      	beq.n	8007532 <HAL_UART_Transmit+0x2c>
 800752c:	88fb      	ldrh	r3, [r7, #6]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e075      	b.n	8007622 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_UART_Transmit+0x3e>
 8007540:	2302      	movs	r3, #2
 8007542:	e06e      	b.n	8007622 <HAL_UART_Transmit+0x11c>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2221      	movs	r2, #33	; 0x21
 8007556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800755a:	f7fe f8c7 	bl	80056ec <HAL_GetTick>
 800755e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	88fa      	ldrh	r2, [r7, #6]
 8007564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007574:	d108      	bne.n	8007588 <HAL_UART_Transmit+0x82>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	e003      	b.n	8007590 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007598:	e02a      	b.n	80075f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2200      	movs	r2, #0
 80075a2:	2180      	movs	r1, #128	; 0x80
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 f8e2 	bl	800776e <UART_WaitOnFlagUntilTimeout>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e036      	b.n	8007622 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	461a      	mov	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	3302      	adds	r3, #2
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	e007      	b.n	80075e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	781a      	ldrb	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1cf      	bne.n	800759a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2200      	movs	r2, #0
 8007602:	2140      	movs	r1, #64	; 0x40
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f8b2 	bl	800776e <UART_WaitOnFlagUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e006      	b.n	8007622 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	e000      	b.n	8007622 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3720      	adds	r7, #32
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b08a      	sub	sp, #40	; 0x28
 800762e:	af02      	add	r7, sp, #8
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	4613      	mov	r3, r2
 8007638:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b20      	cmp	r3, #32
 8007648:	f040 808c 	bne.w	8007764 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_UART_Receive+0x2e>
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e084      	b.n	8007766 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_UART_Receive+0x40>
 8007666:	2302      	movs	r3, #2
 8007668:	e07d      	b.n	8007766 <HAL_UART_Receive+0x13c>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2222      	movs	r2, #34	; 0x22
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007686:	f7fe f831 	bl	80056ec <HAL_GetTick>
 800768a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a0:	d108      	bne.n	80076b4 <HAL_UART_Receive+0x8a>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d104      	bne.n	80076b4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	61bb      	str	r3, [r7, #24]
 80076b2:	e003      	b.n	80076bc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80076c4:	e043      	b.n	800774e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	2200      	movs	r2, #0
 80076ce:	2120      	movs	r1, #32
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f84c 	bl	800776e <UART_WaitOnFlagUntilTimeout>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e042      	b.n	8007766 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10c      	bne.n	8007700 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	3302      	adds	r3, #2
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	e01f      	b.n	8007740 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007708:	d007      	beq.n	800771a <HAL_UART_Receive+0xf0>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <HAL_UART_Receive+0xfe>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	b2da      	uxtb	r2, r3
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e008      	b.n	800773a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007734:	b2da      	uxtb	r2, r3
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	3301      	adds	r3, #1
 800773e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1b6      	bne.n	80076c6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	e000      	b.n	8007766 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007764:	2302      	movs	r3, #2
  }
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800777e:	e02c      	b.n	80077da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007786:	d028      	beq.n	80077da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <UART_WaitOnFlagUntilTimeout+0x30>
 800778e:	f7fd ffad 	bl	80056ec <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	429a      	cmp	r2, r3
 800779c:	d21d      	bcs.n	80077da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	695a      	ldr	r2, [r3, #20]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2220      	movs	r2, #32
 80077c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e00f      	b.n	80077fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4013      	ands	r3, r2
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	bf0c      	ite	eq
 80077ea:	2301      	moveq	r3, #1
 80077ec:	2300      	movne	r3, #0
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d0c3      	beq.n	8007780 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800783e:	f023 030c 	bic.w	r3, r3, #12
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6812      	ldr	r2, [r2, #0]
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	430b      	orrs	r3, r1
 800784a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a2c      	ldr	r2, [pc, #176]	; (8007918 <UART_SetConfig+0x114>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d103      	bne.n	8007874 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800786c:	f7ff fdcc 	bl	8007408 <HAL_RCC_GetPCLK2Freq>
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	e002      	b.n	800787a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007874:	f7ff fdb4 	bl	80073e0 <HAL_RCC_GetPCLK1Freq>
 8007878:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009a      	lsls	r2, r3, #2
 8007884:	441a      	add	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007890:	4a22      	ldr	r2, [pc, #136]	; (800791c <UART_SetConfig+0x118>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	0119      	lsls	r1, r3, #4
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	009a      	lsls	r2, r3, #2
 80078a4:	441a      	add	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80078b0:	4b1a      	ldr	r3, [pc, #104]	; (800791c <UART_SetConfig+0x118>)
 80078b2:	fba3 0302 	umull	r0, r3, r3, r2
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	2064      	movs	r0, #100	; 0x64
 80078ba:	fb00 f303 	mul.w	r3, r0, r3
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	3332      	adds	r3, #50	; 0x32
 80078c4:	4a15      	ldr	r2, [pc, #84]	; (800791c <UART_SetConfig+0x118>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078d0:	4419      	add	r1, r3
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009a      	lsls	r2, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <UART_SetConfig+0x118>)
 80078ea:	fba3 0302 	umull	r0, r3, r3, r2
 80078ee:	095b      	lsrs	r3, r3, #5
 80078f0:	2064      	movs	r0, #100	; 0x64
 80078f2:	fb00 f303 	mul.w	r3, r0, r3
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	011b      	lsls	r3, r3, #4
 80078fa:	3332      	adds	r3, #50	; 0x32
 80078fc:	4a07      	ldr	r2, [pc, #28]	; (800791c <UART_SetConfig+0x118>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	f003 020f 	and.w	r2, r3, #15
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	440a      	add	r2, r1
 800790e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007910:	bf00      	nop
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	40013800 	.word	0x40013800
 800791c:	51eb851f 	.word	0x51eb851f

08007920 <__errno>:
 8007920:	4b01      	ldr	r3, [pc, #4]	; (8007928 <__errno+0x8>)
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	2000000c 	.word	0x2000000c

0800792c <__libc_init_array>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	2600      	movs	r6, #0
 8007930:	4d0c      	ldr	r5, [pc, #48]	; (8007964 <__libc_init_array+0x38>)
 8007932:	4c0d      	ldr	r4, [pc, #52]	; (8007968 <__libc_init_array+0x3c>)
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	42a6      	cmp	r6, r4
 800793a:	d109      	bne.n	8007950 <__libc_init_array+0x24>
 800793c:	f001 f9ce 	bl	8008cdc <_init>
 8007940:	2600      	movs	r6, #0
 8007942:	4d0a      	ldr	r5, [pc, #40]	; (800796c <__libc_init_array+0x40>)
 8007944:	4c0a      	ldr	r4, [pc, #40]	; (8007970 <__libc_init_array+0x44>)
 8007946:	1b64      	subs	r4, r4, r5
 8007948:	10a4      	asrs	r4, r4, #2
 800794a:	42a6      	cmp	r6, r4
 800794c:	d105      	bne.n	800795a <__libc_init_array+0x2e>
 800794e:	bd70      	pop	{r4, r5, r6, pc}
 8007950:	f855 3b04 	ldr.w	r3, [r5], #4
 8007954:	4798      	blx	r3
 8007956:	3601      	adds	r6, #1
 8007958:	e7ee      	b.n	8007938 <__libc_init_array+0xc>
 800795a:	f855 3b04 	ldr.w	r3, [r5], #4
 800795e:	4798      	blx	r3
 8007960:	3601      	adds	r6, #1
 8007962:	e7f2      	b.n	800794a <__libc_init_array+0x1e>
 8007964:	08009848 	.word	0x08009848
 8007968:	08009848 	.word	0x08009848
 800796c:	08009848 	.word	0x08009848
 8007970:	0800984c 	.word	0x0800984c

08007974 <memset>:
 8007974:	4603      	mov	r3, r0
 8007976:	4402      	add	r2, r0
 8007978:	4293      	cmp	r3, r2
 800797a:	d100      	bne.n	800797e <memset+0xa>
 800797c:	4770      	bx	lr
 800797e:	f803 1b01 	strb.w	r1, [r3], #1
 8007982:	e7f9      	b.n	8007978 <memset+0x4>

08007984 <iprintf>:
 8007984:	b40f      	push	{r0, r1, r2, r3}
 8007986:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <iprintf+0x2c>)
 8007988:	b513      	push	{r0, r1, r4, lr}
 800798a:	681c      	ldr	r4, [r3, #0]
 800798c:	b124      	cbz	r4, 8007998 <iprintf+0x14>
 800798e:	69a3      	ldr	r3, [r4, #24]
 8007990:	b913      	cbnz	r3, 8007998 <iprintf+0x14>
 8007992:	4620      	mov	r0, r4
 8007994:	f000 fb20 	bl	8007fd8 <__sinit>
 8007998:	ab05      	add	r3, sp, #20
 800799a:	4620      	mov	r0, r4
 800799c:	9a04      	ldr	r2, [sp, #16]
 800799e:	68a1      	ldr	r1, [r4, #8]
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	f000 fd2b 	bl	80083fc <_vfiprintf_r>
 80079a6:	b002      	add	sp, #8
 80079a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079ac:	b004      	add	sp, #16
 80079ae:	4770      	bx	lr
 80079b0:	2000000c 	.word	0x2000000c

080079b4 <_puts_r>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	460e      	mov	r6, r1
 80079b8:	4605      	mov	r5, r0
 80079ba:	b118      	cbz	r0, 80079c4 <_puts_r+0x10>
 80079bc:	6983      	ldr	r3, [r0, #24]
 80079be:	b90b      	cbnz	r3, 80079c4 <_puts_r+0x10>
 80079c0:	f000 fb0a 	bl	8007fd8 <__sinit>
 80079c4:	69ab      	ldr	r3, [r5, #24]
 80079c6:	68ac      	ldr	r4, [r5, #8]
 80079c8:	b913      	cbnz	r3, 80079d0 <_puts_r+0x1c>
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 fb04 	bl	8007fd8 <__sinit>
 80079d0:	4b2c      	ldr	r3, [pc, #176]	; (8007a84 <_puts_r+0xd0>)
 80079d2:	429c      	cmp	r4, r3
 80079d4:	d120      	bne.n	8007a18 <_puts_r+0x64>
 80079d6:	686c      	ldr	r4, [r5, #4]
 80079d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079da:	07db      	lsls	r3, r3, #31
 80079dc:	d405      	bmi.n	80079ea <_puts_r+0x36>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	0598      	lsls	r0, r3, #22
 80079e2:	d402      	bmi.n	80079ea <_puts_r+0x36>
 80079e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079e6:	f000 fb95 	bl	8008114 <__retarget_lock_acquire_recursive>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	0719      	lsls	r1, r3, #28
 80079ee:	d51d      	bpl.n	8007a2c <_puts_r+0x78>
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	b1db      	cbz	r3, 8007a2c <_puts_r+0x78>
 80079f4:	3e01      	subs	r6, #1
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079fc:	3b01      	subs	r3, #1
 80079fe:	60a3      	str	r3, [r4, #8]
 8007a00:	bb39      	cbnz	r1, 8007a52 <_puts_r+0x9e>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da38      	bge.n	8007a78 <_puts_r+0xc4>
 8007a06:	4622      	mov	r2, r4
 8007a08:	210a      	movs	r1, #10
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 f90e 	bl	8007c2c <__swbuf_r>
 8007a10:	3001      	adds	r0, #1
 8007a12:	d011      	beq.n	8007a38 <_puts_r+0x84>
 8007a14:	250a      	movs	r5, #10
 8007a16:	e011      	b.n	8007a3c <_puts_r+0x88>
 8007a18:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <_puts_r+0xd4>)
 8007a1a:	429c      	cmp	r4, r3
 8007a1c:	d101      	bne.n	8007a22 <_puts_r+0x6e>
 8007a1e:	68ac      	ldr	r4, [r5, #8]
 8007a20:	e7da      	b.n	80079d8 <_puts_r+0x24>
 8007a22:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <_puts_r+0xd8>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	bf08      	it	eq
 8007a28:	68ec      	ldreq	r4, [r5, #12]
 8007a2a:	e7d5      	b.n	80079d8 <_puts_r+0x24>
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 f94e 	bl	8007cd0 <__swsetup_r>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d0dd      	beq.n	80079f4 <_puts_r+0x40>
 8007a38:	f04f 35ff 	mov.w	r5, #4294967295
 8007a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a3e:	07da      	lsls	r2, r3, #31
 8007a40:	d405      	bmi.n	8007a4e <_puts_r+0x9a>
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	059b      	lsls	r3, r3, #22
 8007a46:	d402      	bmi.n	8007a4e <_puts_r+0x9a>
 8007a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a4a:	f000 fb64 	bl	8008116 <__retarget_lock_release_recursive>
 8007a4e:	4628      	mov	r0, r5
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da04      	bge.n	8007a60 <_puts_r+0xac>
 8007a56:	69a2      	ldr	r2, [r4, #24]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	dc06      	bgt.n	8007a6a <_puts_r+0xb6>
 8007a5c:	290a      	cmp	r1, #10
 8007a5e:	d004      	beq.n	8007a6a <_puts_r+0xb6>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	6022      	str	r2, [r4, #0]
 8007a66:	7019      	strb	r1, [r3, #0]
 8007a68:	e7c5      	b.n	80079f6 <_puts_r+0x42>
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 f8dd 	bl	8007c2c <__swbuf_r>
 8007a72:	3001      	adds	r0, #1
 8007a74:	d1bf      	bne.n	80079f6 <_puts_r+0x42>
 8007a76:	e7df      	b.n	8007a38 <_puts_r+0x84>
 8007a78:	250a      	movs	r5, #10
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	6022      	str	r2, [r4, #0]
 8007a80:	701d      	strb	r5, [r3, #0]
 8007a82:	e7db      	b.n	8007a3c <_puts_r+0x88>
 8007a84:	080097d4 	.word	0x080097d4
 8007a88:	080097f4 	.word	0x080097f4
 8007a8c:	080097b4 	.word	0x080097b4

08007a90 <puts>:
 8007a90:	4b02      	ldr	r3, [pc, #8]	; (8007a9c <puts+0xc>)
 8007a92:	4601      	mov	r1, r0
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	f7ff bf8d 	b.w	80079b4 <_puts_r>
 8007a9a:	bf00      	nop
 8007a9c:	2000000c 	.word	0x2000000c

08007aa0 <setvbuf>:
 8007aa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007aa4:	461d      	mov	r5, r3
 8007aa6:	4b5d      	ldr	r3, [pc, #372]	; (8007c1c <setvbuf+0x17c>)
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	681f      	ldr	r7, [r3, #0]
 8007aac:	460e      	mov	r6, r1
 8007aae:	4690      	mov	r8, r2
 8007ab0:	b127      	cbz	r7, 8007abc <setvbuf+0x1c>
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	b913      	cbnz	r3, 8007abc <setvbuf+0x1c>
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f000 fa8e 	bl	8007fd8 <__sinit>
 8007abc:	4b58      	ldr	r3, [pc, #352]	; (8007c20 <setvbuf+0x180>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d167      	bne.n	8007b92 <setvbuf+0xf2>
 8007ac2:	687c      	ldr	r4, [r7, #4]
 8007ac4:	f1b8 0f02 	cmp.w	r8, #2
 8007ac8:	d006      	beq.n	8007ad8 <setvbuf+0x38>
 8007aca:	f1b8 0f01 	cmp.w	r8, #1
 8007ace:	f200 809f 	bhi.w	8007c10 <setvbuf+0x170>
 8007ad2:	2d00      	cmp	r5, #0
 8007ad4:	f2c0 809c 	blt.w	8007c10 <setvbuf+0x170>
 8007ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ada:	07db      	lsls	r3, r3, #31
 8007adc:	d405      	bmi.n	8007aea <setvbuf+0x4a>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	0598      	lsls	r0, r3, #22
 8007ae2:	d402      	bmi.n	8007aea <setvbuf+0x4a>
 8007ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ae6:	f000 fb15 	bl	8008114 <__retarget_lock_acquire_recursive>
 8007aea:	4621      	mov	r1, r4
 8007aec:	4638      	mov	r0, r7
 8007aee:	f000 f9df 	bl	8007eb0 <_fflush_r>
 8007af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007af4:	b141      	cbz	r1, 8007b08 <setvbuf+0x68>
 8007af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007afa:	4299      	cmp	r1, r3
 8007afc:	d002      	beq.n	8007b04 <setvbuf+0x64>
 8007afe:	4638      	mov	r0, r7
 8007b00:	f000 fb78 	bl	80081f4 <_free_r>
 8007b04:	2300      	movs	r3, #0
 8007b06:	6363      	str	r3, [r4, #52]	; 0x34
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61a3      	str	r3, [r4, #24]
 8007b0c:	6063      	str	r3, [r4, #4]
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	0619      	lsls	r1, r3, #24
 8007b12:	d503      	bpl.n	8007b1c <setvbuf+0x7c>
 8007b14:	4638      	mov	r0, r7
 8007b16:	6921      	ldr	r1, [r4, #16]
 8007b18:	f000 fb6c 	bl	80081f4 <_free_r>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f1b8 0f02 	cmp.w	r8, #2
 8007b22:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	81a3      	strh	r3, [r4, #12]
 8007b2c:	d06c      	beq.n	8007c08 <setvbuf+0x168>
 8007b2e:	ab01      	add	r3, sp, #4
 8007b30:	466a      	mov	r2, sp
 8007b32:	4621      	mov	r1, r4
 8007b34:	4638      	mov	r0, r7
 8007b36:	f000 faef 	bl	8008118 <__swhatbuf_r>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	4318      	orrs	r0, r3
 8007b3e:	81a0      	strh	r0, [r4, #12]
 8007b40:	2d00      	cmp	r5, #0
 8007b42:	d130      	bne.n	8007ba6 <setvbuf+0x106>
 8007b44:	9d00      	ldr	r5, [sp, #0]
 8007b46:	4628      	mov	r0, r5
 8007b48:	f000 fb4c 	bl	80081e4 <malloc>
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d155      	bne.n	8007bfe <setvbuf+0x15e>
 8007b52:	f8dd 9000 	ldr.w	r9, [sp]
 8007b56:	45a9      	cmp	r9, r5
 8007b58:	d14a      	bne.n	8007bf0 <setvbuf+0x150>
 8007b5a:	f04f 35ff 	mov.w	r5, #4294967295
 8007b5e:	2200      	movs	r2, #0
 8007b60:	60a2      	str	r2, [r4, #8]
 8007b62:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8007b66:	6022      	str	r2, [r4, #0]
 8007b68:	6122      	str	r2, [r4, #16]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b70:	6162      	str	r2, [r4, #20]
 8007b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	07d2      	lsls	r2, r2, #31
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	d405      	bmi.n	8007b8a <setvbuf+0xea>
 8007b7e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007b82:	d102      	bne.n	8007b8a <setvbuf+0xea>
 8007b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b86:	f000 fac6 	bl	8008116 <__retarget_lock_release_recursive>
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	b003      	add	sp, #12
 8007b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b92:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <setvbuf+0x184>)
 8007b94:	429c      	cmp	r4, r3
 8007b96:	d101      	bne.n	8007b9c <setvbuf+0xfc>
 8007b98:	68bc      	ldr	r4, [r7, #8]
 8007b9a:	e793      	b.n	8007ac4 <setvbuf+0x24>
 8007b9c:	4b22      	ldr	r3, [pc, #136]	; (8007c28 <setvbuf+0x188>)
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	bf08      	it	eq
 8007ba2:	68fc      	ldreq	r4, [r7, #12]
 8007ba4:	e78e      	b.n	8007ac4 <setvbuf+0x24>
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	d0cd      	beq.n	8007b46 <setvbuf+0xa6>
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	b913      	cbnz	r3, 8007bb4 <setvbuf+0x114>
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f000 fa12 	bl	8007fd8 <__sinit>
 8007bb4:	f1b8 0f01 	cmp.w	r8, #1
 8007bb8:	bf08      	it	eq
 8007bba:	89a3      	ldrheq	r3, [r4, #12]
 8007bbc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007bc0:	bf04      	itt	eq
 8007bc2:	f043 0301 	orreq.w	r3, r3, #1
 8007bc6:	81a3      	strheq	r3, [r4, #12]
 8007bc8:	89a2      	ldrh	r2, [r4, #12]
 8007bca:	6026      	str	r6, [r4, #0]
 8007bcc:	f012 0308 	ands.w	r3, r2, #8
 8007bd0:	d01c      	beq.n	8007c0c <setvbuf+0x16c>
 8007bd2:	07d3      	lsls	r3, r2, #31
 8007bd4:	bf41      	itttt	mi
 8007bd6:	2300      	movmi	r3, #0
 8007bd8:	426d      	negmi	r5, r5
 8007bda:	60a3      	strmi	r3, [r4, #8]
 8007bdc:	61a5      	strmi	r5, [r4, #24]
 8007bde:	bf58      	it	pl
 8007be0:	60a5      	strpl	r5, [r4, #8]
 8007be2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007be4:	f015 0501 	ands.w	r5, r5, #1
 8007be8:	d115      	bne.n	8007c16 <setvbuf+0x176>
 8007bea:	f412 7f00 	tst.w	r2, #512	; 0x200
 8007bee:	e7c8      	b.n	8007b82 <setvbuf+0xe2>
 8007bf0:	4648      	mov	r0, r9
 8007bf2:	f000 faf7 	bl	80081e4 <malloc>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d0ae      	beq.n	8007b5a <setvbuf+0xba>
 8007bfc:	464d      	mov	r5, r9
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	e7d0      	b.n	8007baa <setvbuf+0x10a>
 8007c08:	2500      	movs	r5, #0
 8007c0a:	e7a8      	b.n	8007b5e <setvbuf+0xbe>
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	e7e8      	b.n	8007be2 <setvbuf+0x142>
 8007c10:	f04f 35ff 	mov.w	r5, #4294967295
 8007c14:	e7b9      	b.n	8007b8a <setvbuf+0xea>
 8007c16:	2500      	movs	r5, #0
 8007c18:	e7b7      	b.n	8007b8a <setvbuf+0xea>
 8007c1a:	bf00      	nop
 8007c1c:	2000000c 	.word	0x2000000c
 8007c20:	080097d4 	.word	0x080097d4
 8007c24:	080097f4 	.word	0x080097f4
 8007c28:	080097b4 	.word	0x080097b4

08007c2c <__swbuf_r>:
 8007c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2e:	460e      	mov	r6, r1
 8007c30:	4614      	mov	r4, r2
 8007c32:	4605      	mov	r5, r0
 8007c34:	b118      	cbz	r0, 8007c3e <__swbuf_r+0x12>
 8007c36:	6983      	ldr	r3, [r0, #24]
 8007c38:	b90b      	cbnz	r3, 8007c3e <__swbuf_r+0x12>
 8007c3a:	f000 f9cd 	bl	8007fd8 <__sinit>
 8007c3e:	4b21      	ldr	r3, [pc, #132]	; (8007cc4 <__swbuf_r+0x98>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	d12b      	bne.n	8007c9c <__swbuf_r+0x70>
 8007c44:	686c      	ldr	r4, [r5, #4]
 8007c46:	69a3      	ldr	r3, [r4, #24]
 8007c48:	60a3      	str	r3, [r4, #8]
 8007c4a:	89a3      	ldrh	r3, [r4, #12]
 8007c4c:	071a      	lsls	r2, r3, #28
 8007c4e:	d52f      	bpl.n	8007cb0 <__swbuf_r+0x84>
 8007c50:	6923      	ldr	r3, [r4, #16]
 8007c52:	b36b      	cbz	r3, 8007cb0 <__swbuf_r+0x84>
 8007c54:	6923      	ldr	r3, [r4, #16]
 8007c56:	6820      	ldr	r0, [r4, #0]
 8007c58:	b2f6      	uxtb	r6, r6
 8007c5a:	1ac0      	subs	r0, r0, r3
 8007c5c:	6963      	ldr	r3, [r4, #20]
 8007c5e:	4637      	mov	r7, r6
 8007c60:	4283      	cmp	r3, r0
 8007c62:	dc04      	bgt.n	8007c6e <__swbuf_r+0x42>
 8007c64:	4621      	mov	r1, r4
 8007c66:	4628      	mov	r0, r5
 8007c68:	f000 f922 	bl	8007eb0 <_fflush_r>
 8007c6c:	bb30      	cbnz	r0, 8007cbc <__swbuf_r+0x90>
 8007c6e:	68a3      	ldr	r3, [r4, #8]
 8007c70:	3001      	adds	r0, #1
 8007c72:	3b01      	subs	r3, #1
 8007c74:	60a3      	str	r3, [r4, #8]
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	6022      	str	r2, [r4, #0]
 8007c7c:	701e      	strb	r6, [r3, #0]
 8007c7e:	6963      	ldr	r3, [r4, #20]
 8007c80:	4283      	cmp	r3, r0
 8007c82:	d004      	beq.n	8007c8e <__swbuf_r+0x62>
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	07db      	lsls	r3, r3, #31
 8007c88:	d506      	bpl.n	8007c98 <__swbuf_r+0x6c>
 8007c8a:	2e0a      	cmp	r6, #10
 8007c8c:	d104      	bne.n	8007c98 <__swbuf_r+0x6c>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4628      	mov	r0, r5
 8007c92:	f000 f90d 	bl	8007eb0 <_fflush_r>
 8007c96:	b988      	cbnz	r0, 8007cbc <__swbuf_r+0x90>
 8007c98:	4638      	mov	r0, r7
 8007c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <__swbuf_r+0x9c>)
 8007c9e:	429c      	cmp	r4, r3
 8007ca0:	d101      	bne.n	8007ca6 <__swbuf_r+0x7a>
 8007ca2:	68ac      	ldr	r4, [r5, #8]
 8007ca4:	e7cf      	b.n	8007c46 <__swbuf_r+0x1a>
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <__swbuf_r+0xa0>)
 8007ca8:	429c      	cmp	r4, r3
 8007caa:	bf08      	it	eq
 8007cac:	68ec      	ldreq	r4, [r5, #12]
 8007cae:	e7ca      	b.n	8007c46 <__swbuf_r+0x1a>
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f000 f80c 	bl	8007cd0 <__swsetup_r>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d0cb      	beq.n	8007c54 <__swbuf_r+0x28>
 8007cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8007cc0:	e7ea      	b.n	8007c98 <__swbuf_r+0x6c>
 8007cc2:	bf00      	nop
 8007cc4:	080097d4 	.word	0x080097d4
 8007cc8:	080097f4 	.word	0x080097f4
 8007ccc:	080097b4 	.word	0x080097b4

08007cd0 <__swsetup_r>:
 8007cd0:	4b32      	ldr	r3, [pc, #200]	; (8007d9c <__swsetup_r+0xcc>)
 8007cd2:	b570      	push	{r4, r5, r6, lr}
 8007cd4:	681d      	ldr	r5, [r3, #0]
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460c      	mov	r4, r1
 8007cda:	b125      	cbz	r5, 8007ce6 <__swsetup_r+0x16>
 8007cdc:	69ab      	ldr	r3, [r5, #24]
 8007cde:	b913      	cbnz	r3, 8007ce6 <__swsetup_r+0x16>
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 f979 	bl	8007fd8 <__sinit>
 8007ce6:	4b2e      	ldr	r3, [pc, #184]	; (8007da0 <__swsetup_r+0xd0>)
 8007ce8:	429c      	cmp	r4, r3
 8007cea:	d10f      	bne.n	8007d0c <__swsetup_r+0x3c>
 8007cec:	686c      	ldr	r4, [r5, #4]
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cf4:	0719      	lsls	r1, r3, #28
 8007cf6:	d42c      	bmi.n	8007d52 <__swsetup_r+0x82>
 8007cf8:	06dd      	lsls	r5, r3, #27
 8007cfa:	d411      	bmi.n	8007d20 <__swsetup_r+0x50>
 8007cfc:	2309      	movs	r3, #9
 8007cfe:	6033      	str	r3, [r6, #0]
 8007d00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	e03e      	b.n	8007d8a <__swsetup_r+0xba>
 8007d0c:	4b25      	ldr	r3, [pc, #148]	; (8007da4 <__swsetup_r+0xd4>)
 8007d0e:	429c      	cmp	r4, r3
 8007d10:	d101      	bne.n	8007d16 <__swsetup_r+0x46>
 8007d12:	68ac      	ldr	r4, [r5, #8]
 8007d14:	e7eb      	b.n	8007cee <__swsetup_r+0x1e>
 8007d16:	4b24      	ldr	r3, [pc, #144]	; (8007da8 <__swsetup_r+0xd8>)
 8007d18:	429c      	cmp	r4, r3
 8007d1a:	bf08      	it	eq
 8007d1c:	68ec      	ldreq	r4, [r5, #12]
 8007d1e:	e7e6      	b.n	8007cee <__swsetup_r+0x1e>
 8007d20:	0758      	lsls	r0, r3, #29
 8007d22:	d512      	bpl.n	8007d4a <__swsetup_r+0x7a>
 8007d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d26:	b141      	cbz	r1, 8007d3a <__swsetup_r+0x6a>
 8007d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	d002      	beq.n	8007d36 <__swsetup_r+0x66>
 8007d30:	4630      	mov	r0, r6
 8007d32:	f000 fa5f 	bl	80081f4 <_free_r>
 8007d36:	2300      	movs	r3, #0
 8007d38:	6363      	str	r3, [r4, #52]	; 0x34
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d40:	81a3      	strh	r3, [r4, #12]
 8007d42:	2300      	movs	r3, #0
 8007d44:	6063      	str	r3, [r4, #4]
 8007d46:	6923      	ldr	r3, [r4, #16]
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	89a3      	ldrh	r3, [r4, #12]
 8007d4c:	f043 0308 	orr.w	r3, r3, #8
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	b94b      	cbnz	r3, 8007d6a <__swsetup_r+0x9a>
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d60:	d003      	beq.n	8007d6a <__swsetup_r+0x9a>
 8007d62:	4621      	mov	r1, r4
 8007d64:	4630      	mov	r0, r6
 8007d66:	f000 f9fd 	bl	8008164 <__smakebuf_r>
 8007d6a:	89a0      	ldrh	r0, [r4, #12]
 8007d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d70:	f010 0301 	ands.w	r3, r0, #1
 8007d74:	d00a      	beq.n	8007d8c <__swsetup_r+0xbc>
 8007d76:	2300      	movs	r3, #0
 8007d78:	60a3      	str	r3, [r4, #8]
 8007d7a:	6963      	ldr	r3, [r4, #20]
 8007d7c:	425b      	negs	r3, r3
 8007d7e:	61a3      	str	r3, [r4, #24]
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	b943      	cbnz	r3, 8007d96 <__swsetup_r+0xc6>
 8007d84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d88:	d1ba      	bne.n	8007d00 <__swsetup_r+0x30>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	0781      	lsls	r1, r0, #30
 8007d8e:	bf58      	it	pl
 8007d90:	6963      	ldrpl	r3, [r4, #20]
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	e7f4      	b.n	8007d80 <__swsetup_r+0xb0>
 8007d96:	2000      	movs	r0, #0
 8007d98:	e7f7      	b.n	8007d8a <__swsetup_r+0xba>
 8007d9a:	bf00      	nop
 8007d9c:	2000000c 	.word	0x2000000c
 8007da0:	080097d4 	.word	0x080097d4
 8007da4:	080097f4 	.word	0x080097f4
 8007da8:	080097b4 	.word	0x080097b4

08007dac <__sflush_r>:
 8007dac:	898a      	ldrh	r2, [r1, #12]
 8007dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db0:	4605      	mov	r5, r0
 8007db2:	0710      	lsls	r0, r2, #28
 8007db4:	460c      	mov	r4, r1
 8007db6:	d457      	bmi.n	8007e68 <__sflush_r+0xbc>
 8007db8:	684b      	ldr	r3, [r1, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	dc04      	bgt.n	8007dc8 <__sflush_r+0x1c>
 8007dbe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dc01      	bgt.n	8007dc8 <__sflush_r+0x1c>
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dca:	2e00      	cmp	r6, #0
 8007dcc:	d0fa      	beq.n	8007dc4 <__sflush_r+0x18>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007dd4:	682f      	ldr	r7, [r5, #0]
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	d032      	beq.n	8007e40 <__sflush_r+0x94>
 8007dda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	075a      	lsls	r2, r3, #29
 8007de0:	d505      	bpl.n	8007dee <__sflush_r+0x42>
 8007de2:	6863      	ldr	r3, [r4, #4]
 8007de4:	1ac0      	subs	r0, r0, r3
 8007de6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007de8:	b10b      	cbz	r3, 8007dee <__sflush_r+0x42>
 8007dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dec:	1ac0      	subs	r0, r0, r3
 8007dee:	2300      	movs	r3, #0
 8007df0:	4602      	mov	r2, r0
 8007df2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007df4:	4628      	mov	r0, r5
 8007df6:	6a21      	ldr	r1, [r4, #32]
 8007df8:	47b0      	blx	r6
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	d106      	bne.n	8007e0e <__sflush_r+0x62>
 8007e00:	6829      	ldr	r1, [r5, #0]
 8007e02:	291d      	cmp	r1, #29
 8007e04:	d82c      	bhi.n	8007e60 <__sflush_r+0xb4>
 8007e06:	4a29      	ldr	r2, [pc, #164]	; (8007eac <__sflush_r+0x100>)
 8007e08:	40ca      	lsrs	r2, r1
 8007e0a:	07d6      	lsls	r6, r2, #31
 8007e0c:	d528      	bpl.n	8007e60 <__sflush_r+0xb4>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	6062      	str	r2, [r4, #4]
 8007e12:	6922      	ldr	r2, [r4, #16]
 8007e14:	04d9      	lsls	r1, r3, #19
 8007e16:	6022      	str	r2, [r4, #0]
 8007e18:	d504      	bpl.n	8007e24 <__sflush_r+0x78>
 8007e1a:	1c42      	adds	r2, r0, #1
 8007e1c:	d101      	bne.n	8007e22 <__sflush_r+0x76>
 8007e1e:	682b      	ldr	r3, [r5, #0]
 8007e20:	b903      	cbnz	r3, 8007e24 <__sflush_r+0x78>
 8007e22:	6560      	str	r0, [r4, #84]	; 0x54
 8007e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e26:	602f      	str	r7, [r5, #0]
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d0cb      	beq.n	8007dc4 <__sflush_r+0x18>
 8007e2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e30:	4299      	cmp	r1, r3
 8007e32:	d002      	beq.n	8007e3a <__sflush_r+0x8e>
 8007e34:	4628      	mov	r0, r5
 8007e36:	f000 f9dd 	bl	80081f4 <_free_r>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e3e:	e7c2      	b.n	8007dc6 <__sflush_r+0x1a>
 8007e40:	6a21      	ldr	r1, [r4, #32]
 8007e42:	2301      	movs	r3, #1
 8007e44:	4628      	mov	r0, r5
 8007e46:	47b0      	blx	r6
 8007e48:	1c41      	adds	r1, r0, #1
 8007e4a:	d1c7      	bne.n	8007ddc <__sflush_r+0x30>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d0c4      	beq.n	8007ddc <__sflush_r+0x30>
 8007e52:	2b1d      	cmp	r3, #29
 8007e54:	d001      	beq.n	8007e5a <__sflush_r+0xae>
 8007e56:	2b16      	cmp	r3, #22
 8007e58:	d101      	bne.n	8007e5e <__sflush_r+0xb2>
 8007e5a:	602f      	str	r7, [r5, #0]
 8007e5c:	e7b2      	b.n	8007dc4 <__sflush_r+0x18>
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	e7ae      	b.n	8007dc6 <__sflush_r+0x1a>
 8007e68:	690f      	ldr	r7, [r1, #16]
 8007e6a:	2f00      	cmp	r7, #0
 8007e6c:	d0aa      	beq.n	8007dc4 <__sflush_r+0x18>
 8007e6e:	0793      	lsls	r3, r2, #30
 8007e70:	bf18      	it	ne
 8007e72:	2300      	movne	r3, #0
 8007e74:	680e      	ldr	r6, [r1, #0]
 8007e76:	bf08      	it	eq
 8007e78:	694b      	ldreq	r3, [r1, #20]
 8007e7a:	1bf6      	subs	r6, r6, r7
 8007e7c:	600f      	str	r7, [r1, #0]
 8007e7e:	608b      	str	r3, [r1, #8]
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	dd9f      	ble.n	8007dc4 <__sflush_r+0x18>
 8007e84:	4633      	mov	r3, r6
 8007e86:	463a      	mov	r2, r7
 8007e88:	4628      	mov	r0, r5
 8007e8a:	6a21      	ldr	r1, [r4, #32]
 8007e8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007e90:	47e0      	blx	ip
 8007e92:	2800      	cmp	r0, #0
 8007e94:	dc06      	bgt.n	8007ea4 <__sflush_r+0xf8>
 8007e96:	89a3      	ldrh	r3, [r4, #12]
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	e790      	b.n	8007dc6 <__sflush_r+0x1a>
 8007ea4:	4407      	add	r7, r0
 8007ea6:	1a36      	subs	r6, r6, r0
 8007ea8:	e7ea      	b.n	8007e80 <__sflush_r+0xd4>
 8007eaa:	bf00      	nop
 8007eac:	20400001 	.word	0x20400001

08007eb0 <_fflush_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	690b      	ldr	r3, [r1, #16]
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	b913      	cbnz	r3, 8007ec0 <_fflush_r+0x10>
 8007eba:	2500      	movs	r5, #0
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	bd38      	pop	{r3, r4, r5, pc}
 8007ec0:	b118      	cbz	r0, 8007eca <_fflush_r+0x1a>
 8007ec2:	6983      	ldr	r3, [r0, #24]
 8007ec4:	b90b      	cbnz	r3, 8007eca <_fflush_r+0x1a>
 8007ec6:	f000 f887 	bl	8007fd8 <__sinit>
 8007eca:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <_fflush_r+0x6c>)
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	d11b      	bne.n	8007f08 <_fflush_r+0x58>
 8007ed0:	686c      	ldr	r4, [r5, #4]
 8007ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0ef      	beq.n	8007eba <_fflush_r+0xa>
 8007eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007edc:	07d0      	lsls	r0, r2, #31
 8007ede:	d404      	bmi.n	8007eea <_fflush_r+0x3a>
 8007ee0:	0599      	lsls	r1, r3, #22
 8007ee2:	d402      	bmi.n	8007eea <_fflush_r+0x3a>
 8007ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee6:	f000 f915 	bl	8008114 <__retarget_lock_acquire_recursive>
 8007eea:	4628      	mov	r0, r5
 8007eec:	4621      	mov	r1, r4
 8007eee:	f7ff ff5d 	bl	8007dac <__sflush_r>
 8007ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	07da      	lsls	r2, r3, #31
 8007ef8:	d4e0      	bmi.n	8007ebc <_fflush_r+0xc>
 8007efa:	89a3      	ldrh	r3, [r4, #12]
 8007efc:	059b      	lsls	r3, r3, #22
 8007efe:	d4dd      	bmi.n	8007ebc <_fflush_r+0xc>
 8007f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f02:	f000 f908 	bl	8008116 <__retarget_lock_release_recursive>
 8007f06:	e7d9      	b.n	8007ebc <_fflush_r+0xc>
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <_fflush_r+0x70>)
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	d101      	bne.n	8007f12 <_fflush_r+0x62>
 8007f0e:	68ac      	ldr	r4, [r5, #8]
 8007f10:	e7df      	b.n	8007ed2 <_fflush_r+0x22>
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <_fflush_r+0x74>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	bf08      	it	eq
 8007f18:	68ec      	ldreq	r4, [r5, #12]
 8007f1a:	e7da      	b.n	8007ed2 <_fflush_r+0x22>
 8007f1c:	080097d4 	.word	0x080097d4
 8007f20:	080097f4 	.word	0x080097f4
 8007f24:	080097b4 	.word	0x080097b4

08007f28 <std>:
 8007f28:	2300      	movs	r3, #0
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f36:	6083      	str	r3, [r0, #8]
 8007f38:	8181      	strh	r1, [r0, #12]
 8007f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f3c:	81c2      	strh	r2, [r0, #14]
 8007f3e:	6183      	str	r3, [r0, #24]
 8007f40:	4619      	mov	r1, r3
 8007f42:	2208      	movs	r2, #8
 8007f44:	305c      	adds	r0, #92	; 0x5c
 8007f46:	f7ff fd15 	bl	8007974 <memset>
 8007f4a:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <std+0x38>)
 8007f4c:	6224      	str	r4, [r4, #32]
 8007f4e:	6263      	str	r3, [r4, #36]	; 0x24
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <std+0x3c>)
 8007f52:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <std+0x40>)
 8007f56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <std+0x44>)
 8007f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	bf00      	nop
 8007f60:	080089a9 	.word	0x080089a9
 8007f64:	080089cb 	.word	0x080089cb
 8007f68:	08008a03 	.word	0x08008a03
 8007f6c:	08008a27 	.word	0x08008a27

08007f70 <_cleanup_r>:
 8007f70:	4901      	ldr	r1, [pc, #4]	; (8007f78 <_cleanup_r+0x8>)
 8007f72:	f000 b8af 	b.w	80080d4 <_fwalk_reent>
 8007f76:	bf00      	nop
 8007f78:	08007eb1 	.word	0x08007eb1

08007f7c <__sfmoreglue>:
 8007f7c:	2268      	movs	r2, #104	; 0x68
 8007f7e:	b570      	push	{r4, r5, r6, lr}
 8007f80:	1e4d      	subs	r5, r1, #1
 8007f82:	4355      	muls	r5, r2
 8007f84:	460e      	mov	r6, r1
 8007f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007f8a:	f000 f99b 	bl	80082c4 <_malloc_r>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	b140      	cbz	r0, 8007fa4 <__sfmoreglue+0x28>
 8007f92:	2100      	movs	r1, #0
 8007f94:	e9c0 1600 	strd	r1, r6, [r0]
 8007f98:	300c      	adds	r0, #12
 8007f9a:	60a0      	str	r0, [r4, #8]
 8007f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fa0:	f7ff fce8 	bl	8007974 <memset>
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}

08007fa8 <__sfp_lock_acquire>:
 8007fa8:	4801      	ldr	r0, [pc, #4]	; (8007fb0 <__sfp_lock_acquire+0x8>)
 8007faa:	f000 b8b3 	b.w	8008114 <__retarget_lock_acquire_recursive>
 8007fae:	bf00      	nop
 8007fb0:	200001a1 	.word	0x200001a1

08007fb4 <__sfp_lock_release>:
 8007fb4:	4801      	ldr	r0, [pc, #4]	; (8007fbc <__sfp_lock_release+0x8>)
 8007fb6:	f000 b8ae 	b.w	8008116 <__retarget_lock_release_recursive>
 8007fba:	bf00      	nop
 8007fbc:	200001a1 	.word	0x200001a1

08007fc0 <__sinit_lock_acquire>:
 8007fc0:	4801      	ldr	r0, [pc, #4]	; (8007fc8 <__sinit_lock_acquire+0x8>)
 8007fc2:	f000 b8a7 	b.w	8008114 <__retarget_lock_acquire_recursive>
 8007fc6:	bf00      	nop
 8007fc8:	200001a2 	.word	0x200001a2

08007fcc <__sinit_lock_release>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	; (8007fd4 <__sinit_lock_release+0x8>)
 8007fce:	f000 b8a2 	b.w	8008116 <__retarget_lock_release_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	200001a2 	.word	0x200001a2

08007fd8 <__sinit>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4604      	mov	r4, r0
 8007fdc:	f7ff fff0 	bl	8007fc0 <__sinit_lock_acquire>
 8007fe0:	69a3      	ldr	r3, [r4, #24]
 8007fe2:	b11b      	cbz	r3, 8007fec <__sinit+0x14>
 8007fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe8:	f7ff bff0 	b.w	8007fcc <__sinit_lock_release>
 8007fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ff2:	4b13      	ldr	r3, [pc, #76]	; (8008040 <__sinit+0x68>)
 8007ff4:	4a13      	ldr	r2, [pc, #76]	; (8008044 <__sinit+0x6c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ffa:	42a3      	cmp	r3, r4
 8007ffc:	bf08      	it	eq
 8007ffe:	2301      	moveq	r3, #1
 8008000:	4620      	mov	r0, r4
 8008002:	bf08      	it	eq
 8008004:	61a3      	streq	r3, [r4, #24]
 8008006:	f000 f81f 	bl	8008048 <__sfp>
 800800a:	6060      	str	r0, [r4, #4]
 800800c:	4620      	mov	r0, r4
 800800e:	f000 f81b 	bl	8008048 <__sfp>
 8008012:	60a0      	str	r0, [r4, #8]
 8008014:	4620      	mov	r0, r4
 8008016:	f000 f817 	bl	8008048 <__sfp>
 800801a:	2200      	movs	r2, #0
 800801c:	2104      	movs	r1, #4
 800801e:	60e0      	str	r0, [r4, #12]
 8008020:	6860      	ldr	r0, [r4, #4]
 8008022:	f7ff ff81 	bl	8007f28 <std>
 8008026:	2201      	movs	r2, #1
 8008028:	2109      	movs	r1, #9
 800802a:	68a0      	ldr	r0, [r4, #8]
 800802c:	f7ff ff7c 	bl	8007f28 <std>
 8008030:	2202      	movs	r2, #2
 8008032:	2112      	movs	r1, #18
 8008034:	68e0      	ldr	r0, [r4, #12]
 8008036:	f7ff ff77 	bl	8007f28 <std>
 800803a:	2301      	movs	r3, #1
 800803c:	61a3      	str	r3, [r4, #24]
 800803e:	e7d1      	b.n	8007fe4 <__sinit+0xc>
 8008040:	080097b0 	.word	0x080097b0
 8008044:	08007f71 	.word	0x08007f71

08008048 <__sfp>:
 8008048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804a:	4607      	mov	r7, r0
 800804c:	f7ff ffac 	bl	8007fa8 <__sfp_lock_acquire>
 8008050:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <__sfp+0x84>)
 8008052:	681e      	ldr	r6, [r3, #0]
 8008054:	69b3      	ldr	r3, [r6, #24]
 8008056:	b913      	cbnz	r3, 800805e <__sfp+0x16>
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff ffbd 	bl	8007fd8 <__sinit>
 800805e:	3648      	adds	r6, #72	; 0x48
 8008060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008064:	3b01      	subs	r3, #1
 8008066:	d503      	bpl.n	8008070 <__sfp+0x28>
 8008068:	6833      	ldr	r3, [r6, #0]
 800806a:	b30b      	cbz	r3, 80080b0 <__sfp+0x68>
 800806c:	6836      	ldr	r6, [r6, #0]
 800806e:	e7f7      	b.n	8008060 <__sfp+0x18>
 8008070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008074:	b9d5      	cbnz	r5, 80080ac <__sfp+0x64>
 8008076:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <__sfp+0x88>)
 8008078:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800807c:	60e3      	str	r3, [r4, #12]
 800807e:	6665      	str	r5, [r4, #100]	; 0x64
 8008080:	f000 f847 	bl	8008112 <__retarget_lock_init_recursive>
 8008084:	f7ff ff96 	bl	8007fb4 <__sfp_lock_release>
 8008088:	2208      	movs	r2, #8
 800808a:	4629      	mov	r1, r5
 800808c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008094:	6025      	str	r5, [r4, #0]
 8008096:	61a5      	str	r5, [r4, #24]
 8008098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800809c:	f7ff fc6a 	bl	8007974 <memset>
 80080a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080a8:	4620      	mov	r0, r4
 80080aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ac:	3468      	adds	r4, #104	; 0x68
 80080ae:	e7d9      	b.n	8008064 <__sfp+0x1c>
 80080b0:	2104      	movs	r1, #4
 80080b2:	4638      	mov	r0, r7
 80080b4:	f7ff ff62 	bl	8007f7c <__sfmoreglue>
 80080b8:	4604      	mov	r4, r0
 80080ba:	6030      	str	r0, [r6, #0]
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1d5      	bne.n	800806c <__sfp+0x24>
 80080c0:	f7ff ff78 	bl	8007fb4 <__sfp_lock_release>
 80080c4:	230c      	movs	r3, #12
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	e7ee      	b.n	80080a8 <__sfp+0x60>
 80080ca:	bf00      	nop
 80080cc:	080097b0 	.word	0x080097b0
 80080d0:	ffff0001 	.word	0xffff0001

080080d4 <_fwalk_reent>:
 80080d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080d8:	4606      	mov	r6, r0
 80080da:	4688      	mov	r8, r1
 80080dc:	2700      	movs	r7, #0
 80080de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80080e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080e6:	f1b9 0901 	subs.w	r9, r9, #1
 80080ea:	d505      	bpl.n	80080f8 <_fwalk_reent+0x24>
 80080ec:	6824      	ldr	r4, [r4, #0]
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	d1f7      	bne.n	80080e2 <_fwalk_reent+0xe>
 80080f2:	4638      	mov	r0, r7
 80080f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f8:	89ab      	ldrh	r3, [r5, #12]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d907      	bls.n	800810e <_fwalk_reent+0x3a>
 80080fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008102:	3301      	adds	r3, #1
 8008104:	d003      	beq.n	800810e <_fwalk_reent+0x3a>
 8008106:	4629      	mov	r1, r5
 8008108:	4630      	mov	r0, r6
 800810a:	47c0      	blx	r8
 800810c:	4307      	orrs	r7, r0
 800810e:	3568      	adds	r5, #104	; 0x68
 8008110:	e7e9      	b.n	80080e6 <_fwalk_reent+0x12>

08008112 <__retarget_lock_init_recursive>:
 8008112:	4770      	bx	lr

08008114 <__retarget_lock_acquire_recursive>:
 8008114:	4770      	bx	lr

08008116 <__retarget_lock_release_recursive>:
 8008116:	4770      	bx	lr

08008118 <__swhatbuf_r>:
 8008118:	b570      	push	{r4, r5, r6, lr}
 800811a:	460e      	mov	r6, r1
 800811c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008120:	4614      	mov	r4, r2
 8008122:	2900      	cmp	r1, #0
 8008124:	461d      	mov	r5, r3
 8008126:	b096      	sub	sp, #88	; 0x58
 8008128:	da08      	bge.n	800813c <__swhatbuf_r+0x24>
 800812a:	2200      	movs	r2, #0
 800812c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008130:	602a      	str	r2, [r5, #0]
 8008132:	061a      	lsls	r2, r3, #24
 8008134:	d410      	bmi.n	8008158 <__swhatbuf_r+0x40>
 8008136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800813a:	e00e      	b.n	800815a <__swhatbuf_r+0x42>
 800813c:	466a      	mov	r2, sp
 800813e:	f000 fc99 	bl	8008a74 <_fstat_r>
 8008142:	2800      	cmp	r0, #0
 8008144:	dbf1      	blt.n	800812a <__swhatbuf_r+0x12>
 8008146:	9a01      	ldr	r2, [sp, #4]
 8008148:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800814c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008150:	425a      	negs	r2, r3
 8008152:	415a      	adcs	r2, r3
 8008154:	602a      	str	r2, [r5, #0]
 8008156:	e7ee      	b.n	8008136 <__swhatbuf_r+0x1e>
 8008158:	2340      	movs	r3, #64	; 0x40
 800815a:	2000      	movs	r0, #0
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	b016      	add	sp, #88	; 0x58
 8008160:	bd70      	pop	{r4, r5, r6, pc}
	...

08008164 <__smakebuf_r>:
 8008164:	898b      	ldrh	r3, [r1, #12]
 8008166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008168:	079d      	lsls	r5, r3, #30
 800816a:	4606      	mov	r6, r0
 800816c:	460c      	mov	r4, r1
 800816e:	d507      	bpl.n	8008180 <__smakebuf_r+0x1c>
 8008170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	6123      	str	r3, [r4, #16]
 8008178:	2301      	movs	r3, #1
 800817a:	6163      	str	r3, [r4, #20]
 800817c:	b002      	add	sp, #8
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	466a      	mov	r2, sp
 8008182:	ab01      	add	r3, sp, #4
 8008184:	f7ff ffc8 	bl	8008118 <__swhatbuf_r>
 8008188:	9900      	ldr	r1, [sp, #0]
 800818a:	4605      	mov	r5, r0
 800818c:	4630      	mov	r0, r6
 800818e:	f000 f899 	bl	80082c4 <_malloc_r>
 8008192:	b948      	cbnz	r0, 80081a8 <__smakebuf_r+0x44>
 8008194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008198:	059a      	lsls	r2, r3, #22
 800819a:	d4ef      	bmi.n	800817c <__smakebuf_r+0x18>
 800819c:	f023 0303 	bic.w	r3, r3, #3
 80081a0:	f043 0302 	orr.w	r3, r3, #2
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	e7e3      	b.n	8008170 <__smakebuf_r+0xc>
 80081a8:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <__smakebuf_r+0x7c>)
 80081aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	6020      	str	r0, [r4, #0]
 80081b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	9b00      	ldr	r3, [sp, #0]
 80081b8:	6120      	str	r0, [r4, #16]
 80081ba:	6163      	str	r3, [r4, #20]
 80081bc:	9b01      	ldr	r3, [sp, #4]
 80081be:	b15b      	cbz	r3, 80081d8 <__smakebuf_r+0x74>
 80081c0:	4630      	mov	r0, r6
 80081c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081c6:	f000 fc67 	bl	8008a98 <_isatty_r>
 80081ca:	b128      	cbz	r0, 80081d8 <__smakebuf_r+0x74>
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	f043 0301 	orr.w	r3, r3, #1
 80081d6:	81a3      	strh	r3, [r4, #12]
 80081d8:	89a0      	ldrh	r0, [r4, #12]
 80081da:	4305      	orrs	r5, r0
 80081dc:	81a5      	strh	r5, [r4, #12]
 80081de:	e7cd      	b.n	800817c <__smakebuf_r+0x18>
 80081e0:	08007f71 	.word	0x08007f71

080081e4 <malloc>:
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <malloc+0xc>)
 80081e6:	4601      	mov	r1, r0
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	f000 b86b 	b.w	80082c4 <_malloc_r>
 80081ee:	bf00      	nop
 80081f0:	2000000c 	.word	0x2000000c

080081f4 <_free_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4605      	mov	r5, r0
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d040      	beq.n	800827e <_free_r+0x8a>
 80081fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008200:	1f0c      	subs	r4, r1, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfb8      	it	lt
 8008206:	18e4      	addlt	r4, r4, r3
 8008208:	f000 fc76 	bl	8008af8 <__malloc_lock>
 800820c:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <_free_r+0x8c>)
 800820e:	6813      	ldr	r3, [r2, #0]
 8008210:	b933      	cbnz	r3, 8008220 <_free_r+0x2c>
 8008212:	6063      	str	r3, [r4, #4]
 8008214:	6014      	str	r4, [r2, #0]
 8008216:	4628      	mov	r0, r5
 8008218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800821c:	f000 bc72 	b.w	8008b04 <__malloc_unlock>
 8008220:	42a3      	cmp	r3, r4
 8008222:	d908      	bls.n	8008236 <_free_r+0x42>
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	1821      	adds	r1, r4, r0
 8008228:	428b      	cmp	r3, r1
 800822a:	bf01      	itttt	eq
 800822c:	6819      	ldreq	r1, [r3, #0]
 800822e:	685b      	ldreq	r3, [r3, #4]
 8008230:	1809      	addeq	r1, r1, r0
 8008232:	6021      	streq	r1, [r4, #0]
 8008234:	e7ed      	b.n	8008212 <_free_r+0x1e>
 8008236:	461a      	mov	r2, r3
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	b10b      	cbz	r3, 8008240 <_free_r+0x4c>
 800823c:	42a3      	cmp	r3, r4
 800823e:	d9fa      	bls.n	8008236 <_free_r+0x42>
 8008240:	6811      	ldr	r1, [r2, #0]
 8008242:	1850      	adds	r0, r2, r1
 8008244:	42a0      	cmp	r0, r4
 8008246:	d10b      	bne.n	8008260 <_free_r+0x6c>
 8008248:	6820      	ldr	r0, [r4, #0]
 800824a:	4401      	add	r1, r0
 800824c:	1850      	adds	r0, r2, r1
 800824e:	4283      	cmp	r3, r0
 8008250:	6011      	str	r1, [r2, #0]
 8008252:	d1e0      	bne.n	8008216 <_free_r+0x22>
 8008254:	6818      	ldr	r0, [r3, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	4401      	add	r1, r0
 800825a:	6011      	str	r1, [r2, #0]
 800825c:	6053      	str	r3, [r2, #4]
 800825e:	e7da      	b.n	8008216 <_free_r+0x22>
 8008260:	d902      	bls.n	8008268 <_free_r+0x74>
 8008262:	230c      	movs	r3, #12
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	e7d6      	b.n	8008216 <_free_r+0x22>
 8008268:	6820      	ldr	r0, [r4, #0]
 800826a:	1821      	adds	r1, r4, r0
 800826c:	428b      	cmp	r3, r1
 800826e:	bf01      	itttt	eq
 8008270:	6819      	ldreq	r1, [r3, #0]
 8008272:	685b      	ldreq	r3, [r3, #4]
 8008274:	1809      	addeq	r1, r1, r0
 8008276:	6021      	streq	r1, [r4, #0]
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	6054      	str	r4, [r2, #4]
 800827c:	e7cb      	b.n	8008216 <_free_r+0x22>
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	200001a4 	.word	0x200001a4

08008284 <sbrk_aligned>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	4e0e      	ldr	r6, [pc, #56]	; (80082c0 <sbrk_aligned+0x3c>)
 8008288:	460c      	mov	r4, r1
 800828a:	6831      	ldr	r1, [r6, #0]
 800828c:	4605      	mov	r5, r0
 800828e:	b911      	cbnz	r1, 8008296 <sbrk_aligned+0x12>
 8008290:	f000 fb7a 	bl	8008988 <_sbrk_r>
 8008294:	6030      	str	r0, [r6, #0]
 8008296:	4621      	mov	r1, r4
 8008298:	4628      	mov	r0, r5
 800829a:	f000 fb75 	bl	8008988 <_sbrk_r>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	d00a      	beq.n	80082b8 <sbrk_aligned+0x34>
 80082a2:	1cc4      	adds	r4, r0, #3
 80082a4:	f024 0403 	bic.w	r4, r4, #3
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d007      	beq.n	80082bc <sbrk_aligned+0x38>
 80082ac:	1a21      	subs	r1, r4, r0
 80082ae:	4628      	mov	r0, r5
 80082b0:	f000 fb6a 	bl	8008988 <_sbrk_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	d101      	bne.n	80082bc <sbrk_aligned+0x38>
 80082b8:	f04f 34ff 	mov.w	r4, #4294967295
 80082bc:	4620      	mov	r0, r4
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	200001a8 	.word	0x200001a8

080082c4 <_malloc_r>:
 80082c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c8:	1ccd      	adds	r5, r1, #3
 80082ca:	f025 0503 	bic.w	r5, r5, #3
 80082ce:	3508      	adds	r5, #8
 80082d0:	2d0c      	cmp	r5, #12
 80082d2:	bf38      	it	cc
 80082d4:	250c      	movcc	r5, #12
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	4607      	mov	r7, r0
 80082da:	db01      	blt.n	80082e0 <_malloc_r+0x1c>
 80082dc:	42a9      	cmp	r1, r5
 80082de:	d905      	bls.n	80082ec <_malloc_r+0x28>
 80082e0:	230c      	movs	r3, #12
 80082e2:	2600      	movs	r6, #0
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	4630      	mov	r0, r6
 80082e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ec:	4e2e      	ldr	r6, [pc, #184]	; (80083a8 <_malloc_r+0xe4>)
 80082ee:	f000 fc03 	bl	8008af8 <__malloc_lock>
 80082f2:	6833      	ldr	r3, [r6, #0]
 80082f4:	461c      	mov	r4, r3
 80082f6:	bb34      	cbnz	r4, 8008346 <_malloc_r+0x82>
 80082f8:	4629      	mov	r1, r5
 80082fa:	4638      	mov	r0, r7
 80082fc:	f7ff ffc2 	bl	8008284 <sbrk_aligned>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	4604      	mov	r4, r0
 8008304:	d14d      	bne.n	80083a2 <_malloc_r+0xde>
 8008306:	6834      	ldr	r4, [r6, #0]
 8008308:	4626      	mov	r6, r4
 800830a:	2e00      	cmp	r6, #0
 800830c:	d140      	bne.n	8008390 <_malloc_r+0xcc>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	4631      	mov	r1, r6
 8008312:	4638      	mov	r0, r7
 8008314:	eb04 0803 	add.w	r8, r4, r3
 8008318:	f000 fb36 	bl	8008988 <_sbrk_r>
 800831c:	4580      	cmp	r8, r0
 800831e:	d13a      	bne.n	8008396 <_malloc_r+0xd2>
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	3503      	adds	r5, #3
 8008324:	1a6d      	subs	r5, r5, r1
 8008326:	f025 0503 	bic.w	r5, r5, #3
 800832a:	3508      	adds	r5, #8
 800832c:	2d0c      	cmp	r5, #12
 800832e:	bf38      	it	cc
 8008330:	250c      	movcc	r5, #12
 8008332:	4638      	mov	r0, r7
 8008334:	4629      	mov	r1, r5
 8008336:	f7ff ffa5 	bl	8008284 <sbrk_aligned>
 800833a:	3001      	adds	r0, #1
 800833c:	d02b      	beq.n	8008396 <_malloc_r+0xd2>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	442b      	add	r3, r5
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	e00e      	b.n	8008364 <_malloc_r+0xa0>
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	1b52      	subs	r2, r2, r5
 800834a:	d41e      	bmi.n	800838a <_malloc_r+0xc6>
 800834c:	2a0b      	cmp	r2, #11
 800834e:	d916      	bls.n	800837e <_malloc_r+0xba>
 8008350:	1961      	adds	r1, r4, r5
 8008352:	42a3      	cmp	r3, r4
 8008354:	6025      	str	r5, [r4, #0]
 8008356:	bf18      	it	ne
 8008358:	6059      	strne	r1, [r3, #4]
 800835a:	6863      	ldr	r3, [r4, #4]
 800835c:	bf08      	it	eq
 800835e:	6031      	streq	r1, [r6, #0]
 8008360:	5162      	str	r2, [r4, r5]
 8008362:	604b      	str	r3, [r1, #4]
 8008364:	4638      	mov	r0, r7
 8008366:	f104 060b 	add.w	r6, r4, #11
 800836a:	f000 fbcb 	bl	8008b04 <__malloc_unlock>
 800836e:	f026 0607 	bic.w	r6, r6, #7
 8008372:	1d23      	adds	r3, r4, #4
 8008374:	1af2      	subs	r2, r6, r3
 8008376:	d0b6      	beq.n	80082e6 <_malloc_r+0x22>
 8008378:	1b9b      	subs	r3, r3, r6
 800837a:	50a3      	str	r3, [r4, r2]
 800837c:	e7b3      	b.n	80082e6 <_malloc_r+0x22>
 800837e:	6862      	ldr	r2, [r4, #4]
 8008380:	42a3      	cmp	r3, r4
 8008382:	bf0c      	ite	eq
 8008384:	6032      	streq	r2, [r6, #0]
 8008386:	605a      	strne	r2, [r3, #4]
 8008388:	e7ec      	b.n	8008364 <_malloc_r+0xa0>
 800838a:	4623      	mov	r3, r4
 800838c:	6864      	ldr	r4, [r4, #4]
 800838e:	e7b2      	b.n	80082f6 <_malloc_r+0x32>
 8008390:	4634      	mov	r4, r6
 8008392:	6876      	ldr	r6, [r6, #4]
 8008394:	e7b9      	b.n	800830a <_malloc_r+0x46>
 8008396:	230c      	movs	r3, #12
 8008398:	4638      	mov	r0, r7
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	f000 fbb2 	bl	8008b04 <__malloc_unlock>
 80083a0:	e7a1      	b.n	80082e6 <_malloc_r+0x22>
 80083a2:	6025      	str	r5, [r4, #0]
 80083a4:	e7de      	b.n	8008364 <_malloc_r+0xa0>
 80083a6:	bf00      	nop
 80083a8:	200001a4 	.word	0x200001a4

080083ac <__sfputc_r>:
 80083ac:	6893      	ldr	r3, [r2, #8]
 80083ae:	b410      	push	{r4}
 80083b0:	3b01      	subs	r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	6093      	str	r3, [r2, #8]
 80083b6:	da07      	bge.n	80083c8 <__sfputc_r+0x1c>
 80083b8:	6994      	ldr	r4, [r2, #24]
 80083ba:	42a3      	cmp	r3, r4
 80083bc:	db01      	blt.n	80083c2 <__sfputc_r+0x16>
 80083be:	290a      	cmp	r1, #10
 80083c0:	d102      	bne.n	80083c8 <__sfputc_r+0x1c>
 80083c2:	bc10      	pop	{r4}
 80083c4:	f7ff bc32 	b.w	8007c2c <__swbuf_r>
 80083c8:	6813      	ldr	r3, [r2, #0]
 80083ca:	1c58      	adds	r0, r3, #1
 80083cc:	6010      	str	r0, [r2, #0]
 80083ce:	7019      	strb	r1, [r3, #0]
 80083d0:	4608      	mov	r0, r1
 80083d2:	bc10      	pop	{r4}
 80083d4:	4770      	bx	lr

080083d6 <__sfputs_r>:
 80083d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d8:	4606      	mov	r6, r0
 80083da:	460f      	mov	r7, r1
 80083dc:	4614      	mov	r4, r2
 80083de:	18d5      	adds	r5, r2, r3
 80083e0:	42ac      	cmp	r4, r5
 80083e2:	d101      	bne.n	80083e8 <__sfputs_r+0x12>
 80083e4:	2000      	movs	r0, #0
 80083e6:	e007      	b.n	80083f8 <__sfputs_r+0x22>
 80083e8:	463a      	mov	r2, r7
 80083ea:	4630      	mov	r0, r6
 80083ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f0:	f7ff ffdc 	bl	80083ac <__sfputc_r>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d1f3      	bne.n	80083e0 <__sfputs_r+0xa>
 80083f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080083fc <_vfiprintf_r>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	460d      	mov	r5, r1
 8008402:	4614      	mov	r4, r2
 8008404:	4698      	mov	r8, r3
 8008406:	4606      	mov	r6, r0
 8008408:	b09d      	sub	sp, #116	; 0x74
 800840a:	b118      	cbz	r0, 8008414 <_vfiprintf_r+0x18>
 800840c:	6983      	ldr	r3, [r0, #24]
 800840e:	b90b      	cbnz	r3, 8008414 <_vfiprintf_r+0x18>
 8008410:	f7ff fde2 	bl	8007fd8 <__sinit>
 8008414:	4b89      	ldr	r3, [pc, #548]	; (800863c <_vfiprintf_r+0x240>)
 8008416:	429d      	cmp	r5, r3
 8008418:	d11b      	bne.n	8008452 <_vfiprintf_r+0x56>
 800841a:	6875      	ldr	r5, [r6, #4]
 800841c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800841e:	07d9      	lsls	r1, r3, #31
 8008420:	d405      	bmi.n	800842e <_vfiprintf_r+0x32>
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	059a      	lsls	r2, r3, #22
 8008426:	d402      	bmi.n	800842e <_vfiprintf_r+0x32>
 8008428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800842a:	f7ff fe73 	bl	8008114 <__retarget_lock_acquire_recursive>
 800842e:	89ab      	ldrh	r3, [r5, #12]
 8008430:	071b      	lsls	r3, r3, #28
 8008432:	d501      	bpl.n	8008438 <_vfiprintf_r+0x3c>
 8008434:	692b      	ldr	r3, [r5, #16]
 8008436:	b9eb      	cbnz	r3, 8008474 <_vfiprintf_r+0x78>
 8008438:	4629      	mov	r1, r5
 800843a:	4630      	mov	r0, r6
 800843c:	f7ff fc48 	bl	8007cd0 <__swsetup_r>
 8008440:	b1c0      	cbz	r0, 8008474 <_vfiprintf_r+0x78>
 8008442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008444:	07dc      	lsls	r4, r3, #31
 8008446:	d50e      	bpl.n	8008466 <_vfiprintf_r+0x6a>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	b01d      	add	sp, #116	; 0x74
 800844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008452:	4b7b      	ldr	r3, [pc, #492]	; (8008640 <_vfiprintf_r+0x244>)
 8008454:	429d      	cmp	r5, r3
 8008456:	d101      	bne.n	800845c <_vfiprintf_r+0x60>
 8008458:	68b5      	ldr	r5, [r6, #8]
 800845a:	e7df      	b.n	800841c <_vfiprintf_r+0x20>
 800845c:	4b79      	ldr	r3, [pc, #484]	; (8008644 <_vfiprintf_r+0x248>)
 800845e:	429d      	cmp	r5, r3
 8008460:	bf08      	it	eq
 8008462:	68f5      	ldreq	r5, [r6, #12]
 8008464:	e7da      	b.n	800841c <_vfiprintf_r+0x20>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	0598      	lsls	r0, r3, #22
 800846a:	d4ed      	bmi.n	8008448 <_vfiprintf_r+0x4c>
 800846c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800846e:	f7ff fe52 	bl	8008116 <__retarget_lock_release_recursive>
 8008472:	e7e9      	b.n	8008448 <_vfiprintf_r+0x4c>
 8008474:	2300      	movs	r3, #0
 8008476:	9309      	str	r3, [sp, #36]	; 0x24
 8008478:	2320      	movs	r3, #32
 800847a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800847e:	2330      	movs	r3, #48	; 0x30
 8008480:	f04f 0901 	mov.w	r9, #1
 8008484:	f8cd 800c 	str.w	r8, [sp, #12]
 8008488:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008648 <_vfiprintf_r+0x24c>
 800848c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008490:	4623      	mov	r3, r4
 8008492:	469a      	mov	sl, r3
 8008494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008498:	b10a      	cbz	r2, 800849e <_vfiprintf_r+0xa2>
 800849a:	2a25      	cmp	r2, #37	; 0x25
 800849c:	d1f9      	bne.n	8008492 <_vfiprintf_r+0x96>
 800849e:	ebba 0b04 	subs.w	fp, sl, r4
 80084a2:	d00b      	beq.n	80084bc <_vfiprintf_r+0xc0>
 80084a4:	465b      	mov	r3, fp
 80084a6:	4622      	mov	r2, r4
 80084a8:	4629      	mov	r1, r5
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff ff93 	bl	80083d6 <__sfputs_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	f000 80aa 	beq.w	800860a <_vfiprintf_r+0x20e>
 80084b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b8:	445a      	add	r2, fp
 80084ba:	9209      	str	r2, [sp, #36]	; 0x24
 80084bc:	f89a 3000 	ldrb.w	r3, [sl]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 80a2 	beq.w	800860a <_vfiprintf_r+0x20e>
 80084c6:	2300      	movs	r3, #0
 80084c8:	f04f 32ff 	mov.w	r2, #4294967295
 80084cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084d0:	f10a 0a01 	add.w	sl, sl, #1
 80084d4:	9304      	str	r3, [sp, #16]
 80084d6:	9307      	str	r3, [sp, #28]
 80084d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084dc:	931a      	str	r3, [sp, #104]	; 0x68
 80084de:	4654      	mov	r4, sl
 80084e0:	2205      	movs	r2, #5
 80084e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e6:	4858      	ldr	r0, [pc, #352]	; (8008648 <_vfiprintf_r+0x24c>)
 80084e8:	f000 faf8 	bl	8008adc <memchr>
 80084ec:	9a04      	ldr	r2, [sp, #16]
 80084ee:	b9d8      	cbnz	r0, 8008528 <_vfiprintf_r+0x12c>
 80084f0:	06d1      	lsls	r1, r2, #27
 80084f2:	bf44      	itt	mi
 80084f4:	2320      	movmi	r3, #32
 80084f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fa:	0713      	lsls	r3, r2, #28
 80084fc:	bf44      	itt	mi
 80084fe:	232b      	movmi	r3, #43	; 0x2b
 8008500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008504:	f89a 3000 	ldrb.w	r3, [sl]
 8008508:	2b2a      	cmp	r3, #42	; 0x2a
 800850a:	d015      	beq.n	8008538 <_vfiprintf_r+0x13c>
 800850c:	4654      	mov	r4, sl
 800850e:	2000      	movs	r0, #0
 8008510:	f04f 0c0a 	mov.w	ip, #10
 8008514:	9a07      	ldr	r2, [sp, #28]
 8008516:	4621      	mov	r1, r4
 8008518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851c:	3b30      	subs	r3, #48	; 0x30
 800851e:	2b09      	cmp	r3, #9
 8008520:	d94e      	bls.n	80085c0 <_vfiprintf_r+0x1c4>
 8008522:	b1b0      	cbz	r0, 8008552 <_vfiprintf_r+0x156>
 8008524:	9207      	str	r2, [sp, #28]
 8008526:	e014      	b.n	8008552 <_vfiprintf_r+0x156>
 8008528:	eba0 0308 	sub.w	r3, r0, r8
 800852c:	fa09 f303 	lsl.w	r3, r9, r3
 8008530:	4313      	orrs	r3, r2
 8008532:	46a2      	mov	sl, r4
 8008534:	9304      	str	r3, [sp, #16]
 8008536:	e7d2      	b.n	80084de <_vfiprintf_r+0xe2>
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	1d19      	adds	r1, r3, #4
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	9103      	str	r1, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	bfbb      	ittet	lt
 8008544:	425b      	neglt	r3, r3
 8008546:	f042 0202 	orrlt.w	r2, r2, #2
 800854a:	9307      	strge	r3, [sp, #28]
 800854c:	9307      	strlt	r3, [sp, #28]
 800854e:	bfb8      	it	lt
 8008550:	9204      	strlt	r2, [sp, #16]
 8008552:	7823      	ldrb	r3, [r4, #0]
 8008554:	2b2e      	cmp	r3, #46	; 0x2e
 8008556:	d10c      	bne.n	8008572 <_vfiprintf_r+0x176>
 8008558:	7863      	ldrb	r3, [r4, #1]
 800855a:	2b2a      	cmp	r3, #42	; 0x2a
 800855c:	d135      	bne.n	80085ca <_vfiprintf_r+0x1ce>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	3402      	adds	r4, #2
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	9203      	str	r2, [sp, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	bfb8      	it	lt
 800856c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008570:	9305      	str	r3, [sp, #20]
 8008572:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800864c <_vfiprintf_r+0x250>
 8008576:	2203      	movs	r2, #3
 8008578:	4650      	mov	r0, sl
 800857a:	7821      	ldrb	r1, [r4, #0]
 800857c:	f000 faae 	bl	8008adc <memchr>
 8008580:	b140      	cbz	r0, 8008594 <_vfiprintf_r+0x198>
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	eba0 000a 	sub.w	r0, r0, sl
 8008588:	fa03 f000 	lsl.w	r0, r3, r0
 800858c:	9b04      	ldr	r3, [sp, #16]
 800858e:	3401      	adds	r4, #1
 8008590:	4303      	orrs	r3, r0
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008598:	2206      	movs	r2, #6
 800859a:	482d      	ldr	r0, [pc, #180]	; (8008650 <_vfiprintf_r+0x254>)
 800859c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085a0:	f000 fa9c 	bl	8008adc <memchr>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d03f      	beq.n	8008628 <_vfiprintf_r+0x22c>
 80085a8:	4b2a      	ldr	r3, [pc, #168]	; (8008654 <_vfiprintf_r+0x258>)
 80085aa:	bb1b      	cbnz	r3, 80085f4 <_vfiprintf_r+0x1f8>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	3307      	adds	r3, #7
 80085b0:	f023 0307 	bic.w	r3, r3, #7
 80085b4:	3308      	adds	r3, #8
 80085b6:	9303      	str	r3, [sp, #12]
 80085b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ba:	443b      	add	r3, r7
 80085bc:	9309      	str	r3, [sp, #36]	; 0x24
 80085be:	e767      	b.n	8008490 <_vfiprintf_r+0x94>
 80085c0:	460c      	mov	r4, r1
 80085c2:	2001      	movs	r0, #1
 80085c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c8:	e7a5      	b.n	8008516 <_vfiprintf_r+0x11a>
 80085ca:	2300      	movs	r3, #0
 80085cc:	f04f 0c0a 	mov.w	ip, #10
 80085d0:	4619      	mov	r1, r3
 80085d2:	3401      	adds	r4, #1
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	4620      	mov	r0, r4
 80085d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085dc:	3a30      	subs	r2, #48	; 0x30
 80085de:	2a09      	cmp	r2, #9
 80085e0:	d903      	bls.n	80085ea <_vfiprintf_r+0x1ee>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0c5      	beq.n	8008572 <_vfiprintf_r+0x176>
 80085e6:	9105      	str	r1, [sp, #20]
 80085e8:	e7c3      	b.n	8008572 <_vfiprintf_r+0x176>
 80085ea:	4604      	mov	r4, r0
 80085ec:	2301      	movs	r3, #1
 80085ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80085f2:	e7f0      	b.n	80085d6 <_vfiprintf_r+0x1da>
 80085f4:	ab03      	add	r3, sp, #12
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	462a      	mov	r2, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	4b16      	ldr	r3, [pc, #88]	; (8008658 <_vfiprintf_r+0x25c>)
 80085fe:	a904      	add	r1, sp, #16
 8008600:	f3af 8000 	nop.w
 8008604:	4607      	mov	r7, r0
 8008606:	1c78      	adds	r0, r7, #1
 8008608:	d1d6      	bne.n	80085b8 <_vfiprintf_r+0x1bc>
 800860a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800860c:	07d9      	lsls	r1, r3, #31
 800860e:	d405      	bmi.n	800861c <_vfiprintf_r+0x220>
 8008610:	89ab      	ldrh	r3, [r5, #12]
 8008612:	059a      	lsls	r2, r3, #22
 8008614:	d402      	bmi.n	800861c <_vfiprintf_r+0x220>
 8008616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008618:	f7ff fd7d 	bl	8008116 <__retarget_lock_release_recursive>
 800861c:	89ab      	ldrh	r3, [r5, #12]
 800861e:	065b      	lsls	r3, r3, #25
 8008620:	f53f af12 	bmi.w	8008448 <_vfiprintf_r+0x4c>
 8008624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008626:	e711      	b.n	800844c <_vfiprintf_r+0x50>
 8008628:	ab03      	add	r3, sp, #12
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	462a      	mov	r2, r5
 800862e:	4630      	mov	r0, r6
 8008630:	4b09      	ldr	r3, [pc, #36]	; (8008658 <_vfiprintf_r+0x25c>)
 8008632:	a904      	add	r1, sp, #16
 8008634:	f000 f882 	bl	800873c <_printf_i>
 8008638:	e7e4      	b.n	8008604 <_vfiprintf_r+0x208>
 800863a:	bf00      	nop
 800863c:	080097d4 	.word	0x080097d4
 8008640:	080097f4 	.word	0x080097f4
 8008644:	080097b4 	.word	0x080097b4
 8008648:	08009814 	.word	0x08009814
 800864c:	0800981a 	.word	0x0800981a
 8008650:	0800981e 	.word	0x0800981e
 8008654:	00000000 	.word	0x00000000
 8008658:	080083d7 	.word	0x080083d7

0800865c <_printf_common>:
 800865c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008660:	4616      	mov	r6, r2
 8008662:	4699      	mov	r9, r3
 8008664:	688a      	ldr	r2, [r1, #8]
 8008666:	690b      	ldr	r3, [r1, #16]
 8008668:	4607      	mov	r7, r0
 800866a:	4293      	cmp	r3, r2
 800866c:	bfb8      	it	lt
 800866e:	4613      	movlt	r3, r2
 8008670:	6033      	str	r3, [r6, #0]
 8008672:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008676:	460c      	mov	r4, r1
 8008678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800867c:	b10a      	cbz	r2, 8008682 <_printf_common+0x26>
 800867e:	3301      	adds	r3, #1
 8008680:	6033      	str	r3, [r6, #0]
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	0699      	lsls	r1, r3, #26
 8008686:	bf42      	ittt	mi
 8008688:	6833      	ldrmi	r3, [r6, #0]
 800868a:	3302      	addmi	r3, #2
 800868c:	6033      	strmi	r3, [r6, #0]
 800868e:	6825      	ldr	r5, [r4, #0]
 8008690:	f015 0506 	ands.w	r5, r5, #6
 8008694:	d106      	bne.n	80086a4 <_printf_common+0x48>
 8008696:	f104 0a19 	add.w	sl, r4, #25
 800869a:	68e3      	ldr	r3, [r4, #12]
 800869c:	6832      	ldr	r2, [r6, #0]
 800869e:	1a9b      	subs	r3, r3, r2
 80086a0:	42ab      	cmp	r3, r5
 80086a2:	dc28      	bgt.n	80086f6 <_printf_common+0x9a>
 80086a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086a8:	1e13      	subs	r3, r2, #0
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	bf18      	it	ne
 80086ae:	2301      	movne	r3, #1
 80086b0:	0692      	lsls	r2, r2, #26
 80086b2:	d42d      	bmi.n	8008710 <_printf_common+0xb4>
 80086b4:	4649      	mov	r1, r9
 80086b6:	4638      	mov	r0, r7
 80086b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086bc:	47c0      	blx	r8
 80086be:	3001      	adds	r0, #1
 80086c0:	d020      	beq.n	8008704 <_printf_common+0xa8>
 80086c2:	6823      	ldr	r3, [r4, #0]
 80086c4:	68e5      	ldr	r5, [r4, #12]
 80086c6:	f003 0306 	and.w	r3, r3, #6
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	bf18      	it	ne
 80086ce:	2500      	movne	r5, #0
 80086d0:	6832      	ldr	r2, [r6, #0]
 80086d2:	f04f 0600 	mov.w	r6, #0
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	bf08      	it	eq
 80086da:	1aad      	subeq	r5, r5, r2
 80086dc:	6922      	ldr	r2, [r4, #16]
 80086de:	bf08      	it	eq
 80086e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e4:	4293      	cmp	r3, r2
 80086e6:	bfc4      	itt	gt
 80086e8:	1a9b      	subgt	r3, r3, r2
 80086ea:	18ed      	addgt	r5, r5, r3
 80086ec:	341a      	adds	r4, #26
 80086ee:	42b5      	cmp	r5, r6
 80086f0:	d11a      	bne.n	8008728 <_printf_common+0xcc>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e008      	b.n	8008708 <_printf_common+0xac>
 80086f6:	2301      	movs	r3, #1
 80086f8:	4652      	mov	r2, sl
 80086fa:	4649      	mov	r1, r9
 80086fc:	4638      	mov	r0, r7
 80086fe:	47c0      	blx	r8
 8008700:	3001      	adds	r0, #1
 8008702:	d103      	bne.n	800870c <_printf_common+0xb0>
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	3501      	adds	r5, #1
 800870e:	e7c4      	b.n	800869a <_printf_common+0x3e>
 8008710:	2030      	movs	r0, #48	; 0x30
 8008712:	18e1      	adds	r1, r4, r3
 8008714:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800871e:	4422      	add	r2, r4
 8008720:	3302      	adds	r3, #2
 8008722:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008726:	e7c5      	b.n	80086b4 <_printf_common+0x58>
 8008728:	2301      	movs	r3, #1
 800872a:	4622      	mov	r2, r4
 800872c:	4649      	mov	r1, r9
 800872e:	4638      	mov	r0, r7
 8008730:	47c0      	blx	r8
 8008732:	3001      	adds	r0, #1
 8008734:	d0e6      	beq.n	8008704 <_printf_common+0xa8>
 8008736:	3601      	adds	r6, #1
 8008738:	e7d9      	b.n	80086ee <_printf_common+0x92>
	...

0800873c <_printf_i>:
 800873c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	7e0f      	ldrb	r7, [r1, #24]
 8008742:	4691      	mov	r9, r2
 8008744:	2f78      	cmp	r7, #120	; 0x78
 8008746:	4680      	mov	r8, r0
 8008748:	460c      	mov	r4, r1
 800874a:	469a      	mov	sl, r3
 800874c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800874e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008752:	d807      	bhi.n	8008764 <_printf_i+0x28>
 8008754:	2f62      	cmp	r7, #98	; 0x62
 8008756:	d80a      	bhi.n	800876e <_printf_i+0x32>
 8008758:	2f00      	cmp	r7, #0
 800875a:	f000 80d9 	beq.w	8008910 <_printf_i+0x1d4>
 800875e:	2f58      	cmp	r7, #88	; 0x58
 8008760:	f000 80a4 	beq.w	80088ac <_printf_i+0x170>
 8008764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800876c:	e03a      	b.n	80087e4 <_printf_i+0xa8>
 800876e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008772:	2b15      	cmp	r3, #21
 8008774:	d8f6      	bhi.n	8008764 <_printf_i+0x28>
 8008776:	a101      	add	r1, pc, #4	; (adr r1, 800877c <_printf_i+0x40>)
 8008778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800877c:	080087d5 	.word	0x080087d5
 8008780:	080087e9 	.word	0x080087e9
 8008784:	08008765 	.word	0x08008765
 8008788:	08008765 	.word	0x08008765
 800878c:	08008765 	.word	0x08008765
 8008790:	08008765 	.word	0x08008765
 8008794:	080087e9 	.word	0x080087e9
 8008798:	08008765 	.word	0x08008765
 800879c:	08008765 	.word	0x08008765
 80087a0:	08008765 	.word	0x08008765
 80087a4:	08008765 	.word	0x08008765
 80087a8:	080088f7 	.word	0x080088f7
 80087ac:	08008819 	.word	0x08008819
 80087b0:	080088d9 	.word	0x080088d9
 80087b4:	08008765 	.word	0x08008765
 80087b8:	08008765 	.word	0x08008765
 80087bc:	08008919 	.word	0x08008919
 80087c0:	08008765 	.word	0x08008765
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008765 	.word	0x08008765
 80087cc:	08008765 	.word	0x08008765
 80087d0:	080088e1 	.word	0x080088e1
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	602a      	str	r2, [r5, #0]
 80087dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e4:	2301      	movs	r3, #1
 80087e6:	e0a4      	b.n	8008932 <_printf_i+0x1f6>
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	6829      	ldr	r1, [r5, #0]
 80087ec:	0606      	lsls	r6, r0, #24
 80087ee:	f101 0304 	add.w	r3, r1, #4
 80087f2:	d50a      	bpl.n	800880a <_printf_i+0xce>
 80087f4:	680e      	ldr	r6, [r1, #0]
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	2e00      	cmp	r6, #0
 80087fa:	da03      	bge.n	8008804 <_printf_i+0xc8>
 80087fc:	232d      	movs	r3, #45	; 0x2d
 80087fe:	4276      	negs	r6, r6
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008804:	230a      	movs	r3, #10
 8008806:	485e      	ldr	r0, [pc, #376]	; (8008980 <_printf_i+0x244>)
 8008808:	e019      	b.n	800883e <_printf_i+0x102>
 800880a:	680e      	ldr	r6, [r1, #0]
 800880c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008810:	602b      	str	r3, [r5, #0]
 8008812:	bf18      	it	ne
 8008814:	b236      	sxthne	r6, r6
 8008816:	e7ef      	b.n	80087f8 <_printf_i+0xbc>
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	1d19      	adds	r1, r3, #4
 800881e:	6029      	str	r1, [r5, #0]
 8008820:	0601      	lsls	r1, r0, #24
 8008822:	d501      	bpl.n	8008828 <_printf_i+0xec>
 8008824:	681e      	ldr	r6, [r3, #0]
 8008826:	e002      	b.n	800882e <_printf_i+0xf2>
 8008828:	0646      	lsls	r6, r0, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0xe8>
 800882c:	881e      	ldrh	r6, [r3, #0]
 800882e:	2f6f      	cmp	r7, #111	; 0x6f
 8008830:	bf0c      	ite	eq
 8008832:	2308      	moveq	r3, #8
 8008834:	230a      	movne	r3, #10
 8008836:	4852      	ldr	r0, [pc, #328]	; (8008980 <_printf_i+0x244>)
 8008838:	2100      	movs	r1, #0
 800883a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883e:	6865      	ldr	r5, [r4, #4]
 8008840:	2d00      	cmp	r5, #0
 8008842:	bfa8      	it	ge
 8008844:	6821      	ldrge	r1, [r4, #0]
 8008846:	60a5      	str	r5, [r4, #8]
 8008848:	bfa4      	itt	ge
 800884a:	f021 0104 	bicge.w	r1, r1, #4
 800884e:	6021      	strge	r1, [r4, #0]
 8008850:	b90e      	cbnz	r6, 8008856 <_printf_i+0x11a>
 8008852:	2d00      	cmp	r5, #0
 8008854:	d04d      	beq.n	80088f2 <_printf_i+0x1b6>
 8008856:	4615      	mov	r5, r2
 8008858:	fbb6 f1f3 	udiv	r1, r6, r3
 800885c:	fb03 6711 	mls	r7, r3, r1, r6
 8008860:	5dc7      	ldrb	r7, [r0, r7]
 8008862:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008866:	4637      	mov	r7, r6
 8008868:	42bb      	cmp	r3, r7
 800886a:	460e      	mov	r6, r1
 800886c:	d9f4      	bls.n	8008858 <_printf_i+0x11c>
 800886e:	2b08      	cmp	r3, #8
 8008870:	d10b      	bne.n	800888a <_printf_i+0x14e>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	07de      	lsls	r6, r3, #31
 8008876:	d508      	bpl.n	800888a <_printf_i+0x14e>
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	6861      	ldr	r1, [r4, #4]
 800887c:	4299      	cmp	r1, r3
 800887e:	bfde      	ittt	le
 8008880:	2330      	movle	r3, #48	; 0x30
 8008882:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008886:	f105 35ff 	addle.w	r5, r5, #4294967295
 800888a:	1b52      	subs	r2, r2, r5
 800888c:	6122      	str	r2, [r4, #16]
 800888e:	464b      	mov	r3, r9
 8008890:	4621      	mov	r1, r4
 8008892:	4640      	mov	r0, r8
 8008894:	f8cd a000 	str.w	sl, [sp]
 8008898:	aa03      	add	r2, sp, #12
 800889a:	f7ff fedf 	bl	800865c <_printf_common>
 800889e:	3001      	adds	r0, #1
 80088a0:	d14c      	bne.n	800893c <_printf_i+0x200>
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	b004      	add	sp, #16
 80088a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ac:	4834      	ldr	r0, [pc, #208]	; (8008980 <_printf_i+0x244>)
 80088ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088b2:	6829      	ldr	r1, [r5, #0]
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80088ba:	6029      	str	r1, [r5, #0]
 80088bc:	061d      	lsls	r5, r3, #24
 80088be:	d514      	bpl.n	80088ea <_printf_i+0x1ae>
 80088c0:	07df      	lsls	r7, r3, #31
 80088c2:	bf44      	itt	mi
 80088c4:	f043 0320 	orrmi.w	r3, r3, #32
 80088c8:	6023      	strmi	r3, [r4, #0]
 80088ca:	b91e      	cbnz	r6, 80088d4 <_printf_i+0x198>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	f023 0320 	bic.w	r3, r3, #32
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	2310      	movs	r3, #16
 80088d6:	e7af      	b.n	8008838 <_printf_i+0xfc>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	f043 0320 	orr.w	r3, r3, #32
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	2378      	movs	r3, #120	; 0x78
 80088e2:	4828      	ldr	r0, [pc, #160]	; (8008984 <_printf_i+0x248>)
 80088e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088e8:	e7e3      	b.n	80088b2 <_printf_i+0x176>
 80088ea:	0659      	lsls	r1, r3, #25
 80088ec:	bf48      	it	mi
 80088ee:	b2b6      	uxthmi	r6, r6
 80088f0:	e7e6      	b.n	80088c0 <_printf_i+0x184>
 80088f2:	4615      	mov	r5, r2
 80088f4:	e7bb      	b.n	800886e <_printf_i+0x132>
 80088f6:	682b      	ldr	r3, [r5, #0]
 80088f8:	6826      	ldr	r6, [r4, #0]
 80088fa:	1d18      	adds	r0, r3, #4
 80088fc:	6961      	ldr	r1, [r4, #20]
 80088fe:	6028      	str	r0, [r5, #0]
 8008900:	0635      	lsls	r5, r6, #24
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	d501      	bpl.n	800890a <_printf_i+0x1ce>
 8008906:	6019      	str	r1, [r3, #0]
 8008908:	e002      	b.n	8008910 <_printf_i+0x1d4>
 800890a:	0670      	lsls	r0, r6, #25
 800890c:	d5fb      	bpl.n	8008906 <_printf_i+0x1ca>
 800890e:	8019      	strh	r1, [r3, #0]
 8008910:	2300      	movs	r3, #0
 8008912:	4615      	mov	r5, r2
 8008914:	6123      	str	r3, [r4, #16]
 8008916:	e7ba      	b.n	800888e <_printf_i+0x152>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	2100      	movs	r1, #0
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	602a      	str	r2, [r5, #0]
 8008920:	681d      	ldr	r5, [r3, #0]
 8008922:	6862      	ldr	r2, [r4, #4]
 8008924:	4628      	mov	r0, r5
 8008926:	f000 f8d9 	bl	8008adc <memchr>
 800892a:	b108      	cbz	r0, 8008930 <_printf_i+0x1f4>
 800892c:	1b40      	subs	r0, r0, r5
 800892e:	6060      	str	r0, [r4, #4]
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	6123      	str	r3, [r4, #16]
 8008934:	2300      	movs	r3, #0
 8008936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800893a:	e7a8      	b.n	800888e <_printf_i+0x152>
 800893c:	462a      	mov	r2, r5
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	6923      	ldr	r3, [r4, #16]
 8008944:	47d0      	blx	sl
 8008946:	3001      	adds	r0, #1
 8008948:	d0ab      	beq.n	80088a2 <_printf_i+0x166>
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	079b      	lsls	r3, r3, #30
 800894e:	d413      	bmi.n	8008978 <_printf_i+0x23c>
 8008950:	68e0      	ldr	r0, [r4, #12]
 8008952:	9b03      	ldr	r3, [sp, #12]
 8008954:	4298      	cmp	r0, r3
 8008956:	bfb8      	it	lt
 8008958:	4618      	movlt	r0, r3
 800895a:	e7a4      	b.n	80088a6 <_printf_i+0x16a>
 800895c:	2301      	movs	r3, #1
 800895e:	4632      	mov	r2, r6
 8008960:	4649      	mov	r1, r9
 8008962:	4640      	mov	r0, r8
 8008964:	47d0      	blx	sl
 8008966:	3001      	adds	r0, #1
 8008968:	d09b      	beq.n	80088a2 <_printf_i+0x166>
 800896a:	3501      	adds	r5, #1
 800896c:	68e3      	ldr	r3, [r4, #12]
 800896e:	9903      	ldr	r1, [sp, #12]
 8008970:	1a5b      	subs	r3, r3, r1
 8008972:	42ab      	cmp	r3, r5
 8008974:	dcf2      	bgt.n	800895c <_printf_i+0x220>
 8008976:	e7eb      	b.n	8008950 <_printf_i+0x214>
 8008978:	2500      	movs	r5, #0
 800897a:	f104 0619 	add.w	r6, r4, #25
 800897e:	e7f5      	b.n	800896c <_printf_i+0x230>
 8008980:	08009825 	.word	0x08009825
 8008984:	08009836 	.word	0x08009836

08008988 <_sbrk_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	2300      	movs	r3, #0
 800898c:	4d05      	ldr	r5, [pc, #20]	; (80089a4 <_sbrk_r+0x1c>)
 800898e:	4604      	mov	r4, r0
 8008990:	4608      	mov	r0, r1
 8008992:	602b      	str	r3, [r5, #0]
 8008994:	f7fc fd7a 	bl	800548c <_sbrk>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d102      	bne.n	80089a2 <_sbrk_r+0x1a>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	b103      	cbz	r3, 80089a2 <_sbrk_r+0x1a>
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
 80089a4:	200001ac 	.word	0x200001ac

080089a8 <__sread>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b0:	f000 f8ae 	bl	8008b10 <_read_r>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	bfab      	itete	ge
 80089b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089ba:	89a3      	ldrhlt	r3, [r4, #12]
 80089bc:	181b      	addge	r3, r3, r0
 80089be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089c2:	bfac      	ite	ge
 80089c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089c6:	81a3      	strhlt	r3, [r4, #12]
 80089c8:	bd10      	pop	{r4, pc}

080089ca <__swrite>:
 80089ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ce:	461f      	mov	r7, r3
 80089d0:	898b      	ldrh	r3, [r1, #12]
 80089d2:	4605      	mov	r5, r0
 80089d4:	05db      	lsls	r3, r3, #23
 80089d6:	460c      	mov	r4, r1
 80089d8:	4616      	mov	r6, r2
 80089da:	d505      	bpl.n	80089e8 <__swrite+0x1e>
 80089dc:	2302      	movs	r3, #2
 80089de:	2200      	movs	r2, #0
 80089e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e4:	f000 f868 	bl	8008ab8 <_lseek_r>
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	4632      	mov	r2, r6
 80089ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	4628      	mov	r0, r5
 80089f4:	463b      	mov	r3, r7
 80089f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	f000 b817 	b.w	8008a30 <_write_r>

08008a02 <__sseek>:
 8008a02:	b510      	push	{r4, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a0a:	f000 f855 	bl	8008ab8 <_lseek_r>
 8008a0e:	1c43      	adds	r3, r0, #1
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	bf15      	itete	ne
 8008a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a1e:	81a3      	strheq	r3, [r4, #12]
 8008a20:	bf18      	it	ne
 8008a22:	81a3      	strhne	r3, [r4, #12]
 8008a24:	bd10      	pop	{r4, pc}

08008a26 <__sclose>:
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 b813 	b.w	8008a54 <_close_r>
	...

08008a30 <_write_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4d05      	ldr	r5, [pc, #20]	; (8008a50 <_write_r+0x20>)
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7fc fc32 	bl	80052a8 <_write>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_write_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_write_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	200001ac 	.word	0x200001ac

08008a54 <_close_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	2300      	movs	r3, #0
 8008a58:	4d05      	ldr	r5, [pc, #20]	; (8008a70 <_close_r+0x1c>)
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	602b      	str	r3, [r5, #0]
 8008a60:	f7fc fc4e 	bl	8005300 <_close>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	d102      	bne.n	8008a6e <_close_r+0x1a>
 8008a68:	682b      	ldr	r3, [r5, #0]
 8008a6a:	b103      	cbz	r3, 8008a6e <_close_r+0x1a>
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}
 8008a70:	200001ac 	.word	0x200001ac

08008a74 <_fstat_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	2300      	movs	r3, #0
 8008a78:	4d06      	ldr	r5, [pc, #24]	; (8008a94 <_fstat_r+0x20>)
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	4611      	mov	r1, r2
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f7fc fc8d 	bl	80053a0 <_fstat>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d102      	bne.n	8008a90 <_fstat_r+0x1c>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b103      	cbz	r3, 8008a90 <_fstat_r+0x1c>
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	200001ac 	.word	0x200001ac

08008a98 <_isatty_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	4d05      	ldr	r5, [pc, #20]	; (8008ab4 <_isatty_r+0x1c>)
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	602b      	str	r3, [r5, #0]
 8008aa4:	f7fc fbea 	bl	800527c <_isatty>
 8008aa8:	1c43      	adds	r3, r0, #1
 8008aaa:	d102      	bne.n	8008ab2 <_isatty_r+0x1a>
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	b103      	cbz	r3, 8008ab2 <_isatty_r+0x1a>
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	bd38      	pop	{r3, r4, r5, pc}
 8008ab4:	200001ac 	.word	0x200001ac

08008ab8 <_lseek_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	4d05      	ldr	r5, [pc, #20]	; (8008ad8 <_lseek_r+0x20>)
 8008ac4:	602a      	str	r2, [r5, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f7fc fc31 	bl	800532e <_lseek>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_lseek_r+0x1e>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_lseek_r+0x1e>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	200001ac 	.word	0x200001ac

08008adc <memchr>:
 8008adc:	4603      	mov	r3, r0
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	b2c9      	uxtb	r1, r1
 8008ae2:	4402      	add	r2, r0
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	d101      	bne.n	8008aee <memchr+0x12>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e003      	b.n	8008af6 <memchr+0x1a>
 8008aee:	7804      	ldrb	r4, [r0, #0]
 8008af0:	3301      	adds	r3, #1
 8008af2:	428c      	cmp	r4, r1
 8008af4:	d1f6      	bne.n	8008ae4 <memchr+0x8>
 8008af6:	bd10      	pop	{r4, pc}

08008af8 <__malloc_lock>:
 8008af8:	4801      	ldr	r0, [pc, #4]	; (8008b00 <__malloc_lock+0x8>)
 8008afa:	f7ff bb0b 	b.w	8008114 <__retarget_lock_acquire_recursive>
 8008afe:	bf00      	nop
 8008b00:	200001a0 	.word	0x200001a0

08008b04 <__malloc_unlock>:
 8008b04:	4801      	ldr	r0, [pc, #4]	; (8008b0c <__malloc_unlock+0x8>)
 8008b06:	f7ff bb06 	b.w	8008116 <__retarget_lock_release_recursive>
 8008b0a:	bf00      	nop
 8008b0c:	200001a0 	.word	0x200001a0

08008b10 <_read_r>:
 8008b10:	b538      	push	{r3, r4, r5, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4d05      	ldr	r5, [pc, #20]	; (8008b30 <_read_r+0x20>)
 8008b1c:	602a      	str	r2, [r5, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f7fc fc16 	bl	8005350 <_read>
 8008b24:	1c43      	adds	r3, r0, #1
 8008b26:	d102      	bne.n	8008b2e <_read_r+0x1e>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	b103      	cbz	r3, 8008b2e <_read_r+0x1e>
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	bd38      	pop	{r3, r4, r5, pc}
 8008b30:	200001ac 	.word	0x200001ac

08008b34 <sqrt>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	4606      	mov	r6, r0
 8008b38:	460f      	mov	r7, r1
 8008b3a:	f000 f81f 	bl	8008b7c <__ieee754_sqrt>
 8008b3e:	4632      	mov	r2, r6
 8008b40:	4604      	mov	r4, r0
 8008b42:	460d      	mov	r5, r1
 8008b44:	463b      	mov	r3, r7
 8008b46:	4630      	mov	r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7f7 ffc3 	bl	8000ad4 <__aeabi_dcmpun>
 8008b4e:	b990      	cbnz	r0, 8008b76 <sqrt+0x42>
 8008b50:	2200      	movs	r2, #0
 8008b52:	2300      	movs	r3, #0
 8008b54:	4630      	mov	r0, r6
 8008b56:	4639      	mov	r1, r7
 8008b58:	f7f7 ff94 	bl	8000a84 <__aeabi_dcmplt>
 8008b5c:	b158      	cbz	r0, 8008b76 <sqrt+0x42>
 8008b5e:	f7fe fedf 	bl	8007920 <__errno>
 8008b62:	2321      	movs	r3, #33	; 0x21
 8008b64:	2200      	movs	r2, #0
 8008b66:	6003      	str	r3, [r0, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f7f7 fe41 	bl	80007f4 <__aeabi_ddiv>
 8008b72:	4604      	mov	r4, r0
 8008b74:	460d      	mov	r5, r1
 8008b76:	4620      	mov	r0, r4
 8008b78:	4629      	mov	r1, r5
 8008b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b7c <__ieee754_sqrt>:
 8008b7c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008cd8 <__ieee754_sqrt+0x15c>
 8008b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b84:	ea3c 0c01 	bics.w	ip, ip, r1
 8008b88:	4606      	mov	r6, r0
 8008b8a:	460d      	mov	r5, r1
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	460a      	mov	r2, r1
 8008b90:	4607      	mov	r7, r0
 8008b92:	4603      	mov	r3, r0
 8008b94:	d10f      	bne.n	8008bb6 <__ieee754_sqrt+0x3a>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	f7f7 fd01 	bl	80005a0 <__aeabi_dmul>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	f7f7 fb45 	bl	8000234 <__adddf3>
 8008baa:	4606      	mov	r6, r0
 8008bac:	460d      	mov	r5, r1
 8008bae:	4630      	mov	r0, r6
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb6:	2900      	cmp	r1, #0
 8008bb8:	dc0e      	bgt.n	8008bd8 <__ieee754_sqrt+0x5c>
 8008bba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008bbe:	ea5c 0707 	orrs.w	r7, ip, r7
 8008bc2:	d0f4      	beq.n	8008bae <__ieee754_sqrt+0x32>
 8008bc4:	b141      	cbz	r1, 8008bd8 <__ieee754_sqrt+0x5c>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	f7f7 fb31 	bl	8000230 <__aeabi_dsub>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	f7f7 fe0f 	bl	80007f4 <__aeabi_ddiv>
 8008bd6:	e7e8      	b.n	8008baa <__ieee754_sqrt+0x2e>
 8008bd8:	1521      	asrs	r1, r4, #20
 8008bda:	d075      	beq.n	8008cc8 <__ieee754_sqrt+0x14c>
 8008bdc:	07cc      	lsls	r4, r1, #31
 8008bde:	f04f 0400 	mov.w	r4, #0
 8008be2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008be6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008bea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008bee:	bf5e      	ittt	pl
 8008bf0:	0fd9      	lsrpl	r1, r3, #31
 8008bf2:	005b      	lslpl	r3, r3, #1
 8008bf4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008bf8:	0fd9      	lsrs	r1, r3, #31
 8008bfa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008bfe:	2516      	movs	r5, #22
 8008c00:	4620      	mov	r0, r4
 8008c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c06:	107f      	asrs	r7, r7, #1
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	1846      	adds	r6, r0, r1
 8008c0c:	4296      	cmp	r6, r2
 8008c0e:	bfde      	ittt	le
 8008c10:	1b92      	suble	r2, r2, r6
 8008c12:	1870      	addle	r0, r6, r1
 8008c14:	1864      	addle	r4, r4, r1
 8008c16:	0052      	lsls	r2, r2, #1
 8008c18:	3d01      	subs	r5, #1
 8008c1a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008c1e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008c22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c26:	d1f0      	bne.n	8008c0a <__ieee754_sqrt+0x8e>
 8008c28:	4629      	mov	r1, r5
 8008c2a:	f04f 0e20 	mov.w	lr, #32
 8008c2e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008c32:	4282      	cmp	r2, r0
 8008c34:	eb06 0c05 	add.w	ip, r6, r5
 8008c38:	dc02      	bgt.n	8008c40 <__ieee754_sqrt+0xc4>
 8008c3a:	d113      	bne.n	8008c64 <__ieee754_sqrt+0xe8>
 8008c3c:	459c      	cmp	ip, r3
 8008c3e:	d811      	bhi.n	8008c64 <__ieee754_sqrt+0xe8>
 8008c40:	f1bc 0f00 	cmp.w	ip, #0
 8008c44:	eb0c 0506 	add.w	r5, ip, r6
 8008c48:	da43      	bge.n	8008cd2 <__ieee754_sqrt+0x156>
 8008c4a:	2d00      	cmp	r5, #0
 8008c4c:	db41      	blt.n	8008cd2 <__ieee754_sqrt+0x156>
 8008c4e:	f100 0801 	add.w	r8, r0, #1
 8008c52:	1a12      	subs	r2, r2, r0
 8008c54:	4640      	mov	r0, r8
 8008c56:	459c      	cmp	ip, r3
 8008c58:	bf88      	it	hi
 8008c5a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008c5e:	eba3 030c 	sub.w	r3, r3, ip
 8008c62:	4431      	add	r1, r6
 8008c64:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008c68:	f1be 0e01 	subs.w	lr, lr, #1
 8008c6c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c74:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008c78:	d1db      	bne.n	8008c32 <__ieee754_sqrt+0xb6>
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	d006      	beq.n	8008c8c <__ieee754_sqrt+0x110>
 8008c7e:	1c48      	adds	r0, r1, #1
 8008c80:	bf0b      	itete	eq
 8008c82:	4671      	moveq	r1, lr
 8008c84:	3101      	addne	r1, #1
 8008c86:	3401      	addeq	r4, #1
 8008c88:	f021 0101 	bicne.w	r1, r1, #1
 8008c8c:	1063      	asrs	r3, r4, #1
 8008c8e:	0849      	lsrs	r1, r1, #1
 8008c90:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008c94:	07e2      	lsls	r2, r4, #31
 8008c96:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008c9a:	bf48      	it	mi
 8008c9c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008ca6:	e782      	b.n	8008bae <__ieee754_sqrt+0x32>
 8008ca8:	0ada      	lsrs	r2, r3, #11
 8008caa:	3815      	subs	r0, #21
 8008cac:	055b      	lsls	r3, r3, #21
 8008cae:	2a00      	cmp	r2, #0
 8008cb0:	d0fa      	beq.n	8008ca8 <__ieee754_sqrt+0x12c>
 8008cb2:	02d5      	lsls	r5, r2, #11
 8008cb4:	d50a      	bpl.n	8008ccc <__ieee754_sqrt+0x150>
 8008cb6:	f1c1 0420 	rsb	r4, r1, #32
 8008cba:	fa23 f404 	lsr.w	r4, r3, r4
 8008cbe:	1e4d      	subs	r5, r1, #1
 8008cc0:	408b      	lsls	r3, r1
 8008cc2:	4322      	orrs	r2, r4
 8008cc4:	1b41      	subs	r1, r0, r5
 8008cc6:	e789      	b.n	8008bdc <__ieee754_sqrt+0x60>
 8008cc8:	4608      	mov	r0, r1
 8008cca:	e7f0      	b.n	8008cae <__ieee754_sqrt+0x132>
 8008ccc:	0052      	lsls	r2, r2, #1
 8008cce:	3101      	adds	r1, #1
 8008cd0:	e7ef      	b.n	8008cb2 <__ieee754_sqrt+0x136>
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	e7bd      	b.n	8008c52 <__ieee754_sqrt+0xd6>
 8008cd6:	bf00      	nop
 8008cd8:	7ff00000 	.word	0x7ff00000

08008cdc <_init>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	bf00      	nop
 8008ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce2:	bc08      	pop	{r3}
 8008ce4:	469e      	mov	lr, r3
 8008ce6:	4770      	bx	lr

08008ce8 <_fini>:
 8008ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cea:	bf00      	nop
 8008cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cee:	bc08      	pop	{r3}
 8008cf0:	469e      	mov	lr, r3
 8008cf2:	4770      	bx	lr
